{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OctopusLab V t\u011bchto materi\u00e1lech se sdru\u017euje dokumentace, n\u00e1vody a tutori\u00e1ly, \u010d\u00e1sti workshop\u016f, projekt\u016f a uk\u00e1zek pou\u017eit\u00ed . D\u016fraz je kladen na MicroPython a popis knihoven pro Octopus FrameWork , kde komplexn\u011bj\u0161\u00ed procesy rozd\u011blujeme na jednodu\u0161\u0161\u00ed \u010dinnosti a jejich vazby. V\u00fdvojov\u00e9 a v\u00fdukov\u00e9 moduly Co vlastn\u011b d\u011bl\u00e1me? Vyv\u00edj\u00edme hardwarov\u00e9 moduly zam\u011b\u0159en\u00e9 na vyu\u017eit\u00ed ESP32 a Micropythonu . Navrhujeme desky plo\u0161n\u00fdch spoj\u016f, kter\u00e9 se daj\u00ed podle pot\u0159eby prom\u011bnit v celou \u0159adu zaj\u00edmav\u00fdch projekt\u016f pro robotiku, internet v\u011bc\u00ed a podobn\u011b. N\u00e1mi navr\u017een\u00e9 v\u00fdvojov\u00e9 a experiment\u00e1ln\u00ed desky, slou\u017e\u00ed i jako fin\u00e1ln\u011b zapojiteln\u00e9 moduly pro projekty nebo jejich \u010d\u00e1sti. Jednoduch\u00e9 (nebo \u010d\u00e1ste\u010dn\u011b zapojen\u00e9) \"produkty\" v\u00fdborn\u011b pom\u00e1haj\u00ed i p\u0159i v\u00fduce. V z\u00e1kladn\u00ed \u010d\u00e1sti se zam\u011b\u0159ujeme na jednu z na\u0161ich \"stavebnic\" EDU-KIT1 . Dal\u0161\u00ed informace m\u016f\u017eete naj\u00edt na webu http://www.octopuslab.cz ESP32 V\u00fdrobcem tohoto \"mikropo\u010d\u00edta\u010de\" je spole\u010dnost Espressif (proto zkratka ESP ). Na desti\u010dce p\u0159ipom\u00ednaj\u00edc\u00ed po\u0161tovn\u00ed zn\u00e1mku je mikroprocesor s pam\u011bt\u00ed, a n\u011bkolika kl\u00ed\u010dov\u00fdmi komponenty v\u010detn\u011b taktovac\u00edho krystalu, ant\u00e9ny pro WiFi a Bluetooth. ESP32 je tak okam\u017eit\u011b p\u0159ipraveno k integraci do koncov\u00fdch produkt\u016f. P\u0159esn\u011bj\u0161\u00ed n\u00e1zev je mikrokontrol\u00e9r , co\u017e je obvod, kter\u00fd krom\u011b procesoru obsahuje i pam\u011b\u0165 a dal\u0161\u00ed \u010d\u00e1sti, p\u0159edev\u0161\u00edm pro vstupy a v\u00fdstupy nebo komunikaci. Pokud v\u00e1s zaj\u00edma v\u00edc podrobnost\u00ed, naleznete je na dal\u0161\u00ed samostatn\u00e9 str\u00e1nce ESP32 Micropython Micropython je \"odleh\u010den\u00e1\" verze popul\u00e1rn\u00edho programovac\u00edho jazyka Python . Je to p\u0159esn\u011bji softwarov\u00e1 implementace vy\u0161\u0161\u00edho programovac\u00edho jazkyka kompatibiln\u00edho s Python 3.x. Je napsan\u00fd v C a optimalizovan\u00fd pro pou\u017eit\u00ed v mikrokontrol\u00e9rech. Includes: complete parser, compiler, virtual machine, runtime system and garbage collector. (snad ani nep\u0159ekl\u00e1dat) Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm HW. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz Jak se zapojit? ,'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( Chobotnice je r\u00e1da za ka\u017ed\u00fd koment\u00e1\u0159 :like: Open source projekt je zalo\u017een na spolupr\u00e1ci V\u0161echny podklady tohoto \"manu\u00e1lu\" p\u00ed\u0161eme v markdownu a jsou ve\u0159ejn\u011b na GitHubu , budeme r\u00e1di za va\u0161e p\u0159ipom\u00ednky a n\u00e1pady https://github.com/octopusengine/docs_octopuslab_cz Ka\u017ed\u00fd m\u016f\u017ee navrhovat dopln\u011bn\u00ed, hl\u00e1sit chyby a libovoln\u00fdm zp\u016fsobem p\u0159isp\u00edvat. V\u017edy, kdy\u017e se navrhovan\u00e1 zm\u011bna schv\u00e1l\u00ed (commit) do hlavn\u00ed v\u011btve (master branch) , automaticky se publikuje na t\u011bchto str\u00e1nk\u00e1ch. Budeme r\u00e1di, kdy\u017e n\u00e1m d\u00e1te v\u011bd\u011bt, jak se V\u00e1m s na\u0161\u00edm dokumentem pracuje. Vypad\u00e1 to jenom jako takov\u00e1 blost, ale fakt to dalo dost pr\u00e1ce. Co to je? A jak se s n\u00edm pracuje? Za t\u00fdm octopusLABu: Honza \u010cop\u00e1k, Petr Krac\u00edk, Va\u0161ek Chalupn\u00ed\u010dek, Vladim\u00edr Ji\u0159\u00ed\u010dek, Jan \u010ce\u0161pivo, Milan \u0160pa\u010dek, Met\u011bj Such\u00e1nek a dal\u0161\u00ed","title":"OctopusLAB"},{"location":"#octopuslab","text":"V t\u011bchto materi\u00e1lech se sdru\u017euje dokumentace, n\u00e1vody a tutori\u00e1ly, \u010d\u00e1sti workshop\u016f, projekt\u016f a uk\u00e1zek pou\u017eit\u00ed . D\u016fraz je kladen na MicroPython a popis knihoven pro Octopus FrameWork , kde komplexn\u011bj\u0161\u00ed procesy rozd\u011blujeme na jednodu\u0161\u0161\u00ed \u010dinnosti a jejich vazby.","title":"OctopusLab"},{"location":"#vyvojove-a-vyukove-moduly","text":"Co vlastn\u011b d\u011bl\u00e1me? Vyv\u00edj\u00edme hardwarov\u00e9 moduly zam\u011b\u0159en\u00e9 na vyu\u017eit\u00ed ESP32 a Micropythonu . Navrhujeme desky plo\u0161n\u00fdch spoj\u016f, kter\u00e9 se daj\u00ed podle pot\u0159eby prom\u011bnit v celou \u0159adu zaj\u00edmav\u00fdch projekt\u016f pro robotiku, internet v\u011bc\u00ed a podobn\u011b. N\u00e1mi navr\u017een\u00e9 v\u00fdvojov\u00e9 a experiment\u00e1ln\u00ed desky, slou\u017e\u00ed i jako fin\u00e1ln\u011b zapojiteln\u00e9 moduly pro projekty nebo jejich \u010d\u00e1sti. Jednoduch\u00e9 (nebo \u010d\u00e1ste\u010dn\u011b zapojen\u00e9) \"produkty\" v\u00fdborn\u011b pom\u00e1haj\u00ed i p\u0159i v\u00fduce. V z\u00e1kladn\u00ed \u010d\u00e1sti se zam\u011b\u0159ujeme na jednu z na\u0161ich \"stavebnic\" EDU-KIT1 . Dal\u0161\u00ed informace m\u016f\u017eete naj\u00edt na webu http://www.octopuslab.cz","title":"V\u00fdvojov\u00e9 a v\u00fdukov\u00e9 moduly"},{"location":"#esp32","text":"V\u00fdrobcem tohoto \"mikropo\u010d\u00edta\u010de\" je spole\u010dnost Espressif (proto zkratka ESP ). Na desti\u010dce p\u0159ipom\u00ednaj\u00edc\u00ed po\u0161tovn\u00ed zn\u00e1mku je mikroprocesor s pam\u011bt\u00ed, a n\u011bkolika kl\u00ed\u010dov\u00fdmi komponenty v\u010detn\u011b taktovac\u00edho krystalu, ant\u00e9ny pro WiFi a Bluetooth. ESP32 je tak okam\u017eit\u011b p\u0159ipraveno k integraci do koncov\u00fdch produkt\u016f. P\u0159esn\u011bj\u0161\u00ed n\u00e1zev je mikrokontrol\u00e9r , co\u017e je obvod, kter\u00fd krom\u011b procesoru obsahuje i pam\u011b\u0165 a dal\u0161\u00ed \u010d\u00e1sti, p\u0159edev\u0161\u00edm pro vstupy a v\u00fdstupy nebo komunikaci. Pokud v\u00e1s zaj\u00edma v\u00edc podrobnost\u00ed, naleznete je na dal\u0161\u00ed samostatn\u00e9 str\u00e1nce ESP32","title":"ESP32"},{"location":"#micropython","text":"Micropython je \"odleh\u010den\u00e1\" verze popul\u00e1rn\u00edho programovac\u00edho jazyka Python . Je to p\u0159esn\u011bji softwarov\u00e1 implementace vy\u0161\u0161\u00edho programovac\u00edho jazkyka kompatibiln\u00edho s Python 3.x. Je napsan\u00fd v C a optimalizovan\u00fd pro pou\u017eit\u00ed v mikrokontrol\u00e9rech. Includes: complete parser, compiler, virtual machine, runtime system and garbage collector. (snad ani nep\u0159ekl\u00e1dat) Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm HW. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz","title":"Micropython"},{"location":"#jak-se-zapojit","text":",'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( Chobotnice je r\u00e1da za ka\u017ed\u00fd koment\u00e1\u0159 :like: Open source projekt je zalo\u017een na spolupr\u00e1ci V\u0161echny podklady tohoto \"manu\u00e1lu\" p\u00ed\u0161eme v markdownu a jsou ve\u0159ejn\u011b na GitHubu , budeme r\u00e1di za va\u0161e p\u0159ipom\u00ednky a n\u00e1pady https://github.com/octopusengine/docs_octopuslab_cz Ka\u017ed\u00fd m\u016f\u017ee navrhovat dopln\u011bn\u00ed, hl\u00e1sit chyby a libovoln\u00fdm zp\u016fsobem p\u0159isp\u00edvat. V\u017edy, kdy\u017e se navrhovan\u00e1 zm\u011bna schv\u00e1l\u00ed (commit) do hlavn\u00ed v\u011btve (master branch) , automaticky se publikuje na t\u011bchto str\u00e1nk\u00e1ch. Budeme r\u00e1di, kdy\u017e n\u00e1m d\u00e1te v\u011bd\u011bt, jak se V\u00e1m s na\u0161\u00edm dokumentem pracuje. Vypad\u00e1 to jenom jako takov\u00e1 blost, ale fakt to dalo dost pr\u00e1ce. Co to je? A jak se s n\u00edm pracuje? Za t\u00fdm octopusLABu: Honza \u010cop\u00e1k, Petr Krac\u00edk, Va\u0161ek Chalupn\u00ed\u010dek, Vladim\u00edr Ji\u0159\u00ed\u010dek, Jan \u010ce\u0161pivo, Milan \u0160pa\u010dek, Met\u011bj Such\u00e1nek a dal\u0161\u00ed","title":"Jak se zapojit?"},{"location":"basicdoc/","text":"Dokumentace Toto je hlavn\u00ed \u010d\u00e1st dokumentace, popisuj\u00edc\u00ed co a jak . V dal\u0161\u00edch \u010d\u00e1stech, p\u0159edev\u0161\u00edm pak v odd\u00edle Workshopy / tutori\u00e1ly se pak dozv\u00edte jak na to . Origin\u00e1ln\u00ed dokumentaci k MicroPythonu najdete na str\u00e1nk\u00e1ch \ud83e\udc52 docs.micropython/esp32 Moduly, t\u0159\u00eddy, funkce Z\u00e1klad pro dal\u0161\u00ed pochopen\u00ed (Micro)Pythonu T\u00e9m\u011b\u0159 v\u0161e v Pythonu je objekt. Objekt je kolekce dat (prom\u011bnn\u00fdch) a metod (funkc\u00ed), kter\u00e9 s dan\u00fdmi daty pracuj\u00ed. Prototypem objekt\u016f jsou t\u0159\u00eddy , z nich\u017e jsou v\u0161echny objekty (\u010d\u00edsla, \u0159et\u011bzce, funkce, moduly, metody, atp) odvozeny coby instance . Pokud v\u00e1m to nen\u00ed jasn\u00e9, trochu podrobn\u011bji se o tom rozepisujeme na samostatn\u00e9 str\u00e1nce: class() . Pro spr\u00e1vn\u00e9 pochopen\u00ed a p\u0159edev\u0161\u00edm v kontextu pr\u00e1ce s hardware za\u010d\u00e1te\u010dn\u00edk\u016fm doporu\u010dujeme zm\u00edn\u011bn\u00fd odkaz alespo\u0148 letmo nav\u0161t\u00edvit. Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm HW. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz Knihovny (components | utils | lib) Jednotliv\u00e9 moduly - knihovny (podprogramy, t\u0159\u00eddy) jsme rozd\u011blili do n\u011bkolika z\u00e1kladn\u00edch adres\u00e1\u0159\u016f: /components , kam postupn\u011b p\u0159id\u00e1v\u00e1me jednotliv\u00e9 \"osamostatn\u011bl\u00e9\" komponenty. /lib , kde jsou p\u0159ev\u00e1\u017en\u011b knihovny t\u0159et\u00edch stran, a mal\u00e9 fragmenty, kter\u00e9 maj\u00ed v\u00fdhodu, \u017ee se p\u0159i importu v adres\u00e1\u0159i lib hledaj\u00ed, Micropython je nalezne bez ud\u00e1n\u00ed cesty k nim. /utils , (utility) moduly octopusLAB, a t\u0159\u00eddy pro pr\u00e1ci s periferiemi. U\u017eivatele vlastn\u011b nemus\u00ed zaj\u00edmat, kde to je ulo\u017eeno, a tak na to d\u016fraz neklademe, jen je vhodn\u00e9 si to pohl\u00eddat p\u0159i sestavov\u00e1n\u00ed v\u011bt\u0161\u00edch projekt\u016f. Zdroje programov\u00e9ho k\u00f3du Github => stable.tar => docs Na\u0161\u00ed snahou je udr\u017eet v souladu zdroj z githubu: github.com/octopusengine/octopuslab , kter\u00fd se po kompilaci a komprimaci stane stable.tar a k n\u011bmu udr\u017eovat aktu\u00e1ln\u00ed dokumentaci . Adres\u00e1\u0159ov\u00e1 strukrura na ESP32 |-- boot.py # inicializace po startu | |-- reset |-- main.py # hlavn\u00ed soubor programu |-- /assets # obr\u00e1zky, zvuky, tabulky |-- /config # kofigura\u010dn\u00ed soubory (.json) |-- /lib # obecn\u011b dostupn\u00e1 knihovna (lib) | |-- pubsub | |-- FTP | |-- /blesync_uart | |-- ... | |-- /bmp280 # i2c Atmospheric pressure sensor | |-- /bh1750 # i2c Light sensor | |-- ST7735.py # TFT128*166 color display | |-- colors_rgb.py | |-- hcsr04.py # ultrasonic | |-- lcd | |-- ... | |-- /components | |-- led | |-- rgb | |-- analog | |-- button | |-- display7 | |-- oled | |-- buzzer | |-- servo | |-- dcmotors | |-- [plc] | |-- iot | | Relay | PWM | Thermometer | |-- /utils | |-- setup | |-- octopus_lib | | I2C | SPI | LCD | RTC | ... | |-- WiFiConnect | |-- pinout | |-- bits | |-- transform | |-- database | |-- mqtt | |-- octopus # WorkFrame with WebServer | |-- ... | |-- BLE | |-- /pinouts # nastaven\u00ed pin\u016f |-- /examples # uk\u00e1zky | |-- /asyncio | |-- /ble | |-- /param | |-- /pubsub | |-- blink.py | |-- ... | |-- /tests | |-- /shell | |-- shell | |-- editor |-- ... Pozor Pokud jste pou\u017e\u00edvali n\u00e1\u0161 syst\u00e9m u\u017e v roce 2019 , p\u0159einstalujte si na novou verzi. Velk\u00e1 \u010d\u00e1st syst\u00e9mu by v\u00e1m u\u017e nefungovala. Od t\u00e9 doby do\u0161lo toti\u017e k \u0159ad\u011b zm\u011bn. P\u0159edev\u0161\u00edm byly t\u0159i z\u00e1sadn\u00ed verze Micropythonu, kde se m\u011bnil i form\u00e1t \"kompilovan\u00fdch\" soubor\u016f .mpy , kter\u00e9 jsou z\u00e1kladem na\u0161\u00ed distribuce. Tak\u00e9 se doplnilo BLE pro pr\u00e1ci s BlueTooth low energy . A dal\u0161\u00ed zm\u011bnou byla velk\u00e1 refaktorizace syst\u00e9mu octopus , kde podardes\u00e1\u0159 util byl rozd\u011blen na utils (pro SW utility a hlavn\u00ed framework) a components (kde jsou p\u0159ev\u00e1\u017en\u011b knihovny pro hw komponenty a periferie.) Tak\u00e9 shell byl p\u0159esunut z util/shell do rootu. Soubory boot.py a main.py \u2022 boot.py je soubor, kter\u00fd se spou\u0161t\u00ed jako prvn\u00ed po bezprost\u0159en\u00edm startu nebo po resetu ESP. Zpravidla ho nem\u011bn\u00edme. M\u011bl by obsahovat z\u00e1kladn\u00ed obecnou inicializaci. My tam m\u00e1me p\u0159edev\u0161\u00edm definice cest k modul\u016fm: # boot.py def setup(): import utils.setup utils.setup.setup() def octopus(): import utils.octopus utils.octopus.octopus() return utils.octopus def reset(): from machine import reset reset() def shell(): import shell shell.shell() Reset Pro zjednodu\u0161en\u00e9 pou\u017eit\u00ed resetu pomoc\u00ed p\u0159\u00edkazu reset() je v boot.py p\u0159ednastaveno: def reset(): from machine import reset reset() \u2022 main.py je hlavn\u00ed soubor u\u017eivatelsk\u00e9ho programu, kter\u00fd budeme vyu\u017e\u00edvat pro sv\u00e9 projekty. Spust\u00ed se (pokud existuje) hned po boot.py . \u010casto pou\u017e\u00edv\u00e1me jednoduch\u00e9 kop\u00edrov\u00e1n\u00ed existuj\u00edc\u00edho programu nebo uk\u00e1zky (z examples) v prost\u0159ed\u00ed uPyshell : $ cp examples/blink.py main.py OCTOPUS Components Led T\u0159\u00edda Led je vlastn\u011b jen jednoduch\u00fdm roz\u0161\u00ed\u0159en\u00edm t\u0159\u00eddy Pin . Parametr p\u0159i vytv\u00e1\u0159en\u00ed instance je \u010d\u00edslo pinu. led = Led(2) P\u0159idali jsme k z\u00e1kladn\u00ed metod\u011b value() dal\u0161\u00edch n\u011bkolik metod: toggle() , blink() Zdrojov\u00fd k\u00f3d knihovny: ./components/led Nejkrat\u0161\u00ed varianta pou\u017eit\u00ed je sice s vyu\u017e\u00edt\u00edm utils : from utils.octopus import led led.value(1) Ale pro projekt lep\u0161\u00ed verze je s components (\u0161et\u0159\u00ed pam\u011b\u0165, proto\u017ee nana\u010d\u00edt\u00e1 \"cel\u00fd octopus\"): from components.led import Led led = Led(2) while True: led.blink() dir(led) ['class', 'init', 'module', 'qualname', 'value', 'dict', 'pin', 'blink', 'toggle', 'state'] >>> led.pin > Pin(2) >>> led.state > False >>> led.value(1) # sv\u00edt\u00ed >>> led.state # info o stavu 1 . TAB nab\u00eddka metod: Micropython m\u00e1 obrovskou v\u00fdhodu v tom, \u017ee b\u011b\u017e\u00ed jako interpret: kdy\u017e u\u017eivatel nap\u00ed\u0161e n\u00e1zev prom\u011bnn\u00e9 nebo instance objektu, skoro v\u0161echno se o nich m\u016f\u017eeme dozv\u011bd\u011bt. Napi\u0161te led pak . (te\u010dka) a stiskn\u011bte TAB : led. class init module qualname value dict pin blink toggle state note Pro obecn\u011bj\u0161\u00ed pr\u00e1ci s vyu\u017eit\u00edm set_pinout() (p\u0159eddefinovan\u00fdch pin\u016f ) a io_config p\u0159edpokl\u00e1d\u00e1me, \u017ee pro Octopus FrameWork m\u00e1te pomoc\u00ed setup() nastavenu desku ds a perif\u00e9rie ios . \u010c\u00edslo PINu v uk\u00e1zce je 2, to je sv\u00edtiv\u00e1 dioda vestav\u011bn\u00e1 v DoIt modulech i v na\u0161em ESP32boardu. Ale pro pr\u00e1ci s obecn\u00fdm modulem, kde m\u00e1me mo\u017enost si nastavit, kde se Led dioda nach\u00e1z\u00ed, pou\u017eijeme pak variantu z\u00e1kladn\u00ed uk\u00e1zky z examples, kde BUILT_IN_LED je konstanta, ve kter\u00e9 je \u010d\u00edslo PINu ulo\u017eeno: from components.led import Led from utils.pinout import set_pinout pinout = set_pinout() # set board pinout led = Led(pinout.BUILT_IN_LED) # BUILT_IN_LED = 2 print(\"---examples/blink.py---\") # start main loop while True: led.blink() \ud83e\udc52 pinout Rgb Knihovna pro plnobarevn\u00e9 RGB led je vytvo\u0159ena p\u0159edev\u0161\u00edm pro pr\u00e1ci s adresovatel\u00fdm modulem typu WS2812b ( proto se pou\u017e\u00edv\u00e1 zkratka WS ). Na\u0161e verze je roz\u0161\u00ed\u0159en\u00edm vestav\u011bn\u00e9 t\u0159\u00eddy NeoPixel . Pro \u0159\u00edzen\u00ed klasick\u00fdch R-G-B diod je pot\u0159eba na ka\u017edou barevnou slo\u017eku samostatn\u00fd PIN, co\u017e vyu\u017e\u00edv\u00e1me jen ojedin\u011ble, jeliko\u017e voln\u00fdch PIN\u016f na ESP u\u017e moc nezb\u00fdv\u00e1. Zdrojov\u00fd k\u00f3d knihovny Rgb \ud83e\udc52 components/rgb ( slou\u017e\u00ed i jako uk\u00e1zka, jak lze t\u0159\u00eddu roz\u0161\u00ed\u0159it ) T\u0159\u00edda je roz\u0161\u00ed\u0159ena o n\u011bkter\u00e9 nov\u00e9 metody: color(color) # pro jednu LED diodu, color ve form\u00e1tu (R,G,B), 0-255 color(color, index) # pro v\u00edce modul\u016f, indexov\u00e1no simpleTest() # prob\u011bhne R, G, B wheel() # z \u010d\u00edsla vygeneruje barvu random_color() # n\u00e1hodn\u00e1 barva rainbow_cycle() # duha from components.rgb import Rgb ws = Rgb(15) # BUILT_IN_RGB (WS) ROBOTboard ws.color((255,0,0)) # R G B => RED ws.simpleTest() import colors_rgb as rgb # definice barev v /lib - BLACK (nesv\u00edt\u00ed) ws.color(rgb.BLUE) # zobrazen\u00ed barvy, rgb.RED/rgb.GREEN ... note Pro obecn\u011bj\u0161\u00ed pr\u00e1ci s vyu\u017eit\u00edm set_pinout() (p\u0159eddefinovan\u00fdch pin\u016f ) a io_config p\u0159edpokl\u00e1d\u00e1me, \u017ee pro Octopus FrameWork m\u00e1te pomoc\u00ed setup() nastavenu desku ds a perif\u00e9rie ios . N\u00e1sleduj\u00edc\u00ed uk\u00e1zka nazna\u010duje komplexn\u011bj\u0161\u00ed pr\u00e1ci s p\u0159edkonfigurovan\u00fdmi konstantamy, kter\u00e9 ur\u010duj\u00ed na kter\u00e9m pinu ( pinout.WS_LED_PIN ) a kolik modul\u016f m\u00e1me ( io_conf.get('ws') ). from components.rgb import Rgb from utils.pinout import set_pinout pinout = set_pinout() # set board pinout from utils.io_config import get_from_file io_conf = get_from_file() ws = Rgb(pinout.WS_LED_PIN,io_conf.get('ws')) print(\"---examples/rgb_blink.py---\") ws.simpleTest() Zdrojov\u00fd k\u00f3d uk\u00e1zky: examples/rgb_blink.py Pro b\u011b\u017enou pr\u00e1ci je v prvn\u00ed f\u00e1zi snadn\u011bj\u0161\u00ed pou\u017e\u00edt p\u0159edchoz\u00ed variantu, ale pro rozs\u00e1hlej\u0161\u00ed projekty a pr\u00e1ci v t\u00fdmu se mus\u00ed zdokumentovat pou\u017eit\u00ed \"magick\u00e9 konstanty\" 15 v definici ws = Rgb(15) . \ud83e\udc52 pinout Analog Tento modul je pro pr\u00e1ci s analogov\u00fdm vstupem pomoc\u00ed DAC p\u0159evodn\u00edku. Op\u011bt se jedn\u00e1 o roz\u0161\u00ed\u0159en\u00ed z\u00e1kladn\u00ed t\u0159\u00eddy ADC , kde vytvo\u0159en\u00edm instance s parametrem vstupn\u00edho PINu zjednodu\u0161ujeme celou inicializaci na an = Analog(33) . Z\u00e1kladn\u00ed metodu read() jsme roz\u0161\u00ed\u0159ili o get_adc_aver(num) , kde po\u010d\u00edt\u00e1me pr\u016fm\u011br z num nem\u011b\u0159en\u00fdch hodnot. Zdrojov\u00fd k\u00f3d knihovny: components/analog from time import sleep from components.analog import Analog an2 = Analog(33) while True: data = an2.get_adc_aver(8) print(data) sleep(5) Button Pro z\u00e1kladn\u00ed pr\u00e1ci s tla\u010d\u00edtky. P\u016fvodn\u011b jsme pou\u017e\u00edvali samostatn\u00fd blok s p\u0159eru\u0161en\u00edm, ale knihovna pak byla p\u0159eps\u00e1na tak, \u017ee vyu\u017e\u00edv\u00e1 dekor\u00e1tor @led_button.on_press , kter\u00fdm uvedeme (odekorujeme) vlastn\u00ed funkci on_press_top_button() , kter\u00e1 se vyvol\u00e1 v\u017edy, kdy\u017e se zm\u00e1\u010dkne tla\u010d\u00edtko. Cel\u00e1 funkce pak b\u011b\u017e\u00ed na pozad\u00ed, je neblokuj\u00edc\u00ed, a snadno i spolehliv\u011b se d\u00e1 pou\u017e\u00edt i pro v\u00edce tla\u010d\u00edtek. Zdrojov\u00fd k\u00f3d knihovny: components/button from machine import Pin from components.button import Button boot_pin = Pin(0, Pin.IN) boot_button = Button(boot_pin, release_value=1) @boot_button.on_press def boot_button_on_press(): print('boot_button_on_press') @boot_button.on_long_press def boot_button_on_long_press(): print('boot_button_on_long_press') @boot_button.on_release def boot_button_on_release(): print('boot_button_on_release') Star\u00e1 verze 1.0 m\u011bla v konstruktoru \u010d\u00edslo PINu. Nov\u00e1 verze 2.0 m\u00e1 p\u0159\u00edmo instanci PINu. from time import sleep from machine import Pin from components.button import Button led_button = Button(0, release_value=1) built_in_led = Pin(2, Pin.OUT) built_in_led.on() sleep(1) built_in_led.off() @led_button.on_press def on_press_top_button(): print(\"on_press_top_button\") built_in_led.on() sleep(3) built_in_led.off() \ud83e\udc52 Led | @Dekor\u00e1tor Pr\u00e1ce se \u010dty\u0159mi tla\u010d\u00edtky (na ESP32board) - v uk\u00e1zce je zakomentov\u00e1na spolupr\u00e1ce s displejem tft \ud83e\udc52 st7735 from utils.pinout import set_pinout pinout = set_pinout() from components.button import Button from utils.transform import Point2D print(\"buttons init>\") button_dwn = Button(34, release_value=1) button_top = Button(36, release_value=1) button_lef = Button(35, release_value=1) button_rig = Button(39, release_value=1) # size = 3 cursor = Point2D(63,81) # center TFT128*166 dispaly (mod 3) def position(dx,dy): global mx # cursor, fb, tft cursor.x = cursor.x + dx*3 cursor.y = cursor.y + dy*3 print(cursor.x,cursor.y) # fb.fill(color565(*BLACK)) # tft.blit_buffer(fb, 0, 0, tft.width, tft.height) # tft.fill_rectangle(cursor.x,cursor.y, 6, 6, color565(*RED)) @button_dwn.on_press def on_press_dwn(): print(\"down\") position(0,1) @button_top.on_press def on_press_top(): print(\"top\") position(0,-1) @button_lef.on_press def on_press_lef(): print(\"left\") position(-1,0) @button_rig.on_press def on_press_rig(): print(\"right\") position(1,0) Display7 Osm sedmisegmentovek s obvodem MAX na sb\u011brnici SPI je do za\u010d\u00e1tku ide\u00e1ln\u00ed displej pro z\u00e1klady pr\u00e1ce s mikrokontrol\u00e9rem. M\u00e1 \"retro\" sedm segment\u016f pro zobrazen\u00ed \u010d\u00edsel - proto disp7 . Obdobn\u00fd modul se shodn\u00fdm ovlada\u010dem je matice 8x8 sv\u00edtiv\u00fdch diod, ten jsme pojmenovali disp8 . Zdrojov\u00fd k\u00f3d components/display7 P\u0159ed inicializac\u00ed se mus\u00ed nejd\u0159\u00edve p\u0159ipojit SPI . V n\u00e1sleduj\u00edc\u00ed uk\u00e1zce je \"dvojit\u011b\" zakomentovan\u00e1 ## obecn\u011bj\u0161\u00ed metoda a pou\u017eit\u00e1 je spi_init() z knihovny octopus_lib . from machine import Pin, SPI from components.display7 import Display7 ## from utils.pinout import set_pinout from utils.octopus_lib import spi_init print(\"this is simple Micropython example | octopusLAB & ESP32\") print(\"--- spi-init ---\") ## pinout = set_pinout() ## spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) spi = spi_init() ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) #spi.deinit() #print(\"spi > close\") print(\"--- display7-init ---\") d7 = Display7(spi, ss) # 8 x 7segment display init d7.write_to_buffer('octopus') d7.display() Nejkrat\u0161\u00ed variantou je octopus framework verze, kde je ale nutno m\u00edt p\u0159es setup() a ds nastavenu desku (n\u011bj\u010dast\u011bji ROBOTboard nebo ESP32board) a d\u00e1le pomoc\u00ed ios nastaveno disp7 (4 | 1) from time import sleep from utils.octopus import disp7_init print(\"this is simple Micropython example | ESP32 & octopusLAB\") print() d7 = disp7_init() # 8 x 7segment display init for i in range(999): d7.show(1000-i) sleep(1) Oled Obl\u00edbili jsme si tak\u00e9 mal\u00fd 128x64px monochromatick\u00fd OLED displej. Jeho p\u0159\u00edm\u00e9 pou\u017e\u00edt\u00ed vy\u017eaduje u\u017e i inicializaci I2C a dal\u0161\u00ed drobnosti, proto jsme v\u011bt\u0161inou vyu\u017e\u00edvali knihovny octopus. Ale uk\u00e1zalo se, \u017ee pro vlastn\u00ed projekty je lep\u0161\u00ed um\u011bt spou\u0161t\u011bt displej i \"samostatn\u011b\", co\u017e je v uk\u00e1zce: examples/test_oled.py Zjednodu\u0161en\u00e9 ovl\u00e1d\u00e1n\u00ed je pak tradi\u010dn\u011b: from utils.octopus import oled_init oled = oled_init() ... Z\u00e1klad ale vych\u00e1z\u00ed z knihovny ssd1306 , kter\u00e1 je u\u017e sou\u010d\u00e1st\u00ed Micropythonu: def oled_init(): from utils.pinout import set_pinout from machine import Pin, I2C import ssd1306 # pinout = set_pinout() # i2c = I2C(0, scl=Pin(pinout.I2C_SCL_PIN), sda=Pin(pinout.I2C_SDA_PIN), freq=100000) from utils.octopus_lib import i2c_init i2c = i2c_init() oled = ssd1306.SSD1306_I2C(128, 64, i2c, 0x3c) return oled oled = oled_init() oled.text(\"octopusLAB\", 0, 0) oled.show() oled.draw_image() # default /assets/octopus_image.pbm oled.invert(0) ... >>> from assets.icons9x9 import ICON_clr, ICON_heart >>> oled.draw_icon(ICON_heart,115,15) >>> def heartBeat() ... oled.draw_icon(ICON_heart,115,15) ... sleep(1) ... oled.draw_icon(ICON_clr,115,15) ... sleep(1) ... Buzzer Pasivn\u00ed piezo \"p\u00edp\u00e1k\" slou\u017e\u00ed pro akustick\u00e1 upozorn\u011bn\u00ed, ale um\u00ed p\u0159ehr\u00e1t i velmi jednoduch\u00e9 \"retro\" melodie. Zdrojov\u00fd k\u00f3d knihovny: components/buzzer Z\u00e1klad pr\u00e1ce: from components.buzzer import Buzzer piezzo = Buzzer(33) piezzo.beep() Dopl\u0148uj\u00edc\u00ed t\u0159\u00edda melody jako p\u0159id\u00e1n\u00ed dal\u0161\u00ed \u010d\u00e1sti k\u00f3du: from components.buzzer.melody import jingle1 piezzo.play_melody(jingle1) Servo Modul pro pr\u00e1ci se servem, op\u011bt vytvo\u0159en\u00edm instance na dan\u00e9m PINu (mus\u00ed b\u00fdt PWM). Hlavn\u00ed metodou je pak pooto\u010den\u00ed na dan\u00fd \u00fahel: set_degree() . Zdrojov\u00fd k\u00f3d knihovny: components/servo from time import sleep from utils.pinout import set_pinout from components.servo import Servo pinout = set_pinout() # s1 = Servo(pinout.PWM1_PIN) # s2 = Servo(pinout.PWM2_PIN) s3 = Servo(pinout.PWM3_PIN) angles = [0, 20, 50, 70, 90] while True: for a in angles: s3.set_degree(a) sleep(1) pca9685 Element\u00e1rn\u00ed z\u00e1klad pr\u00e1ce s v\u00edce servy pomoc\u00ed I2C expand\u00e9ru pca9685: from pca9685.servo import Servos from utils.octopus_lib import i2c_init from time import sleep_ms from utils.transform import * # include all - only for example # blocking - simple test def sweep(s, start, stop, delay=5, step=1): ang = start servo.position(s, ang) sleep_ms(delay) if start < stop: print(\"a\") while ang < stop: ang = ang + step servo.position(s, ang) sleep_ms(delay) if start > stop: print(\"b\") while ang > stop: ang = ang - step servo.position(s, ang) sleep_ms(delay) i2c = i2c_init(1) servo = Servos(i2c) def sweeptest(): sweep(0,30,160) sweep(1,30,180) sweep(0,160,30) sweep(1,180,30) sweeptest() Zdrojov\u00fd k\u00f3d uk\u00e1zky: https://github.com/octopusengine/octopuslab/blob/master/esp32-micropython/examples/pca9685.py Pro tranformace a kompletn\u011bj\u0161\u00ed pr\u00e1ci s v\u00edce servy vyv\u00edj\u00edme knihovnu transform : https://github.com/octopusengine/octopuslab/blob/master/esp32-micropython/utils/transform.py \ud83e\udc52 pinout DCmotors Zdrojov\u00fd k\u00f3d knihovny: components/dcmotors from utils.pinout import set_pinout pinout = set_pinout() from components.dcmotors import Motor, Steering motor_r = Motor(pinout.MOTOR_1A, pinout.MOTOR_2A, pinout.MOTOR_12EN) motor_l = Motor(pinout.MOTOR_3A, pinout.MOTOR_4A, pinout.MOTOR_34EN) steering = Steering(motor_l, motor_r) speed = 800 steering.center(0) steering.center(-speed) steering.right(speed) steering.left(speed) IoT T\u0159\u00edda, kter\u00e1 p\u016fvodn\u011b slou\u017eila jako modul pro IoTboard, ale samostatn\u00e1 zahrnuje rel\u00e9 a PWM MOS-FET \u0159\u00edzen\u00ed. Zdrojov\u00fd k\u00f3d knihovny: components/iot Uk\u00e1zka: from components.iot import Relay re1 = Relay() # default IoTboard pin re1.value(1) re2 = Relay(26) from components.iot import Pwm pwm_led = Pwm(33) pwm_led.duty(300) from components.iot import Thermometer tt = Thermometer(32) # DEV1 pin (ROBOTboard) tx = tt.ds.scan() # get list of all Dallas sensors tt.get_temp() # default index 0 -> first sensor tt.get_temp(0) # first sensor explicitly OCTOPUS Utils WiFiConnect Hlavn\u00ed v\u00fdhodou na\u0161eho roz\u0161\u00ed\u0159en\u00ed pro p\u0159ipojen\u00ed k WiFi je pou\u017e\u00edv\u00e1n\u00ed ulo\u017een\u00e9ho nastaven\u00ed (v config/wifi.json ). Nastaven\u00ed WiFi se prov\u00e1d\u00ed pomoc\u00ed setup() from utils.wifi_connect import WiFiConnect net = WiFiConnect() net.connect() if not net.isconnected() # hard reconect net.sta_if.disconnect() net.connect() V p\u0159\u00edpad\u011b \"z\u00e1va\u017en\u011bj\u0161\u00edho probl\u00e9mu\" s p\u0159ipojen\u00edm n\u011bkdy pom\u016f\u017ee a\u017e \"tvrd\u00fd\" reset . # hard reset reset() Vyu\u017eit\u00ed Octopus FrameWork na maximum - k p\u0159ipojen\u00ed k n\u011bkter\u00e9 z ulo\u017een\u00fdch WiFi posta\u010d\u00ed p\u0159\u00edkaz w() : from utils.octopus_lib import w w() Variantn\u011b s dostupn\u00fdmi metodami: wc = w() ip = wc.sta_if.ifconfig()[0] ... wc.isconnected() A opa\u010dn\u00fd extr\u00e9m - klasick\u00e9 p\u0159ipojen\u00ed k s\u00edti s p\u0159ed\u00e1n\u00edm parametr\u016f ssid (n\u00e1zev) a password (heslo): import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') Umo\u017en\u00ed n\u00e1m (od verze v1.16 on 2021-08-09) skenovat celu s\u00ed\u0165: llan = wlan.scan() # list for i in llan: print(i[0],i[2]) Origin\u00e1ln\u00ed dokumentace wlan() Bits Pro pr\u00e1ci s jednotliv\u00fdmi bity . B1 = 0b11111001 . Bitov\u00e9 operace jsme si museli do Pythonu trochu doladit, aby se s nimi pracovalo l\u00e9pe a intuitivn\u011b. Pou\u017e\u00edvan\u00e9 metody: neg(B1) pro negaci - vrac\u00ed 0b00000110 reverse() obr\u00e1cen\u00ed po\u0159ad\u00ed bit\u016f - vrac\u00ed 0b1001111 get_bit(B1,1) pro z\u00edsk\u00e1n\u00ed stavu jednoho bitu > 0 set_bit(B1,1) pro nastaven\u00ed stavu jednoho bitu int2bin() pomocn\u00e1 funkce pro p\u0159evod \u010d\u00edsla na bin\u00e1rn\u00ed Zdrojov\u00fd k\u00f3d knihovny: utils/bits from components.bits import neg B1 = 0b11111001 neg(B1) # > 0b00000110 Transform Pomocn\u00e9 funkce pro mechatroniku, zam\u011b\u0159en\u00e9 na transformace sou\u0159adnicov\u00fdch syst\u00e9m\u016f a z\u00e1klady inversn\u00ed kinematiky. Point2D() class p2 = (x,y) | p2.x, p2.y distance2D(p1, p2, rr = 3) vzd\u00e1lenost dvou bod\u016f v rovin\u011b vyu\u017e\u00edv\u00e1 se round - zaokrouhlen\u00ed na ur\u010dit\u00fd po\u010det m\u00edst: rr = 3 polar2cart(r, alfa, rr = 3) cart2polar(point) def cosangle(opp, adj1, adj2) move_2d_line(p_start, p_stop, steps = 300, max_dist = 100) invkin2_1(point2d, rr = 6) inversn\u00ed kinematika 1 invkin2(point2d, angleMode=DEGREES) Point3D() class p3 = [x,y,z] invkin3(point3d, angleMode=DEGREES) distance3() vzd\u00e1lenost dvou bod\u016f v prostoru ... from utils.transform import Point2D, polar2cart, cosangle p1 = Point2D(1,3) print(p1) # (1,3) print(p1.x) # 1 print(p1.y) # 3 p1.x, p1.y = polar2cart(10, 0) print(p1) ... from utils.transform import move_servo2, cosangle ... def move_servo2(p1, p2, delay = delay): steps = move_2d_line(p1, p2) for step in steps: alfa = cosangle(step[0], dist, dist)[0] beta = cosangle(step[1], dist, dist)[0] print(step, alfa, beta) s1.set_degree(alfa) s2.set_degree(beta) sleep_ms(delay) p1 = 0, 0 # strart point p2 = 50, 50 # stop point move_servo2(p1, p2) V\u00edce pl\u00e1nujeme v samostatn\u00e9 sekci inversn\u00ed kinematika Database ESP d\u00edky pam\u011bti umo\u017e\u0148uje bez nads\u00e1zky i z\u00e1kladn\u00ed pr\u00e1ci s datab\u00e1z\u00ed. Zam\u011b\u0159\u00edme se na dv\u011b z\u00e1kladn\u00ed: lok\u00e1ln\u00ed btree a vzd\u00e1len\u00e9 MySQL , InfluxDB . from utils.database.btreedb import BTreeDB db = BTreeDB(\"test\") db.addOne(\"one\",\"1\") db.listAll() Zv\u00eddav\u011bj\u0161\u00edm doporu\u010dujeme odkaz na pr\u00e1ci s daty a datab\u00e1ze \ud83e\udc52 Workshop Python DATA MQTT MQTT - jako pub-sub MQTT broker - na RPi orchestr\u00e1tor NodeJS vyu\u017eit\u00ed v IoT InfluxDB Pro zobrazov\u00e1n\u00ed dat v Grafan\u011b pr\u016fb\u011b\u017en\u011b pos\u00edl\u00e1me \u00fadaje na vzd\u00e1len\u00fd server, kter\u00fd je ukl\u00e1d\u00e1 do datab\u00e1ze InfluxDB . Jednoduch\u00fd p\u0159\u00edklad jednor\u00e1zov\u00e9ho odesl\u00e1n\u00ed jedn\u00e9 hodnoty ( timestamp - datum a \u010das se p\u0159idaj\u00ed p\u0159i ukl\u00e1d\u00e1n\u00ed automaticky): from utils.database.influxdb import InfluxDB influx = InfluxDB(\"https://your.server.com/grafana/influx/user...\", \"user_db\", \"i_usr\", \"i_psw\", \"i_measurement\") value = 25.6 # zde je treba cist hodnotu z nejakeho senzoru, napr. teplomeru influx.write(temperature=value) ... Metoda write mus\u00ed dostat pojmenovan\u00e9 parametry (key word arguments - tzv. kwargs), kter\u00e9 se v Influxu pou\u017eij\u00ed, jako jednotliv\u00e9 fieldy. V p\u0159\u00edkladu naho\u0159e je to temperature , kam ukl\u00e1d\u00e1me hodnotu ze sensoru. Funk\u010dn\u00ed uk\u00e1zka nap\u0159: examples/influxdb_disp7_therm.py Abychom mohli pou\u017e\u00edt identick\u00fd program s minimem zm\u011bn, vyu\u017eijeme konfigura\u010dn\u00ed soubor, na\u010dteme pomoc\u00ed fromconfig() . A tak\u00e9 nechceme m\u00edt p\u0159\u00edstupov\u00e9 \u00fadaje ve zdrojov\u00e9m k\u00f3du ! from utils.database.influxdb import InfluxDB influx = InfluxDB.fromconfig() temp = ... influx.write(temperature=temp) fromconfig() bere voliteln\u011b jako prvn\u00ed parametr, n\u00e1zev konfigura\u010dn\u00edho souboru, default je \"influxdb\" , tedy soubor config/influxdb.json . P\u0159\u00edklad obsahu je: {\"influxdb_url\": \"https://parallelgarden.surikata.info:8086\", \"influxdb_pass\": \"heslo\", \"influxdb_name\": \"nazev_db\", \"influxdb_user\": \"uzivatel\", \"influxdb_measurement\": \"meteo\", \"influxdb_tags\": {\"location\": \"balkon\"}} V\u00edce o vytv\u00e1\u0159en\u00ed a editaci konfigura\u010dn\u00edch soubor\u016f \ud83e\udc52 Config OCTOPUS Lib LCD Knihovna t\u0159et\u00ed strany pro ovl\u00e1d\u00e1n\u00ed dvou nebo \u010dty\u0159-\u0159\u00e1dkov\u00e9ho LCD displeje p\u0159ipojen\u00e9ho k i2c expand\u00e9ru, byla p\u016fvodn\u011b ur\u010dena pro star\u0161\u00ed ESP8266, ale funguje n\u00e1m bez \u00faprav i pro ESP32 (proto\u017ee komunika\u010dn\u00ed protokol na i2c se nem\u011bn\u00ed). Z\u00e1kladem v nastaven\u00ed je: po\u010det \u0159\u00e1dk\u016f rows - \u00bd/4, a po\u010det \"sloupc\u016f\" col odpov\u00edd\u00e1 po\u010dtu znak\u016f na \u0159\u00e1dku. Uk\u00e1zka pro displej 2x16 - s hlavn\u00ed metodou putstr(STRING) . # from machine import I2C , Pin # i = I2C(scl=Pin(22), sda=Pin(21), freq=100000) from utils.octopus_lib import i2c_init i2c = i2c_init() # i2c.scan() # > [39] from lib.esp8266_i2c_lcd import I2cLcd lcd = I2cLcd(i2c, 39, 2, 16) # addr, rows, col lcd.putstr(\"octopusLab\") # write text ... Pomoc\u00ed speci\u00e1ln\u00edch znak\u016f (u\u017e implementovan\u00fdch) lze vykreslit nap\u0159\u00edklad stupn\u011b Celsia (pro zobrazov\u00e1n\u00ed teploty): lcd.putstr(chr(223)) Nastaven\u00ed kurzoru move_to() a uk\u00e1zka zobrazen\u00ed hodin s blikaj\u00edc\u00ed dvojte\u010dku: def clock(): lcd.move_to(5,1) lcd.putstr(get_hhmm(\":\")) sleep(0.5) lcd.move_to(5,1) lcd.putstr(get_hhmm(\" \")) sleep(1) V na\u0161em podadres\u00e1\u0159i /assets m\u00e1me v souboru lcd_chars.py tabulky n\u011bkter\u00fdch \"nov\u011b definovan\u00fdch\" znak\u016f pro LCD: import assets.lcd_chars as ch from utils.octopus import lcd2_init lcd = lcd2_init() lcd.custom_char(0, ch.happy) lcd.putchar(chr(0)) lcd.custom_char(1, ch.clock) lcd.putchar(chr(1)) ... ST7735 Barevn\u00fd displej TFT 128x160, kter\u00fd ale vy\u017eaduje p\u0159i pr\u00e1ci s Micropythonem v\u011bt\u0161\u00ed pam\u011b\u0165. Doporu\u010den\u00e9 p\u0159ipojen\u00ed k ESP32board : Display | ESP32board ------------------------ 1-RST | PWM2 (16) 2-CS | SCE0 (5) 3-D/C | PWM1 (17) 4-DIN | SPI_MOSI (23) 5-CLK | SPI_CLK (18) 6-UCC | 5V 7-BL | 3V3 8-GND | GND Nov\u00e1 verze from ST7735 import TFT, TFTColor from sysfont import sysfont from machine import SPI, Pin from time import sleep_ms, ticks_ms from math import pi from utils.octopus_lib import w # need connection for FTP SPI_SCLK = 18 SPI_MISO = 19 SPI_MOSI = 23 DC = 17 # PWM1 RST = 16 # PWM2 CS = 5 # SCE0 print(\"--- TFT 128x160px test ---\") spi = SPI(2, baudrate=20000000, polarity=0, phase=0, sck=Pin(SPI_SCLK), mosi=Pin(SPI_MOSI), miso=Pin(SPI_MISO)) tft=TFT(spi, DC, RST, CS) tft.initr() tft.rgb(True) tft.fill(TFT.BLACK) v = 30 tft.text((0, v), \"octopus LAB (1)\", TFT.RED, sysfont, 1, nowrap=True) v += sysfont[\"Height\"] tft.fill(TFT.BLACK) tft.rotation(1) tft.text((0, 0), \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. \", TFT.WHITE, sysfont, 1) sleep_ms(2000) ... P\u016fvodn\u00ed star\u0161\u00ed verze from machine import Pin, SPI, SDCard from time import sleep, sleep_ms from utils.pinout import set_pinout pinout = set_pinout() import framebuf from lib import st7735 from lib.rgb import color565 print(\"spi.TFT 128x160 init >\") spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) rst = Pin(16, Pin.OUT) #PWM2 (16) / DEv3(27) cs = Pin(5, Pin.OUT) #SCE0 (5) dc = Pin(26, Pin.OUT) #PWM1 (17) / IO26 tft = st7735.ST7735R(spi, cs = cs, dc = dc, rst = rst) print(\"spi.TFT framebufer >\") fb = framebuf.FrameBuffer(bytearray(tft.width*tft.height*2), tft.width, tft.height, framebuf.RGB565) fbp = fb.pixel fb.line(128,0,0,166,color565(0,255,0)) tft.blit_buffer(fb, 0, 0, tft.width, tft.height) ... \ud83e\udc52 pinout examples/test_tft128x160.py hcsr04 Ultrazvukov\u00fd m\u011b\u0159i\u010d vzd\u00e1lenosti. from time import sleep from util.pinout import set_pinout pinout = set_pinout() from hcsr04 import HCSR04 print(\"ulrasonic distance sensor\") echo = HCSR04(trigger_pin=pinout.PWM2_PIN, echo_pin=pinout.PWM1_PIN) while True: echo_cm = echo.distance_cm() print(echo_cm) sleep(1) \ud83e\udc52 pinout examples/ultrasonic.py pubsub N\u00e1stroj pro p\u0159ed\u00e1v\u00e1n\u00ed hodnot mezi nez\u00e1visl\u00fdmi komponenty v r\u00e1mci projektu a to i v samostatn\u011b b\u011b\u017e\u00edc\u00edch vl\u00e1knech. Pracuje na principu publish and subscribe . Fork z basecue/micropython-pubsub . Zdrojov\u00fd k\u00f3d knihovny: ./lib/pubsub.py Z\u00e1klad pr\u00e1ce: jedno vl\u00e1kno (nebo \u010d\u00e1st programu) publikuje z\u00edskan\u00e9 hodnoty metodou publish kde parametrem je topic a hodnota value . Nap\u0159\u00edklad pubsub.publish('topic', value) . (value m\u016f\u017ee b\u00fdt libovoln\u00fd objekt). V jednoduch\u00e9 uk\u00e1zce jednou za vte\u0159inu generujeme n\u00e1hodn\u00e1 \u010d\u00edsla, kter\u00e1 \"publikujeme\". (pozor, pou\u017e\u00edv\u00e1me while True: - je to blokuj\u00edc\u00ed, lep\u0161\u00ed je pou\u017e\u00edt timer ) from time import sleep from os import urandom import pubsub print(\"start: ps_random.py\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1) Protistrana je odeb\u00edr\u00e1 / naslouch\u00e1. A m\u016f\u017ee je t\u0159eba zobrazovat na displeji: import pubsub from utils.octopus import disp7_init d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) \ud83e\udc52 Disp7 Uk\u00e1zky jsou z vybran\u00fdch p\u0159\u00edklad\u016f pro pubsub: examples/pubsub BLE Jeliko\u017e obecn\u00e1 problematika BLE (Bluetooth low energy) je pom\u011brn\u011b obs\u00e1hl\u00e1, tak i modul BLE je dost robustn\u00ed. Zahrnuje n\u011bkolik \u010d\u00e1st\u00ed: blesync , blesync_client , blesync_server a samostatn\u00fd modul blesync_uart . Ka\u017edop\u00e1dn\u011b funguje velmi dob\u0159e a snahou bylo, aby pr\u00e1ce s n\u00edm byla srozumiteln\u00e1 a p\u0159itom umo\u017enila vyu\u017e\u00edt v\u0161echny mo\u017en\u00e9 v\u00fdhody, kter\u00e9 BLE obecn\u011b p\u0159in\u00e1\u0161\u00ed. Projekt m\u00e1 sv\u016fj vlastn\u00ed repozit\u00e1\u0159: /blesync . N\u00e1sleduj\u00edc\u00ed p\u0159\u00edklad umo\u017en\u00ed z mobiln\u00ed aplikace nal\u00e9zt ESP za\u0159\u00edzen\u00ed jako octopus-led-UID , kde UID je \u010d\u00e1s unik\u00e1tn\u00edho ID, kter\u00e9 m\u00e1 ka\u017ed\u00e9 ESP. Pomoc\u00ed mobiln\u00ed aplikace \u0161ipkami nahoru (Up) a dol\u016f (DOWN) pak ovl\u00e1d\u00e1me vestav\u011bnou Led diodu. import blesync_server import blesync_uart.server import utils.ble.bluefruit as bf from shell.terminal import getUid uID5 = getUid(short=5) from time import sleep from components.led import Led led = Led(2) @blesync_uart.server.UARTService.on_message def on_message(service, conn_handle, message): if message == bf.UP: led.value(1) if message == bf.DOWN: led.value(0) if message == bf.RIGHT: led.toggle() service.send(conn_handle, message) _connections = [] devName = 'octopus-led-'+uID5 print(\"BLE ESP32 device name: \" + devName) server = blesync_server.Server(devName, blesync_uart.server.UARTService) server.start() Mobiln\u00ed aplikace pro BLE Pou\u017e\u00edv\u00e1me Bluefruit connect od spole\u010dnosti Adafruit. Jeden z odkaz\u016f na play.google.com/store/apps Vytvo\u0159ili jsme si pomocnou knihovnu pro \"p\u0159ekl\u00e1d\u00e1n\u00ed\" jimi definovan\u00fdch k\u00f3d\u016f, kter\u00e1 je zat\u00edm zde ./utils/ble/blefruit.py : UP = b'!B516' DOWN = b'!B615' LEFT = b'!B714' RIGHT = b'!B813' ... S touto knihovnou pak pracujeme takto: import utils.ble.bluefruit as bf ... if message == bf.UP: led.value(1) if message == bf.DOWN: led.value(0) Ostatn\u00ed podp\u016frn\u00e9 moduly Config Micropython m\u00e1 elegantn\u011b propacovanou pr\u00e1ci se soubory (nahr\u00e1v\u00e1n\u00ed a \u010dten\u00ed) a i s json form\u00e1tem, proto jsme toho vyu\u017eili pro extern\u00ed konfigura\u010dn\u00ed soubory. V adres\u00e1\u0159i /config jsou nahr\u00e1ny jednotliv\u00e9 \"jsony\", kter\u00e9 v sob\u011b obsahuj\u00ed n\u011bjak\u00e9 konstanty, nastaven\u00ed a podobn\u011b. Proto m\u016f\u017eeme dan\u00fd projekt dynamicky konfigurovat. Vyu\u017e\u00edv\u00e1me to i v nastaven\u00ed PIN\u016f jednotiv\u00fdch za\u0159\u00edzen\u00ed device.json nebo pro ulo\u017een\u00ed p\u0159\u00edstup\u016f k WiFi wifi.json . Zdrojov\u00fd k\u00f3d knihovny: ./config/ init .py Jednotliv\u00e9 metody pro z\u00e1kladn\u00ed varianty pou\u017e\u00edv\u00e1n\u00ed: 1) Vytvo\u0159en\u00edm pomoc\u00ed konstruktoru: myConfig = Config(\"myConfigFile\",keys) Vy\u017eaduje p\u0159edefinici kl\u00ed\u010dov\u00fdch \"metrik\": keys = [\"tempMax\",\"tempMin\"] setup() print() # for keys M\u011bjme uk\u00e1zkov\u00fd projekt termostat , kter\u00fd na z\u00e1klad\u011b zm\u011b\u0159en\u00e9 teploty pust\u00ed bu\u010f topen\u00ed, nebo chlazen\u00ed (ventil\u00e1tor). Voliteln\u011b si m\u016f\u017eeme v programu definovat keys , kde m\u00e1me ulo\u017eeny n\u00e1zvy podstatn\u00fdch konstant. Instanci pak vytv\u00e1\u0159\u00edme conf = Config(\"your_file\", keys) , kde \"your_file\" je n\u00e1zev - nej\u010dast\u011bji shodn\u00fd s n\u00e1zvem projektu. Nap\u0159\u00edklad \"termostat\". Se souborem se pak d\u00e1 pracovat n\u011bkolika metodami, nap\u0159\u00edklad: setup() (interaktivn\u00ed m\u00f3d - pou\u017e\u00edv\u00e1me nej\u010dast\u011bji), create_from_query() , set() , save() ... >>> from config import Config >>> keys = [\"tempMax\",\"tempMin\"] >>> conf = Config(\"termostat\", keys) # > config/termostat.json >>> conf.setup() ================================================== S E T U P - config/termostat.json ================================================== [ 1] - tempMax - [ 2] - tempMin - [q] - Quit from json setup ================================================== select: Vid\u00edme, \u017ee nastaven\u00ed config je snadn\u00e9. Sta\u010d\u00ed vyplnit nebo modifikovat interaktivn\u00ed tabulku. 2) Vytvo\u0159en\u00edm pomoc\u00ed konstruktoru bez keys : myConfig = Config(\"myConfigFile\") print_all() get(\"key\") set(\"key\",value) create_from_query(\"a=1&b=2\") # key1 = \"a\", value1 = 1 ... save() # vytvo\u0159en\u00ed konfigu: a = 1, b = 2 >>> conf = Config(\"your_config\") >>> conf.create_from_query(\"a=1&b=2\") {'a': '1', 'b': '2'} >>> conf.set(\"c\",3) >>> conf.save() Writing new config item to file config/your_config.json >>> conf.print_all() ----------------------------------------- a - 1 c - 3 b - 2 ----------------------------------------- >>> Ve sv\u00e9m programu pak config pou\u017eijeme n\u00e1sledovn\u011b: from config import Config conf = Config(\"your_config\") a = conf.get(\"a\") # 1 b = conf.get(\"b\") # 2 Pro lep\u0161\u00ed pochopen\u00ed datov\u00fdch struktur nastudujte \ud83e\udc52 /ws-python-data octopus_lib I2C i2c_init() >>> from utils.octopus_lib import i2c_init >>> i2c = i2c_init() >>> i2c.scan() # I2C address: OLED_ADDR = 0x3c LCD_ADDR = 0x27 bhLight = 0x23 bh2Light = 0x5c tslLight = 0x39 # PCF8574 PCF8574A # AAA - hex (dec) # 210 # 000 - 0x20 (32) 0x38 (56) # 001 - 0x21 (33) * 0x39 (57) # 010 - 0x22 (34) 0x3A (58) # 011 - 0x23 (35) * 0x3B (59) # 100 - 0x24 (36) 0x3C (60) # 101 - 0x25 (37) 0x3D (61) # 110 - 0x26 (38) 0x3E (62) # 111 - 0x27 (39) 0x3F (63) # * ROBOTboard # n\u011bkter\u00e9 dal\u0161\u00ed z\u00e1kladn\u00ed metody ADDR = 42 i2c.writeto(ADDR, b'123') # write 3 bytes to slave with 7-bit address 42 i2c.readfrom(ADDR, 8) # read 8 bytes from slave with 7-bit address 42 i2c.readfrom_mem(ADDR, 8, 3) # ... Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k I2C \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.I2C.html SPI spi_init() from machine import Pin, SPI from components.display7 import Display7 ## from utils.pinout import set_pinout from utils.octopus_lib import spi_init print(\"--- spi-init ---\") ## spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) spi = spi_init() ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) #spi.deinit() #print(\"spi > close\") ... # n\u011bkter\u00e9 dal\u0161\u00ed z\u00e1kladn\u00ed metody SPI.deinit() SPI.read(nbytes, write=0) SPI.readinto(buf, write=0) SPI.write(buf) SPI.write_readinto(write_buf, read_buf) ... Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k SPI \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.SPI.html RTC Modul re\u00e1ln\u00e9ho \u010dasu m\u00e1 Micropython v posledn\u00ed verzi dopln\u011bn i o ntp modulem ntptime . Co se skr\u00fdv\u00e1 v \ud83e\udc52 ntptime ? P\u0159edev\u0161\u00edm metoda settime() , pomoc\u00ed kter\u00e9 z\u00edsk\u00e1me p\u0159esn\u00fd \u010das ze serveru pool.ntp.org . from ntptime import settime from machine import RTC from utils.octopus_lib import w, get_hhmm, setlocal rtc = RTC() w() # p\u0159ipojen\u00ed k internetu settime() print(get_hhmm(rtc)) # + 2 h. setlocal(2) print(get_hhmm(rtc)) Zdroj uk\u00e1zky \ud83e\udc52 test_rtc_ntp.py Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k RTC \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.RTC.html pinout Pr\u00e1ci s PINy ( \"no\u017ei\u010dky\" kontroleru ) n\u00e1m uleh\u010duje p\u0159ednastanen\u00fd pinout , kter\u00fd je ulo\u017een\u00fd v konfigura\u010dn\u00edm souboru. Konfigura\u010dn\u00ed soubory pro jednotliv\u00e9 hw moduly jsou v samostatn\u00e9m adres\u00e1\u0159i /pinouts . Podle toho, jakou m\u00e1me HW platformu, m\u00e1me p\u0159esn\u011b sv\u00e1z\u00e1ny konstanty (\u010d\u00edsla PIN\u016f) s jejich n\u00e1zvy. Vybran\u00e9 soubory zapojen\u00ed pin\u016f jsou na samostatn\u00e9 str\u00e1nce \ud83e\udc52 pinouts . Zdrojov\u00fd k\u00f3d knihovny: \ud83e\udc52 utils/pinout Princip je jednoduch\u00fd: m\u00e1me definov\u00e1ny \u010d\u00edseln\u00e9 konstanty (v programu se nem\u011bn\u00edc\u00ed \u010d\u00edsla), nap\u0159\u00edklad pro vestav\u011bnou Led diodu: BUILT_IN_LED = const(\u010d\u00edslo) . \u010c\u00edslo je zde \u010d\u00edslo PINu a m\u016f\u017ee se li\u0161it podle dan\u00e9 desky (deska je nastavena p\u0159\u00edkazem >>> setup() ). Tato konstanta je ulo\u017eena v souborech pinouts/file_name . Pro ROBOTboart je to 2 , tak\u017ee v souboru pro definici pin\u016f najdete \u0159\u00e1dek BUILT_IN_LED = const(2) . V\u00fdchoz\u00ed spole\u010dn\u00e9 piny jsou v /pinouts/olab_esp32_base.py a ROBOTboard je p\u0159eb\u00edr\u00e1. Jak se s modulem pinout pracuje? M\u016f\u017eete si zkusit z termin\u00e1lu Micropythonu: >>> >>> from utils.pinout import set_pinout >>> pinout = set_pinout() A u\u017e m\u00e1me dostupn\u00e9 piny na pinout.NAZEV_PINU , daj\u00ed se zjistit i osatn\u00ed PINy, po pinout te\u010dka TAB : >>> pinout. __class__ __name__ const __file__ WS_LED_PIN ONE_WIRE_PIN PIEZZO_PIN MOTOR_12EN MOTOR_34EN MOTOR_1A MOTOR_2A MOTOR_3A MOTOR_4A ANALOG_PIN PWM1_PIN PWM2_PIN PWM3_PIN SERVO_MIN SERVO_MAX I39_PIN DEV1_PIN DEV2_PIN BUILT_IN_LED HALL_SENSOR I2C_SCL_PIN I2C_SDA_PIN SPI_CLK_PIN SPI_MISO_PIN SPI_MOSI_PIN SPI_CS0_PIN RXD0 TXD0 BUTT1_PIN BUTT2_PIN BUTT3_PIN DEV3_PIN ... >>> pinout.BUILT_IN_LED 2 Vid\u00edme, \u017ee pro BUILT_IN_LED n\u00e1m \"dohled\u00e1\" \u010d\u00edslo deklarovan\u00e9 2 , tak\u017ee se to d\u00e1 pou\u017e\u00edt: led = Led(pinout.BUILT_IN_LED) # BUILT_IN_LED = 2 je shodn\u00e9 s: led = Led(2) ale \u010d\u00edslo 2 si nemus\u00edme pamatovat, nav\u00edc u r\u016fzn\u00fdch modul\u016f se m\u016f\u017ee li\u0161it. Cel\u00e1 uk\u00e1zka pro blik\u00e1n\u00ed vestav\u011bn\u00e9 Ledky na r\u016fzn\u00fdch modulech - m\u016f\u017ee b\u00fdt na PINu 2 nebo tak\u00e9 na 15 ... nebo \u00fapln\u011b jin\u00e9m. A my toto \u010d\u00edslo p\u0159i spr\u00e1vn\u00e9 konfiguraci modulu (desky) nemus\u00edme \u0159e\u0161it a k vestav\u011bn\u00e9 Ledce p\u0159istupujeme n\u00e1zvem PINu: BUILT_IN_LED . from components.led import Led from utils.pinout import set_pinout # import library pinout = set_pinout() # set board pinout led = Led(pinout.BUILT_IN_LED) # start main loop while True: led.blink() \ud83e\udc52 Led Dekor\u00e1tor Mo\u017en\u00e1 jste si v n\u011bkter\u00fdch na\u0161ich uk\u00e1zk\u00e1ch v\u0161imnuli speci\u00e1ln\u00edho pou\u017eit\u00ed @ p\u0159ed definic\u00ed funkce, nap\u0159\u00edklad v \ud83e\udc52 pubsub @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) nebo v \ud83e\udc52 button @led_button.on_press def on_press_top_button(): print(\"on_press_top_button\") built_in_led.on() Dekor\u00e1tor v Pythonu je funkce , kter\u00e1 dostane jeden argument (funkci) a vr\u00e1t\u00ed jednu hodnotu - op\u011bt funkci, kter\u00e1 je modifikovanou verz\u00ed funkce p\u016fvodn\u00ed. P\u016fvodn\u00ed funkce ja takzvan\u011b \"odekorovan\u00e1\". Pou\u017eit\u00ed dekor\u00e1tor\u016f velmi zjednodu\u0161\u00ed a zp\u0159ehlen\u00ed v\u00e1\u0161 k\u00f3d. Pou\u017e\u00edv\u00e1 se na registraci, modifikaci a podobn\u011b. @dekorator def funkce(): pass # je stejn\u00e9 jako: def funkce(): pass funkce = dekorator(funkce) Speci\u00e1ln\u00ed @octopus_debug dekor\u00e1tor \ud83e\udc52 /octopus_decor.py vrac\u00ed nap\u0159\u00edklad \u010das, kter\u00fd trvalo proveden\u00ed \"odekorovan\u00e9\" funkce. @octopus_debug def yourFunc(): ... Zrychlen\u00ed pr\u00e1ce procesoru Zkou\u0161\u00edme dekor\u00e1tory @micropython.native nebo @micropython.viper - podrobn\u011bji pops\u00e1no p\u0159\u00edmo na str\u00e1nk\u00e1ch \ud83e\udc52 micropython/reference/..speed_python Jak se d\u00e1 rychlost testovat (je pou\u017eit dal\u0161\u00ed dekor\u00e1tor @octopus_debug - ten vrac\u00ed \u010das b\u011bhu funkce): from utils.octopus_decor import octopus_debug @octopus_debug def test1(): for i in range(10000000): xx=i @octopus_debug @micropython.native def test2_native(): for i in range(10000000): xx=i @octopus_debug @micropython.viper def test3_viper(): for i in range(10000000): xx=i >>> test1() === function name: test1 === duration (sec.) ---> 41 ... >>> test2_native() === function name: test2 === duration (sec.) ---> 6 ... test3_viper() Web server - IDE - jednoduch\u00e9 ovl\u00e1d\u00e1n\u00ed Jsme vy\u010dlenili samostatn\u011b - zat\u00edm zde: micropython-web-ide Web server ESP32 m\u00e1 dostate\u010dn\u00fd v\u00fdkon, aby na n\u011bm mohl b\u011b\u017eet jednoduch\u00fd webov\u00fd server (server s jednoduch\u00fdmi \"html\" str\u00e1nkami, k kter\u00e9mu se v lok\u00e1ln\u00ed s\u00edti p\u0159ipoj\u00edme p\u0159es IP ESP\u010dka) >>> from utils.octopus_lib import w >>> from utils.octopus import web_server >>> w() >>> web_server()","title":"Referen\u010dn\u00ed p\u0159\u00edru\u010dka"},{"location":"basicdoc/#dokumentace","text":"Toto je hlavn\u00ed \u010d\u00e1st dokumentace, popisuj\u00edc\u00ed co a jak . V dal\u0161\u00edch \u010d\u00e1stech, p\u0159edev\u0161\u00edm pak v odd\u00edle Workshopy / tutori\u00e1ly se pak dozv\u00edte jak na to . Origin\u00e1ln\u00ed dokumentaci k MicroPythonu najdete na str\u00e1nk\u00e1ch \ud83e\udc52 docs.micropython/esp32","title":"Dokumentace"},{"location":"basicdoc/#moduly-tridy-funkce","text":"Z\u00e1klad pro dal\u0161\u00ed pochopen\u00ed (Micro)Pythonu T\u00e9m\u011b\u0159 v\u0161e v Pythonu je objekt. Objekt je kolekce dat (prom\u011bnn\u00fdch) a metod (funkc\u00ed), kter\u00e9 s dan\u00fdmi daty pracuj\u00ed. Prototypem objekt\u016f jsou t\u0159\u00eddy , z nich\u017e jsou v\u0161echny objekty (\u010d\u00edsla, \u0159et\u011bzce, funkce, moduly, metody, atp) odvozeny coby instance . Pokud v\u00e1m to nen\u00ed jasn\u00e9, trochu podrobn\u011bji se o tom rozepisujeme na samostatn\u00e9 str\u00e1nce: class() . Pro spr\u00e1vn\u00e9 pochopen\u00ed a p\u0159edev\u0161\u00edm v kontextu pr\u00e1ce s hardware za\u010d\u00e1te\u010dn\u00edk\u016fm doporu\u010dujeme zm\u00edn\u011bn\u00fd odkaz alespo\u0148 letmo nav\u0161t\u00edvit. Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm HW. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz","title":"Moduly, t\u0159\u00eddy, funkce"},{"location":"basicdoc/#knihovny-components-utils-lib","text":"Jednotliv\u00e9 moduly - knihovny (podprogramy, t\u0159\u00eddy) jsme rozd\u011blili do n\u011bkolika z\u00e1kladn\u00edch adres\u00e1\u0159\u016f: /components , kam postupn\u011b p\u0159id\u00e1v\u00e1me jednotliv\u00e9 \"osamostatn\u011bl\u00e9\" komponenty. /lib , kde jsou p\u0159ev\u00e1\u017en\u011b knihovny t\u0159et\u00edch stran, a mal\u00e9 fragmenty, kter\u00e9 maj\u00ed v\u00fdhodu, \u017ee se p\u0159i importu v adres\u00e1\u0159i lib hledaj\u00ed, Micropython je nalezne bez ud\u00e1n\u00ed cesty k nim. /utils , (utility) moduly octopusLAB, a t\u0159\u00eddy pro pr\u00e1ci s periferiemi. U\u017eivatele vlastn\u011b nemus\u00ed zaj\u00edmat, kde to je ulo\u017eeno, a tak na to d\u016fraz neklademe, jen je vhodn\u00e9 si to pohl\u00eddat p\u0159i sestavov\u00e1n\u00ed v\u011bt\u0161\u00edch projekt\u016f. Zdroje programov\u00e9ho k\u00f3du Github => stable.tar => docs Na\u0161\u00ed snahou je udr\u017eet v souladu zdroj z githubu: github.com/octopusengine/octopuslab , kter\u00fd se po kompilaci a komprimaci stane stable.tar a k n\u011bmu udr\u017eovat aktu\u00e1ln\u00ed dokumentaci .","title":"Knihovny (components | utils | lib)"},{"location":"basicdoc/#adresarova-strukrura-na-esp32","text":"|-- boot.py # inicializace po startu | |-- reset |-- main.py # hlavn\u00ed soubor programu |-- /assets # obr\u00e1zky, zvuky, tabulky |-- /config # kofigura\u010dn\u00ed soubory (.json) |-- /lib # obecn\u011b dostupn\u00e1 knihovna (lib) | |-- pubsub | |-- FTP | |-- /blesync_uart | |-- ... | |-- /bmp280 # i2c Atmospheric pressure sensor | |-- /bh1750 # i2c Light sensor | |-- ST7735.py # TFT128*166 color display | |-- colors_rgb.py | |-- hcsr04.py # ultrasonic | |-- lcd | |-- ... | |-- /components | |-- led | |-- rgb | |-- analog | |-- button | |-- display7 | |-- oled | |-- buzzer | |-- servo | |-- dcmotors | |-- [plc] | |-- iot | | Relay | PWM | Thermometer | |-- /utils | |-- setup | |-- octopus_lib | | I2C | SPI | LCD | RTC | ... | |-- WiFiConnect | |-- pinout | |-- bits | |-- transform | |-- database | |-- mqtt | |-- octopus # WorkFrame with WebServer | |-- ... | |-- BLE | |-- /pinouts # nastaven\u00ed pin\u016f |-- /examples # uk\u00e1zky | |-- /asyncio | |-- /ble | |-- /param | |-- /pubsub | |-- blink.py | |-- ... | |-- /tests | |-- /shell | |-- shell | |-- editor |-- ... Pozor Pokud jste pou\u017e\u00edvali n\u00e1\u0161 syst\u00e9m u\u017e v roce 2019 , p\u0159einstalujte si na novou verzi. Velk\u00e1 \u010d\u00e1st syst\u00e9mu by v\u00e1m u\u017e nefungovala. Od t\u00e9 doby do\u0161lo toti\u017e k \u0159ad\u011b zm\u011bn. P\u0159edev\u0161\u00edm byly t\u0159i z\u00e1sadn\u00ed verze Micropythonu, kde se m\u011bnil i form\u00e1t \"kompilovan\u00fdch\" soubor\u016f .mpy , kter\u00e9 jsou z\u00e1kladem na\u0161\u00ed distribuce. Tak\u00e9 se doplnilo BLE pro pr\u00e1ci s BlueTooth low energy . A dal\u0161\u00ed zm\u011bnou byla velk\u00e1 refaktorizace syst\u00e9mu octopus , kde podardes\u00e1\u0159 util byl rozd\u011blen na utils (pro SW utility a hlavn\u00ed framework) a components (kde jsou p\u0159ev\u00e1\u017en\u011b knihovny pro hw komponenty a periferie.) Tak\u00e9 shell byl p\u0159esunut z util/shell do rootu.","title":"Adres\u00e1\u0159ov\u00e1 strukrura na ESP32"},{"location":"basicdoc/#soubory-bootpy-a-mainpy","text":"","title":"Soubory boot.py a main.py"},{"location":"basicdoc/#bootpy","text":"je soubor, kter\u00fd se spou\u0161t\u00ed jako prvn\u00ed po bezprost\u0159en\u00edm startu nebo po resetu ESP. Zpravidla ho nem\u011bn\u00edme. M\u011bl by obsahovat z\u00e1kladn\u00ed obecnou inicializaci. My tam m\u00e1me p\u0159edev\u0161\u00edm definice cest k modul\u016fm: # boot.py def setup(): import utils.setup utils.setup.setup() def octopus(): import utils.octopus utils.octopus.octopus() return utils.octopus def reset(): from machine import reset reset() def shell(): import shell shell.shell()","title":"\u2022 boot.py"},{"location":"basicdoc/#reset","text":"Pro zjednodu\u0161en\u00e9 pou\u017eit\u00ed resetu pomoc\u00ed p\u0159\u00edkazu reset() je v boot.py p\u0159ednastaveno: def reset(): from machine import reset reset()","title":"Reset"},{"location":"basicdoc/#mainpy","text":"je hlavn\u00ed soubor u\u017eivatelsk\u00e9ho programu, kter\u00fd budeme vyu\u017e\u00edvat pro sv\u00e9 projekty. Spust\u00ed se (pokud existuje) hned po boot.py . \u010casto pou\u017e\u00edv\u00e1me jednoduch\u00e9 kop\u00edrov\u00e1n\u00ed existuj\u00edc\u00edho programu nebo uk\u00e1zky (z examples) v prost\u0159ed\u00ed uPyshell : $ cp examples/blink.py main.py","title":"\u2022 main.py"},{"location":"basicdoc/#octopus-components","text":"","title":"OCTOPUS Components"},{"location":"basicdoc/#led","text":"T\u0159\u00edda Led je vlastn\u011b jen jednoduch\u00fdm roz\u0161\u00ed\u0159en\u00edm t\u0159\u00eddy Pin . Parametr p\u0159i vytv\u00e1\u0159en\u00ed instance je \u010d\u00edslo pinu. led = Led(2) P\u0159idali jsme k z\u00e1kladn\u00ed metod\u011b value() dal\u0161\u00edch n\u011bkolik metod: toggle() , blink() Zdrojov\u00fd k\u00f3d knihovny: ./components/led Nejkrat\u0161\u00ed varianta pou\u017eit\u00ed je sice s vyu\u017e\u00edt\u00edm utils : from utils.octopus import led led.value(1) Ale pro projekt lep\u0161\u00ed verze je s components (\u0161et\u0159\u00ed pam\u011b\u0165, proto\u017ee nana\u010d\u00edt\u00e1 \"cel\u00fd octopus\"): from components.led import Led led = Led(2) while True: led.blink() dir(led) ['class', 'init', 'module', 'qualname', 'value', 'dict', 'pin', 'blink', 'toggle', 'state'] >>> led.pin > Pin(2) >>> led.state > False >>> led.value(1) # sv\u00edt\u00ed >>> led.state # info o stavu 1 . TAB nab\u00eddka metod: Micropython m\u00e1 obrovskou v\u00fdhodu v tom, \u017ee b\u011b\u017e\u00ed jako interpret: kdy\u017e u\u017eivatel nap\u00ed\u0161e n\u00e1zev prom\u011bnn\u00e9 nebo instance objektu, skoro v\u0161echno se o nich m\u016f\u017eeme dozv\u011bd\u011bt. Napi\u0161te led pak . (te\u010dka) a stiskn\u011bte TAB : led. class init module qualname value dict pin blink toggle state note Pro obecn\u011bj\u0161\u00ed pr\u00e1ci s vyu\u017eit\u00edm set_pinout() (p\u0159eddefinovan\u00fdch pin\u016f ) a io_config p\u0159edpokl\u00e1d\u00e1me, \u017ee pro Octopus FrameWork m\u00e1te pomoc\u00ed setup() nastavenu desku ds a perif\u00e9rie ios . \u010c\u00edslo PINu v uk\u00e1zce je 2, to je sv\u00edtiv\u00e1 dioda vestav\u011bn\u00e1 v DoIt modulech i v na\u0161em ESP32boardu. Ale pro pr\u00e1ci s obecn\u00fdm modulem, kde m\u00e1me mo\u017enost si nastavit, kde se Led dioda nach\u00e1z\u00ed, pou\u017eijeme pak variantu z\u00e1kladn\u00ed uk\u00e1zky z examples, kde BUILT_IN_LED je konstanta, ve kter\u00e9 je \u010d\u00edslo PINu ulo\u017eeno: from components.led import Led from utils.pinout import set_pinout pinout = set_pinout() # set board pinout led = Led(pinout.BUILT_IN_LED) # BUILT_IN_LED = 2 print(\"---examples/blink.py---\") # start main loop while True: led.blink() \ud83e\udc52 pinout","title":"Led"},{"location":"basicdoc/#rgb","text":"Knihovna pro plnobarevn\u00e9 RGB led je vytvo\u0159ena p\u0159edev\u0161\u00edm pro pr\u00e1ci s adresovatel\u00fdm modulem typu WS2812b ( proto se pou\u017e\u00edv\u00e1 zkratka WS ). Na\u0161e verze je roz\u0161\u00ed\u0159en\u00edm vestav\u011bn\u00e9 t\u0159\u00eddy NeoPixel . Pro \u0159\u00edzen\u00ed klasick\u00fdch R-G-B diod je pot\u0159eba na ka\u017edou barevnou slo\u017eku samostatn\u00fd PIN, co\u017e vyu\u017e\u00edv\u00e1me jen ojedin\u011ble, jeliko\u017e voln\u00fdch PIN\u016f na ESP u\u017e moc nezb\u00fdv\u00e1. Zdrojov\u00fd k\u00f3d knihovny Rgb \ud83e\udc52 components/rgb ( slou\u017e\u00ed i jako uk\u00e1zka, jak lze t\u0159\u00eddu roz\u0161\u00ed\u0159it ) T\u0159\u00edda je roz\u0161\u00ed\u0159ena o n\u011bkter\u00e9 nov\u00e9 metody: color(color) # pro jednu LED diodu, color ve form\u00e1tu (R,G,B), 0-255 color(color, index) # pro v\u00edce modul\u016f, indexov\u00e1no simpleTest() # prob\u011bhne R, G, B wheel() # z \u010d\u00edsla vygeneruje barvu random_color() # n\u00e1hodn\u00e1 barva rainbow_cycle() # duha from components.rgb import Rgb ws = Rgb(15) # BUILT_IN_RGB (WS) ROBOTboard ws.color((255,0,0)) # R G B => RED ws.simpleTest() import colors_rgb as rgb # definice barev v /lib - BLACK (nesv\u00edt\u00ed) ws.color(rgb.BLUE) # zobrazen\u00ed barvy, rgb.RED/rgb.GREEN ... note Pro obecn\u011bj\u0161\u00ed pr\u00e1ci s vyu\u017eit\u00edm set_pinout() (p\u0159eddefinovan\u00fdch pin\u016f ) a io_config p\u0159edpokl\u00e1d\u00e1me, \u017ee pro Octopus FrameWork m\u00e1te pomoc\u00ed setup() nastavenu desku ds a perif\u00e9rie ios . N\u00e1sleduj\u00edc\u00ed uk\u00e1zka nazna\u010duje komplexn\u011bj\u0161\u00ed pr\u00e1ci s p\u0159edkonfigurovan\u00fdmi konstantamy, kter\u00e9 ur\u010duj\u00ed na kter\u00e9m pinu ( pinout.WS_LED_PIN ) a kolik modul\u016f m\u00e1me ( io_conf.get('ws') ). from components.rgb import Rgb from utils.pinout import set_pinout pinout = set_pinout() # set board pinout from utils.io_config import get_from_file io_conf = get_from_file() ws = Rgb(pinout.WS_LED_PIN,io_conf.get('ws')) print(\"---examples/rgb_blink.py---\") ws.simpleTest() Zdrojov\u00fd k\u00f3d uk\u00e1zky: examples/rgb_blink.py Pro b\u011b\u017enou pr\u00e1ci je v prvn\u00ed f\u00e1zi snadn\u011bj\u0161\u00ed pou\u017e\u00edt p\u0159edchoz\u00ed variantu, ale pro rozs\u00e1hlej\u0161\u00ed projekty a pr\u00e1ci v t\u00fdmu se mus\u00ed zdokumentovat pou\u017eit\u00ed \"magick\u00e9 konstanty\" 15 v definici ws = Rgb(15) . \ud83e\udc52 pinout","title":"Rgb"},{"location":"basicdoc/#analog","text":"Tento modul je pro pr\u00e1ci s analogov\u00fdm vstupem pomoc\u00ed DAC p\u0159evodn\u00edku. Op\u011bt se jedn\u00e1 o roz\u0161\u00ed\u0159en\u00ed z\u00e1kladn\u00ed t\u0159\u00eddy ADC , kde vytvo\u0159en\u00edm instance s parametrem vstupn\u00edho PINu zjednodu\u0161ujeme celou inicializaci na an = Analog(33) . Z\u00e1kladn\u00ed metodu read() jsme roz\u0161\u00ed\u0159ili o get_adc_aver(num) , kde po\u010d\u00edt\u00e1me pr\u016fm\u011br z num nem\u011b\u0159en\u00fdch hodnot. Zdrojov\u00fd k\u00f3d knihovny: components/analog from time import sleep from components.analog import Analog an2 = Analog(33) while True: data = an2.get_adc_aver(8) print(data) sleep(5)","title":"Analog"},{"location":"basicdoc/#button","text":"Pro z\u00e1kladn\u00ed pr\u00e1ci s tla\u010d\u00edtky. P\u016fvodn\u011b jsme pou\u017e\u00edvali samostatn\u00fd blok s p\u0159eru\u0161en\u00edm, ale knihovna pak byla p\u0159eps\u00e1na tak, \u017ee vyu\u017e\u00edv\u00e1 dekor\u00e1tor @led_button.on_press , kter\u00fdm uvedeme (odekorujeme) vlastn\u00ed funkci on_press_top_button() , kter\u00e1 se vyvol\u00e1 v\u017edy, kdy\u017e se zm\u00e1\u010dkne tla\u010d\u00edtko. Cel\u00e1 funkce pak b\u011b\u017e\u00ed na pozad\u00ed, je neblokuj\u00edc\u00ed, a snadno i spolehliv\u011b se d\u00e1 pou\u017e\u00edt i pro v\u00edce tla\u010d\u00edtek. Zdrojov\u00fd k\u00f3d knihovny: components/button from machine import Pin from components.button import Button boot_pin = Pin(0, Pin.IN) boot_button = Button(boot_pin, release_value=1) @boot_button.on_press def boot_button_on_press(): print('boot_button_on_press') @boot_button.on_long_press def boot_button_on_long_press(): print('boot_button_on_long_press') @boot_button.on_release def boot_button_on_release(): print('boot_button_on_release') Star\u00e1 verze 1.0 m\u011bla v konstruktoru \u010d\u00edslo PINu. Nov\u00e1 verze 2.0 m\u00e1 p\u0159\u00edmo instanci PINu. from time import sleep from machine import Pin from components.button import Button led_button = Button(0, release_value=1) built_in_led = Pin(2, Pin.OUT) built_in_led.on() sleep(1) built_in_led.off() @led_button.on_press def on_press_top_button(): print(\"on_press_top_button\") built_in_led.on() sleep(3) built_in_led.off() \ud83e\udc52 Led | @Dekor\u00e1tor Pr\u00e1ce se \u010dty\u0159mi tla\u010d\u00edtky (na ESP32board) - v uk\u00e1zce je zakomentov\u00e1na spolupr\u00e1ce s displejem tft \ud83e\udc52 st7735 from utils.pinout import set_pinout pinout = set_pinout() from components.button import Button from utils.transform import Point2D print(\"buttons init>\") button_dwn = Button(34, release_value=1) button_top = Button(36, release_value=1) button_lef = Button(35, release_value=1) button_rig = Button(39, release_value=1) # size = 3 cursor = Point2D(63,81) # center TFT128*166 dispaly (mod 3) def position(dx,dy): global mx # cursor, fb, tft cursor.x = cursor.x + dx*3 cursor.y = cursor.y + dy*3 print(cursor.x,cursor.y) # fb.fill(color565(*BLACK)) # tft.blit_buffer(fb, 0, 0, tft.width, tft.height) # tft.fill_rectangle(cursor.x,cursor.y, 6, 6, color565(*RED)) @button_dwn.on_press def on_press_dwn(): print(\"down\") position(0,1) @button_top.on_press def on_press_top(): print(\"top\") position(0,-1) @button_lef.on_press def on_press_lef(): print(\"left\") position(-1,0) @button_rig.on_press def on_press_rig(): print(\"right\") position(1,0)","title":"Button"},{"location":"basicdoc/#display7","text":"Osm sedmisegmentovek s obvodem MAX na sb\u011brnici SPI je do za\u010d\u00e1tku ide\u00e1ln\u00ed displej pro z\u00e1klady pr\u00e1ce s mikrokontrol\u00e9rem. M\u00e1 \"retro\" sedm segment\u016f pro zobrazen\u00ed \u010d\u00edsel - proto disp7 . Obdobn\u00fd modul se shodn\u00fdm ovlada\u010dem je matice 8x8 sv\u00edtiv\u00fdch diod, ten jsme pojmenovali disp8 . Zdrojov\u00fd k\u00f3d components/display7 P\u0159ed inicializac\u00ed se mus\u00ed nejd\u0159\u00edve p\u0159ipojit SPI . V n\u00e1sleduj\u00edc\u00ed uk\u00e1zce je \"dvojit\u011b\" zakomentovan\u00e1 ## obecn\u011bj\u0161\u00ed metoda a pou\u017eit\u00e1 je spi_init() z knihovny octopus_lib . from machine import Pin, SPI from components.display7 import Display7 ## from utils.pinout import set_pinout from utils.octopus_lib import spi_init print(\"this is simple Micropython example | octopusLAB & ESP32\") print(\"--- spi-init ---\") ## pinout = set_pinout() ## spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) spi = spi_init() ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) #spi.deinit() #print(\"spi > close\") print(\"--- display7-init ---\") d7 = Display7(spi, ss) # 8 x 7segment display init d7.write_to_buffer('octopus') d7.display() Nejkrat\u0161\u00ed variantou je octopus framework verze, kde je ale nutno m\u00edt p\u0159es setup() a ds nastavenu desku (n\u011bj\u010dast\u011bji ROBOTboard nebo ESP32board) a d\u00e1le pomoc\u00ed ios nastaveno disp7 (4 | 1) from time import sleep from utils.octopus import disp7_init print(\"this is simple Micropython example | ESP32 & octopusLAB\") print() d7 = disp7_init() # 8 x 7segment display init for i in range(999): d7.show(1000-i) sleep(1)","title":"Display7"},{"location":"basicdoc/#oled","text":"Obl\u00edbili jsme si tak\u00e9 mal\u00fd 128x64px monochromatick\u00fd OLED displej. Jeho p\u0159\u00edm\u00e9 pou\u017e\u00edt\u00ed vy\u017eaduje u\u017e i inicializaci I2C a dal\u0161\u00ed drobnosti, proto jsme v\u011bt\u0161inou vyu\u017e\u00edvali knihovny octopus. Ale uk\u00e1zalo se, \u017ee pro vlastn\u00ed projekty je lep\u0161\u00ed um\u011bt spou\u0161t\u011bt displej i \"samostatn\u011b\", co\u017e je v uk\u00e1zce: examples/test_oled.py Zjednodu\u0161en\u00e9 ovl\u00e1d\u00e1n\u00ed je pak tradi\u010dn\u011b: from utils.octopus import oled_init oled = oled_init() ... Z\u00e1klad ale vych\u00e1z\u00ed z knihovny ssd1306 , kter\u00e1 je u\u017e sou\u010d\u00e1st\u00ed Micropythonu: def oled_init(): from utils.pinout import set_pinout from machine import Pin, I2C import ssd1306 # pinout = set_pinout() # i2c = I2C(0, scl=Pin(pinout.I2C_SCL_PIN), sda=Pin(pinout.I2C_SDA_PIN), freq=100000) from utils.octopus_lib import i2c_init i2c = i2c_init() oled = ssd1306.SSD1306_I2C(128, 64, i2c, 0x3c) return oled oled = oled_init() oled.text(\"octopusLAB\", 0, 0) oled.show() oled.draw_image() # default /assets/octopus_image.pbm oled.invert(0) ... >>> from assets.icons9x9 import ICON_clr, ICON_heart >>> oled.draw_icon(ICON_heart,115,15) >>> def heartBeat() ... oled.draw_icon(ICON_heart,115,15) ... sleep(1) ... oled.draw_icon(ICON_clr,115,15) ... sleep(1) ...","title":"Oled"},{"location":"basicdoc/#buzzer","text":"Pasivn\u00ed piezo \"p\u00edp\u00e1k\" slou\u017e\u00ed pro akustick\u00e1 upozorn\u011bn\u00ed, ale um\u00ed p\u0159ehr\u00e1t i velmi jednoduch\u00e9 \"retro\" melodie. Zdrojov\u00fd k\u00f3d knihovny: components/buzzer Z\u00e1klad pr\u00e1ce: from components.buzzer import Buzzer piezzo = Buzzer(33) piezzo.beep() Dopl\u0148uj\u00edc\u00ed t\u0159\u00edda melody jako p\u0159id\u00e1n\u00ed dal\u0161\u00ed \u010d\u00e1sti k\u00f3du: from components.buzzer.melody import jingle1 piezzo.play_melody(jingle1)","title":"Buzzer"},{"location":"basicdoc/#servo","text":"Modul pro pr\u00e1ci se servem, op\u011bt vytvo\u0159en\u00edm instance na dan\u00e9m PINu (mus\u00ed b\u00fdt PWM). Hlavn\u00ed metodou je pak pooto\u010den\u00ed na dan\u00fd \u00fahel: set_degree() . Zdrojov\u00fd k\u00f3d knihovny: components/servo from time import sleep from utils.pinout import set_pinout from components.servo import Servo pinout = set_pinout() # s1 = Servo(pinout.PWM1_PIN) # s2 = Servo(pinout.PWM2_PIN) s3 = Servo(pinout.PWM3_PIN) angles = [0, 20, 50, 70, 90] while True: for a in angles: s3.set_degree(a) sleep(1)","title":"Servo"},{"location":"basicdoc/#pca9685","text":"Element\u00e1rn\u00ed z\u00e1klad pr\u00e1ce s v\u00edce servy pomoc\u00ed I2C expand\u00e9ru pca9685: from pca9685.servo import Servos from utils.octopus_lib import i2c_init from time import sleep_ms from utils.transform import * # include all - only for example # blocking - simple test def sweep(s, start, stop, delay=5, step=1): ang = start servo.position(s, ang) sleep_ms(delay) if start < stop: print(\"a\") while ang < stop: ang = ang + step servo.position(s, ang) sleep_ms(delay) if start > stop: print(\"b\") while ang > stop: ang = ang - step servo.position(s, ang) sleep_ms(delay) i2c = i2c_init(1) servo = Servos(i2c) def sweeptest(): sweep(0,30,160) sweep(1,30,180) sweep(0,160,30) sweep(1,180,30) sweeptest() Zdrojov\u00fd k\u00f3d uk\u00e1zky: https://github.com/octopusengine/octopuslab/blob/master/esp32-micropython/examples/pca9685.py Pro tranformace a kompletn\u011bj\u0161\u00ed pr\u00e1ci s v\u00edce servy vyv\u00edj\u00edme knihovnu transform : https://github.com/octopusengine/octopuslab/blob/master/esp32-micropython/utils/transform.py \ud83e\udc52 pinout","title":"pca9685"},{"location":"basicdoc/#dcmotors","text":"Zdrojov\u00fd k\u00f3d knihovny: components/dcmotors from utils.pinout import set_pinout pinout = set_pinout() from components.dcmotors import Motor, Steering motor_r = Motor(pinout.MOTOR_1A, pinout.MOTOR_2A, pinout.MOTOR_12EN) motor_l = Motor(pinout.MOTOR_3A, pinout.MOTOR_4A, pinout.MOTOR_34EN) steering = Steering(motor_l, motor_r) speed = 800 steering.center(0) steering.center(-speed) steering.right(speed) steering.left(speed)","title":"DCmotors"},{"location":"basicdoc/#iot","text":"T\u0159\u00edda, kter\u00e1 p\u016fvodn\u011b slou\u017eila jako modul pro IoTboard, ale samostatn\u00e1 zahrnuje rel\u00e9 a PWM MOS-FET \u0159\u00edzen\u00ed. Zdrojov\u00fd k\u00f3d knihovny: components/iot Uk\u00e1zka: from components.iot import Relay re1 = Relay() # default IoTboard pin re1.value(1) re2 = Relay(26) from components.iot import Pwm pwm_led = Pwm(33) pwm_led.duty(300) from components.iot import Thermometer tt = Thermometer(32) # DEV1 pin (ROBOTboard) tx = tt.ds.scan() # get list of all Dallas sensors tt.get_temp() # default index 0 -> first sensor tt.get_temp(0) # first sensor explicitly","title":"IoT"},{"location":"basicdoc/#octopus-utils","text":"","title":"OCTOPUS Utils"},{"location":"basicdoc/#wificonnect","text":"Hlavn\u00ed v\u00fdhodou na\u0161eho roz\u0161\u00ed\u0159en\u00ed pro p\u0159ipojen\u00ed k WiFi je pou\u017e\u00edv\u00e1n\u00ed ulo\u017een\u00e9ho nastaven\u00ed (v config/wifi.json ). Nastaven\u00ed WiFi se prov\u00e1d\u00ed pomoc\u00ed setup() from utils.wifi_connect import WiFiConnect net = WiFiConnect() net.connect() if not net.isconnected() # hard reconect net.sta_if.disconnect() net.connect() V p\u0159\u00edpad\u011b \"z\u00e1va\u017en\u011bj\u0161\u00edho probl\u00e9mu\" s p\u0159ipojen\u00edm n\u011bkdy pom\u016f\u017ee a\u017e \"tvrd\u00fd\" reset . # hard reset reset() Vyu\u017eit\u00ed Octopus FrameWork na maximum - k p\u0159ipojen\u00ed k n\u011bkter\u00e9 z ulo\u017een\u00fdch WiFi posta\u010d\u00ed p\u0159\u00edkaz w() : from utils.octopus_lib import w w() Variantn\u011b s dostupn\u00fdmi metodami: wc = w() ip = wc.sta_if.ifconfig()[0] ... wc.isconnected() A opa\u010dn\u00fd extr\u00e9m - klasick\u00e9 p\u0159ipojen\u00ed k s\u00edti s p\u0159ed\u00e1n\u00edm parametr\u016f ssid (n\u00e1zev) a password (heslo): import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') Umo\u017en\u00ed n\u00e1m (od verze v1.16 on 2021-08-09) skenovat celu s\u00ed\u0165: llan = wlan.scan() # list for i in llan: print(i[0],i[2]) Origin\u00e1ln\u00ed dokumentace wlan()","title":"WiFiConnect"},{"location":"basicdoc/#bits","text":"Pro pr\u00e1ci s jednotliv\u00fdmi bity . B1 = 0b11111001 . Bitov\u00e9 operace jsme si museli do Pythonu trochu doladit, aby se s nimi pracovalo l\u00e9pe a intuitivn\u011b. Pou\u017e\u00edvan\u00e9 metody: neg(B1) pro negaci - vrac\u00ed 0b00000110 reverse() obr\u00e1cen\u00ed po\u0159ad\u00ed bit\u016f - vrac\u00ed 0b1001111 get_bit(B1,1) pro z\u00edsk\u00e1n\u00ed stavu jednoho bitu > 0 set_bit(B1,1) pro nastaven\u00ed stavu jednoho bitu int2bin() pomocn\u00e1 funkce pro p\u0159evod \u010d\u00edsla na bin\u00e1rn\u00ed Zdrojov\u00fd k\u00f3d knihovny: utils/bits from components.bits import neg B1 = 0b11111001 neg(B1) # > 0b00000110","title":"Bits"},{"location":"basicdoc/#transform","text":"Pomocn\u00e9 funkce pro mechatroniku, zam\u011b\u0159en\u00e9 na transformace sou\u0159adnicov\u00fdch syst\u00e9m\u016f a z\u00e1klady inversn\u00ed kinematiky. Point2D() class p2 = (x,y) | p2.x, p2.y distance2D(p1, p2, rr = 3) vzd\u00e1lenost dvou bod\u016f v rovin\u011b vyu\u017e\u00edv\u00e1 se round - zaokrouhlen\u00ed na ur\u010dit\u00fd po\u010det m\u00edst: rr = 3 polar2cart(r, alfa, rr = 3) cart2polar(point) def cosangle(opp, adj1, adj2) move_2d_line(p_start, p_stop, steps = 300, max_dist = 100) invkin2_1(point2d, rr = 6) inversn\u00ed kinematika 1 invkin2(point2d, angleMode=DEGREES) Point3D() class p3 = [x,y,z] invkin3(point3d, angleMode=DEGREES) distance3() vzd\u00e1lenost dvou bod\u016f v prostoru ... from utils.transform import Point2D, polar2cart, cosangle p1 = Point2D(1,3) print(p1) # (1,3) print(p1.x) # 1 print(p1.y) # 3 p1.x, p1.y = polar2cart(10, 0) print(p1) ... from utils.transform import move_servo2, cosangle ... def move_servo2(p1, p2, delay = delay): steps = move_2d_line(p1, p2) for step in steps: alfa = cosangle(step[0], dist, dist)[0] beta = cosangle(step[1], dist, dist)[0] print(step, alfa, beta) s1.set_degree(alfa) s2.set_degree(beta) sleep_ms(delay) p1 = 0, 0 # strart point p2 = 50, 50 # stop point move_servo2(p1, p2) V\u00edce pl\u00e1nujeme v samostatn\u00e9 sekci inversn\u00ed kinematika","title":"Transform"},{"location":"basicdoc/#database","text":"ESP d\u00edky pam\u011bti umo\u017e\u0148uje bez nads\u00e1zky i z\u00e1kladn\u00ed pr\u00e1ci s datab\u00e1z\u00ed. Zam\u011b\u0159\u00edme se na dv\u011b z\u00e1kladn\u00ed: lok\u00e1ln\u00ed btree a vzd\u00e1len\u00e9 MySQL , InfluxDB . from utils.database.btreedb import BTreeDB db = BTreeDB(\"test\") db.addOne(\"one\",\"1\") db.listAll() Zv\u00eddav\u011bj\u0161\u00edm doporu\u010dujeme odkaz na pr\u00e1ci s daty a datab\u00e1ze \ud83e\udc52 Workshop Python DATA","title":"Database"},{"location":"basicdoc/#mqtt","text":"MQTT - jako pub-sub MQTT broker - na RPi orchestr\u00e1tor NodeJS vyu\u017eit\u00ed v IoT","title":"MQTT"},{"location":"basicdoc/#influxdb","text":"Pro zobrazov\u00e1n\u00ed dat v Grafan\u011b pr\u016fb\u011b\u017en\u011b pos\u00edl\u00e1me \u00fadaje na vzd\u00e1len\u00fd server, kter\u00fd je ukl\u00e1d\u00e1 do datab\u00e1ze InfluxDB . Jednoduch\u00fd p\u0159\u00edklad jednor\u00e1zov\u00e9ho odesl\u00e1n\u00ed jedn\u00e9 hodnoty ( timestamp - datum a \u010das se p\u0159idaj\u00ed p\u0159i ukl\u00e1d\u00e1n\u00ed automaticky): from utils.database.influxdb import InfluxDB influx = InfluxDB(\"https://your.server.com/grafana/influx/user...\", \"user_db\", \"i_usr\", \"i_psw\", \"i_measurement\") value = 25.6 # zde je treba cist hodnotu z nejakeho senzoru, napr. teplomeru influx.write(temperature=value) ... Metoda write mus\u00ed dostat pojmenovan\u00e9 parametry (key word arguments - tzv. kwargs), kter\u00e9 se v Influxu pou\u017eij\u00ed, jako jednotliv\u00e9 fieldy. V p\u0159\u00edkladu naho\u0159e je to temperature , kam ukl\u00e1d\u00e1me hodnotu ze sensoru. Funk\u010dn\u00ed uk\u00e1zka nap\u0159: examples/influxdb_disp7_therm.py Abychom mohli pou\u017e\u00edt identick\u00fd program s minimem zm\u011bn, vyu\u017eijeme konfigura\u010dn\u00ed soubor, na\u010dteme pomoc\u00ed fromconfig() . A tak\u00e9 nechceme m\u00edt p\u0159\u00edstupov\u00e9 \u00fadaje ve zdrojov\u00e9m k\u00f3du ! from utils.database.influxdb import InfluxDB influx = InfluxDB.fromconfig() temp = ... influx.write(temperature=temp) fromconfig() bere voliteln\u011b jako prvn\u00ed parametr, n\u00e1zev konfigura\u010dn\u00edho souboru, default je \"influxdb\" , tedy soubor config/influxdb.json . P\u0159\u00edklad obsahu je: {\"influxdb_url\": \"https://parallelgarden.surikata.info:8086\", \"influxdb_pass\": \"heslo\", \"influxdb_name\": \"nazev_db\", \"influxdb_user\": \"uzivatel\", \"influxdb_measurement\": \"meteo\", \"influxdb_tags\": {\"location\": \"balkon\"}} V\u00edce o vytv\u00e1\u0159en\u00ed a editaci konfigura\u010dn\u00edch soubor\u016f \ud83e\udc52 Config","title":"InfluxDB"},{"location":"basicdoc/#octopus-lib","text":"","title":"OCTOPUS Lib"},{"location":"basicdoc/#lcd","text":"Knihovna t\u0159et\u00ed strany pro ovl\u00e1d\u00e1n\u00ed dvou nebo \u010dty\u0159-\u0159\u00e1dkov\u00e9ho LCD displeje p\u0159ipojen\u00e9ho k i2c expand\u00e9ru, byla p\u016fvodn\u011b ur\u010dena pro star\u0161\u00ed ESP8266, ale funguje n\u00e1m bez \u00faprav i pro ESP32 (proto\u017ee komunika\u010dn\u00ed protokol na i2c se nem\u011bn\u00ed). Z\u00e1kladem v nastaven\u00ed je: po\u010det \u0159\u00e1dk\u016f rows - \u00bd/4, a po\u010det \"sloupc\u016f\" col odpov\u00edd\u00e1 po\u010dtu znak\u016f na \u0159\u00e1dku. Uk\u00e1zka pro displej 2x16 - s hlavn\u00ed metodou putstr(STRING) . # from machine import I2C , Pin # i = I2C(scl=Pin(22), sda=Pin(21), freq=100000) from utils.octopus_lib import i2c_init i2c = i2c_init() # i2c.scan() # > [39] from lib.esp8266_i2c_lcd import I2cLcd lcd = I2cLcd(i2c, 39, 2, 16) # addr, rows, col lcd.putstr(\"octopusLab\") # write text ... Pomoc\u00ed speci\u00e1ln\u00edch znak\u016f (u\u017e implementovan\u00fdch) lze vykreslit nap\u0159\u00edklad stupn\u011b Celsia (pro zobrazov\u00e1n\u00ed teploty): lcd.putstr(chr(223)) Nastaven\u00ed kurzoru move_to() a uk\u00e1zka zobrazen\u00ed hodin s blikaj\u00edc\u00ed dvojte\u010dku: def clock(): lcd.move_to(5,1) lcd.putstr(get_hhmm(\":\")) sleep(0.5) lcd.move_to(5,1) lcd.putstr(get_hhmm(\" \")) sleep(1) V na\u0161em podadres\u00e1\u0159i /assets m\u00e1me v souboru lcd_chars.py tabulky n\u011bkter\u00fdch \"nov\u011b definovan\u00fdch\" znak\u016f pro LCD: import assets.lcd_chars as ch from utils.octopus import lcd2_init lcd = lcd2_init() lcd.custom_char(0, ch.happy) lcd.putchar(chr(0)) lcd.custom_char(1, ch.clock) lcd.putchar(chr(1)) ...","title":"LCD"},{"location":"basicdoc/#st7735","text":"Barevn\u00fd displej TFT 128x160, kter\u00fd ale vy\u017eaduje p\u0159i pr\u00e1ci s Micropythonem v\u011bt\u0161\u00ed pam\u011b\u0165. Doporu\u010den\u00e9 p\u0159ipojen\u00ed k ESP32board : Display | ESP32board ------------------------ 1-RST | PWM2 (16) 2-CS | SCE0 (5) 3-D/C | PWM1 (17) 4-DIN | SPI_MOSI (23) 5-CLK | SPI_CLK (18) 6-UCC | 5V 7-BL | 3V3 8-GND | GND Nov\u00e1 verze from ST7735 import TFT, TFTColor from sysfont import sysfont from machine import SPI, Pin from time import sleep_ms, ticks_ms from math import pi from utils.octopus_lib import w # need connection for FTP SPI_SCLK = 18 SPI_MISO = 19 SPI_MOSI = 23 DC = 17 # PWM1 RST = 16 # PWM2 CS = 5 # SCE0 print(\"--- TFT 128x160px test ---\") spi = SPI(2, baudrate=20000000, polarity=0, phase=0, sck=Pin(SPI_SCLK), mosi=Pin(SPI_MOSI), miso=Pin(SPI_MISO)) tft=TFT(spi, DC, RST, CS) tft.initr() tft.rgb(True) tft.fill(TFT.BLACK) v = 30 tft.text((0, v), \"octopus LAB (1)\", TFT.RED, sysfont, 1, nowrap=True) v += sysfont[\"Height\"] tft.fill(TFT.BLACK) tft.rotation(1) tft.text((0, 0), \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. \", TFT.WHITE, sysfont, 1) sleep_ms(2000) ... P\u016fvodn\u00ed star\u0161\u00ed verze from machine import Pin, SPI, SDCard from time import sleep, sleep_ms from utils.pinout import set_pinout pinout = set_pinout() import framebuf from lib import st7735 from lib.rgb import color565 print(\"spi.TFT 128x160 init >\") spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) rst = Pin(16, Pin.OUT) #PWM2 (16) / DEv3(27) cs = Pin(5, Pin.OUT) #SCE0 (5) dc = Pin(26, Pin.OUT) #PWM1 (17) / IO26 tft = st7735.ST7735R(spi, cs = cs, dc = dc, rst = rst) print(\"spi.TFT framebufer >\") fb = framebuf.FrameBuffer(bytearray(tft.width*tft.height*2), tft.width, tft.height, framebuf.RGB565) fbp = fb.pixel fb.line(128,0,0,166,color565(0,255,0)) tft.blit_buffer(fb, 0, 0, tft.width, tft.height) ... \ud83e\udc52 pinout examples/test_tft128x160.py","title":"ST7735"},{"location":"basicdoc/#hcsr04","text":"Ultrazvukov\u00fd m\u011b\u0159i\u010d vzd\u00e1lenosti. from time import sleep from util.pinout import set_pinout pinout = set_pinout() from hcsr04 import HCSR04 print(\"ulrasonic distance sensor\") echo = HCSR04(trigger_pin=pinout.PWM2_PIN, echo_pin=pinout.PWM1_PIN) while True: echo_cm = echo.distance_cm() print(echo_cm) sleep(1) \ud83e\udc52 pinout examples/ultrasonic.py","title":"hcsr04"},{"location":"basicdoc/#pubsub","text":"N\u00e1stroj pro p\u0159ed\u00e1v\u00e1n\u00ed hodnot mezi nez\u00e1visl\u00fdmi komponenty v r\u00e1mci projektu a to i v samostatn\u011b b\u011b\u017e\u00edc\u00edch vl\u00e1knech. Pracuje na principu publish and subscribe . Fork z basecue/micropython-pubsub . Zdrojov\u00fd k\u00f3d knihovny: ./lib/pubsub.py Z\u00e1klad pr\u00e1ce: jedno vl\u00e1kno (nebo \u010d\u00e1st programu) publikuje z\u00edskan\u00e9 hodnoty metodou publish kde parametrem je topic a hodnota value . Nap\u0159\u00edklad pubsub.publish('topic', value) . (value m\u016f\u017ee b\u00fdt libovoln\u00fd objekt). V jednoduch\u00e9 uk\u00e1zce jednou za vte\u0159inu generujeme n\u00e1hodn\u00e1 \u010d\u00edsla, kter\u00e1 \"publikujeme\". (pozor, pou\u017e\u00edv\u00e1me while True: - je to blokuj\u00edc\u00ed, lep\u0161\u00ed je pou\u017e\u00edt timer ) from time import sleep from os import urandom import pubsub print(\"start: ps_random.py\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1) Protistrana je odeb\u00edr\u00e1 / naslouch\u00e1. A m\u016f\u017ee je t\u0159eba zobrazovat na displeji: import pubsub from utils.octopus import disp7_init d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) \ud83e\udc52 Disp7 Uk\u00e1zky jsou z vybran\u00fdch p\u0159\u00edklad\u016f pro pubsub: examples/pubsub","title":"pubsub"},{"location":"basicdoc/#ble","text":"Jeliko\u017e obecn\u00e1 problematika BLE (Bluetooth low energy) je pom\u011brn\u011b obs\u00e1hl\u00e1, tak i modul BLE je dost robustn\u00ed. Zahrnuje n\u011bkolik \u010d\u00e1st\u00ed: blesync , blesync_client , blesync_server a samostatn\u00fd modul blesync_uart . Ka\u017edop\u00e1dn\u011b funguje velmi dob\u0159e a snahou bylo, aby pr\u00e1ce s n\u00edm byla srozumiteln\u00e1 a p\u0159itom umo\u017enila vyu\u017e\u00edt v\u0161echny mo\u017en\u00e9 v\u00fdhody, kter\u00e9 BLE obecn\u011b p\u0159in\u00e1\u0161\u00ed. Projekt m\u00e1 sv\u016fj vlastn\u00ed repozit\u00e1\u0159: /blesync . N\u00e1sleduj\u00edc\u00ed p\u0159\u00edklad umo\u017en\u00ed z mobiln\u00ed aplikace nal\u00e9zt ESP za\u0159\u00edzen\u00ed jako octopus-led-UID , kde UID je \u010d\u00e1s unik\u00e1tn\u00edho ID, kter\u00e9 m\u00e1 ka\u017ed\u00e9 ESP. Pomoc\u00ed mobiln\u00ed aplikace \u0161ipkami nahoru (Up) a dol\u016f (DOWN) pak ovl\u00e1d\u00e1me vestav\u011bnou Led diodu. import blesync_server import blesync_uart.server import utils.ble.bluefruit as bf from shell.terminal import getUid uID5 = getUid(short=5) from time import sleep from components.led import Led led = Led(2) @blesync_uart.server.UARTService.on_message def on_message(service, conn_handle, message): if message == bf.UP: led.value(1) if message == bf.DOWN: led.value(0) if message == bf.RIGHT: led.toggle() service.send(conn_handle, message) _connections = [] devName = 'octopus-led-'+uID5 print(\"BLE ESP32 device name: \" + devName) server = blesync_server.Server(devName, blesync_uart.server.UARTService) server.start()","title":"BLE"},{"location":"basicdoc/#mobilni-aplikace-pro-ble","text":"Pou\u017e\u00edv\u00e1me Bluefruit connect od spole\u010dnosti Adafruit. Jeden z odkaz\u016f na play.google.com/store/apps Vytvo\u0159ili jsme si pomocnou knihovnu pro \"p\u0159ekl\u00e1d\u00e1n\u00ed\" jimi definovan\u00fdch k\u00f3d\u016f, kter\u00e1 je zat\u00edm zde ./utils/ble/blefruit.py : UP = b'!B516' DOWN = b'!B615' LEFT = b'!B714' RIGHT = b'!B813' ... S touto knihovnou pak pracujeme takto: import utils.ble.bluefruit as bf ... if message == bf.UP: led.value(1) if message == bf.DOWN: led.value(0)","title":"Mobiln\u00ed aplikace pro BLE"},{"location":"basicdoc/#ostatni-podpurne-moduly","text":"","title":"Ostatn\u00ed podp\u016frn\u00e9 moduly"},{"location":"basicdoc/#config","text":"Micropython m\u00e1 elegantn\u011b propacovanou pr\u00e1ci se soubory (nahr\u00e1v\u00e1n\u00ed a \u010dten\u00ed) a i s json form\u00e1tem, proto jsme toho vyu\u017eili pro extern\u00ed konfigura\u010dn\u00ed soubory. V adres\u00e1\u0159i /config jsou nahr\u00e1ny jednotliv\u00e9 \"jsony\", kter\u00e9 v sob\u011b obsahuj\u00ed n\u011bjak\u00e9 konstanty, nastaven\u00ed a podobn\u011b. Proto m\u016f\u017eeme dan\u00fd projekt dynamicky konfigurovat. Vyu\u017e\u00edv\u00e1me to i v nastaven\u00ed PIN\u016f jednotiv\u00fdch za\u0159\u00edzen\u00ed device.json nebo pro ulo\u017een\u00ed p\u0159\u00edstup\u016f k WiFi wifi.json . Zdrojov\u00fd k\u00f3d knihovny: ./config/ init .py","title":"Config"},{"location":"basicdoc/#jednotlive-metody-pro-zakladni-varianty-pouzivani","text":"1) Vytvo\u0159en\u00edm pomoc\u00ed konstruktoru: myConfig = Config(\"myConfigFile\",keys) Vy\u017eaduje p\u0159edefinici kl\u00ed\u010dov\u00fdch \"metrik\": keys = [\"tempMax\",\"tempMin\"] setup() print() # for keys M\u011bjme uk\u00e1zkov\u00fd projekt termostat , kter\u00fd na z\u00e1klad\u011b zm\u011b\u0159en\u00e9 teploty pust\u00ed bu\u010f topen\u00ed, nebo chlazen\u00ed (ventil\u00e1tor). Voliteln\u011b si m\u016f\u017eeme v programu definovat keys , kde m\u00e1me ulo\u017eeny n\u00e1zvy podstatn\u00fdch konstant. Instanci pak vytv\u00e1\u0159\u00edme conf = Config(\"your_file\", keys) , kde \"your_file\" je n\u00e1zev - nej\u010dast\u011bji shodn\u00fd s n\u00e1zvem projektu. Nap\u0159\u00edklad \"termostat\". Se souborem se pak d\u00e1 pracovat n\u011bkolika metodami, nap\u0159\u00edklad: setup() (interaktivn\u00ed m\u00f3d - pou\u017e\u00edv\u00e1me nej\u010dast\u011bji), create_from_query() , set() , save() ... >>> from config import Config >>> keys = [\"tempMax\",\"tempMin\"] >>> conf = Config(\"termostat\", keys) # > config/termostat.json >>> conf.setup() ================================================== S E T U P - config/termostat.json ================================================== [ 1] - tempMax - [ 2] - tempMin - [q] - Quit from json setup ================================================== select: Vid\u00edme, \u017ee nastaven\u00ed config je snadn\u00e9. Sta\u010d\u00ed vyplnit nebo modifikovat interaktivn\u00ed tabulku. 2) Vytvo\u0159en\u00edm pomoc\u00ed konstruktoru bez keys : myConfig = Config(\"myConfigFile\") print_all() get(\"key\") set(\"key\",value) create_from_query(\"a=1&b=2\") # key1 = \"a\", value1 = 1 ... save() # vytvo\u0159en\u00ed konfigu: a = 1, b = 2 >>> conf = Config(\"your_config\") >>> conf.create_from_query(\"a=1&b=2\") {'a': '1', 'b': '2'} >>> conf.set(\"c\",3) >>> conf.save() Writing new config item to file config/your_config.json >>> conf.print_all() ----------------------------------------- a - 1 c - 3 b - 2 ----------------------------------------- >>> Ve sv\u00e9m programu pak config pou\u017eijeme n\u00e1sledovn\u011b: from config import Config conf = Config(\"your_config\") a = conf.get(\"a\") # 1 b = conf.get(\"b\") # 2 Pro lep\u0161\u00ed pochopen\u00ed datov\u00fdch struktur nastudujte \ud83e\udc52 /ws-python-data","title":"Jednotliv\u00e9 metody pro z\u00e1kladn\u00ed varianty pou\u017e\u00edv\u00e1n\u00ed:"},{"location":"basicdoc/#octopus_lib","text":"","title":"octopus_lib"},{"location":"basicdoc/#i2c","text":"i2c_init() >>> from utils.octopus_lib import i2c_init >>> i2c = i2c_init() >>> i2c.scan() # I2C address: OLED_ADDR = 0x3c LCD_ADDR = 0x27 bhLight = 0x23 bh2Light = 0x5c tslLight = 0x39 # PCF8574 PCF8574A # AAA - hex (dec) # 210 # 000 - 0x20 (32) 0x38 (56) # 001 - 0x21 (33) * 0x39 (57) # 010 - 0x22 (34) 0x3A (58) # 011 - 0x23 (35) * 0x3B (59) # 100 - 0x24 (36) 0x3C (60) # 101 - 0x25 (37) 0x3D (61) # 110 - 0x26 (38) 0x3E (62) # 111 - 0x27 (39) 0x3F (63) # * ROBOTboard # n\u011bkter\u00e9 dal\u0161\u00ed z\u00e1kladn\u00ed metody ADDR = 42 i2c.writeto(ADDR, b'123') # write 3 bytes to slave with 7-bit address 42 i2c.readfrom(ADDR, 8) # read 8 bytes from slave with 7-bit address 42 i2c.readfrom_mem(ADDR, 8, 3) # ... Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k I2C \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.I2C.html","title":"I2C"},{"location":"basicdoc/#spi","text":"spi_init() from machine import Pin, SPI from components.display7 import Display7 ## from utils.pinout import set_pinout from utils.octopus_lib import spi_init print(\"--- spi-init ---\") ## spi = SPI(1, baudrate=10000000, polarity=1, phase=0, sck=Pin(pinout.SPI_CLK_PIN), mosi=Pin(pinout.SPI_MOSI_PIN)) spi = spi_init() ss = Pin(pinout.SPI_CS0_PIN, Pin.OUT) #spi.deinit() #print(\"spi > close\") ... # n\u011bkter\u00e9 dal\u0161\u00ed z\u00e1kladn\u00ed metody SPI.deinit() SPI.read(nbytes, write=0) SPI.readinto(buf, write=0) SPI.write(buf) SPI.write_readinto(write_buf, read_buf) ... Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k SPI \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.SPI.html","title":"SPI"},{"location":"basicdoc/#rtc","text":"Modul re\u00e1ln\u00e9ho \u010dasu m\u00e1 Micropython v posledn\u00ed verzi dopln\u011bn i o ntp modulem ntptime . Co se skr\u00fdv\u00e1 v \ud83e\udc52 ntptime ? P\u0159edev\u0161\u00edm metoda settime() , pomoc\u00ed kter\u00e9 z\u00edsk\u00e1me p\u0159esn\u00fd \u010das ze serveru pool.ntp.org . from ntptime import settime from machine import RTC from utils.octopus_lib import w, get_hhmm, setlocal rtc = RTC() w() # p\u0159ipojen\u00ed k internetu settime() print(get_hhmm(rtc)) # + 2 h. setlocal(2) print(get_hhmm(rtc)) Zdroj uk\u00e1zky \ud83e\udc52 test_rtc_ntp.py Odkaz na origin\u00e1ln\u00ed Micropython dokumentaci k RTC \ud83e\udc52 https://docs.micropython.org/en/latest/library/machine.RTC.html","title":"RTC"},{"location":"basicdoc/#pinout","text":"Pr\u00e1ci s PINy ( \"no\u017ei\u010dky\" kontroleru ) n\u00e1m uleh\u010duje p\u0159ednastanen\u00fd pinout , kter\u00fd je ulo\u017een\u00fd v konfigura\u010dn\u00edm souboru. Konfigura\u010dn\u00ed soubory pro jednotliv\u00e9 hw moduly jsou v samostatn\u00e9m adres\u00e1\u0159i /pinouts . Podle toho, jakou m\u00e1me HW platformu, m\u00e1me p\u0159esn\u011b sv\u00e1z\u00e1ny konstanty (\u010d\u00edsla PIN\u016f) s jejich n\u00e1zvy. Vybran\u00e9 soubory zapojen\u00ed pin\u016f jsou na samostatn\u00e9 str\u00e1nce \ud83e\udc52 pinouts . Zdrojov\u00fd k\u00f3d knihovny: \ud83e\udc52 utils/pinout Princip je jednoduch\u00fd: m\u00e1me definov\u00e1ny \u010d\u00edseln\u00e9 konstanty (v programu se nem\u011bn\u00edc\u00ed \u010d\u00edsla), nap\u0159\u00edklad pro vestav\u011bnou Led diodu: BUILT_IN_LED = const(\u010d\u00edslo) . \u010c\u00edslo je zde \u010d\u00edslo PINu a m\u016f\u017ee se li\u0161it podle dan\u00e9 desky (deska je nastavena p\u0159\u00edkazem >>> setup() ). Tato konstanta je ulo\u017eena v souborech pinouts/file_name . Pro ROBOTboart je to 2 , tak\u017ee v souboru pro definici pin\u016f najdete \u0159\u00e1dek BUILT_IN_LED = const(2) . V\u00fdchoz\u00ed spole\u010dn\u00e9 piny jsou v /pinouts/olab_esp32_base.py a ROBOTboard je p\u0159eb\u00edr\u00e1. Jak se s modulem pinout pracuje? M\u016f\u017eete si zkusit z termin\u00e1lu Micropythonu: >>> >>> from utils.pinout import set_pinout >>> pinout = set_pinout() A u\u017e m\u00e1me dostupn\u00e9 piny na pinout.NAZEV_PINU , daj\u00ed se zjistit i osatn\u00ed PINy, po pinout te\u010dka TAB : >>> pinout. __class__ __name__ const __file__ WS_LED_PIN ONE_WIRE_PIN PIEZZO_PIN MOTOR_12EN MOTOR_34EN MOTOR_1A MOTOR_2A MOTOR_3A MOTOR_4A ANALOG_PIN PWM1_PIN PWM2_PIN PWM3_PIN SERVO_MIN SERVO_MAX I39_PIN DEV1_PIN DEV2_PIN BUILT_IN_LED HALL_SENSOR I2C_SCL_PIN I2C_SDA_PIN SPI_CLK_PIN SPI_MISO_PIN SPI_MOSI_PIN SPI_CS0_PIN RXD0 TXD0 BUTT1_PIN BUTT2_PIN BUTT3_PIN DEV3_PIN ... >>> pinout.BUILT_IN_LED 2 Vid\u00edme, \u017ee pro BUILT_IN_LED n\u00e1m \"dohled\u00e1\" \u010d\u00edslo deklarovan\u00e9 2 , tak\u017ee se to d\u00e1 pou\u017e\u00edt: led = Led(pinout.BUILT_IN_LED) # BUILT_IN_LED = 2 je shodn\u00e9 s: led = Led(2) ale \u010d\u00edslo 2 si nemus\u00edme pamatovat, nav\u00edc u r\u016fzn\u00fdch modul\u016f se m\u016f\u017ee li\u0161it. Cel\u00e1 uk\u00e1zka pro blik\u00e1n\u00ed vestav\u011bn\u00e9 Ledky na r\u016fzn\u00fdch modulech - m\u016f\u017ee b\u00fdt na PINu 2 nebo tak\u00e9 na 15 ... nebo \u00fapln\u011b jin\u00e9m. A my toto \u010d\u00edslo p\u0159i spr\u00e1vn\u00e9 konfiguraci modulu (desky) nemus\u00edme \u0159e\u0161it a k vestav\u011bn\u00e9 Ledce p\u0159istupujeme n\u00e1zvem PINu: BUILT_IN_LED . from components.led import Led from utils.pinout import set_pinout # import library pinout = set_pinout() # set board pinout led = Led(pinout.BUILT_IN_LED) # start main loop while True: led.blink() \ud83e\udc52 Led","title":"pinout"},{"location":"basicdoc/#dekorator","text":"Mo\u017en\u00e1 jste si v n\u011bkter\u00fdch na\u0161ich uk\u00e1zk\u00e1ch v\u0161imnuli speci\u00e1ln\u00edho pou\u017eit\u00ed @ p\u0159ed definic\u00ed funkce, nap\u0159\u00edklad v \ud83e\udc52 pubsub @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) nebo v \ud83e\udc52 button @led_button.on_press def on_press_top_button(): print(\"on_press_top_button\") built_in_led.on() Dekor\u00e1tor v Pythonu je funkce , kter\u00e1 dostane jeden argument (funkci) a vr\u00e1t\u00ed jednu hodnotu - op\u011bt funkci, kter\u00e1 je modifikovanou verz\u00ed funkce p\u016fvodn\u00ed. P\u016fvodn\u00ed funkce ja takzvan\u011b \"odekorovan\u00e1\". Pou\u017eit\u00ed dekor\u00e1tor\u016f velmi zjednodu\u0161\u00ed a zp\u0159ehlen\u00ed v\u00e1\u0161 k\u00f3d. Pou\u017e\u00edv\u00e1 se na registraci, modifikaci a podobn\u011b. @dekorator def funkce(): pass # je stejn\u00e9 jako: def funkce(): pass funkce = dekorator(funkce) Speci\u00e1ln\u00ed @octopus_debug dekor\u00e1tor \ud83e\udc52 /octopus_decor.py vrac\u00ed nap\u0159\u00edklad \u010das, kter\u00fd trvalo proveden\u00ed \"odekorovan\u00e9\" funkce. @octopus_debug def yourFunc(): ...","title":"Dekor\u00e1tor"},{"location":"basicdoc/#zrychleni-prace-procesoru","text":"Zkou\u0161\u00edme dekor\u00e1tory @micropython.native nebo @micropython.viper - podrobn\u011bji pops\u00e1no p\u0159\u00edmo na str\u00e1nk\u00e1ch \ud83e\udc52 micropython/reference/..speed_python Jak se d\u00e1 rychlost testovat (je pou\u017eit dal\u0161\u00ed dekor\u00e1tor @octopus_debug - ten vrac\u00ed \u010das b\u011bhu funkce): from utils.octopus_decor import octopus_debug @octopus_debug def test1(): for i in range(10000000): xx=i @octopus_debug @micropython.native def test2_native(): for i in range(10000000): xx=i @octopus_debug @micropython.viper def test3_viper(): for i in range(10000000): xx=i >>> test1() === function name: test1 === duration (sec.) ---> 41 ... >>> test2_native() === function name: test2 === duration (sec.) ---> 6 ... test3_viper()","title":"Zrychlen\u00ed pr\u00e1ce procesoru"},{"location":"basicdoc/#web-server-ide-jednoduche-ovladani","text":"Jsme vy\u010dlenili samostatn\u011b - zat\u00edm zde: micropython-web-ide","title":"Web server - IDE - jednoduch\u00e9 ovl\u00e1d\u00e1n\u00ed"},{"location":"basicdoc/#web-server","text":"ESP32 m\u00e1 dostate\u010dn\u00fd v\u00fdkon, aby na n\u011bm mohl b\u011b\u017eet jednoduch\u00fd webov\u00fd server (server s jednoduch\u00fdmi \"html\" str\u00e1nkami, k kter\u00e9mu se v lok\u00e1ln\u00ed s\u00edti p\u0159ipoj\u00edme p\u0159es IP ESP\u010dka) >>> from utils.octopus_lib import w >>> from utils.octopus import web_server >>> w() >>> web_server()","title":"Web server"},{"location":"class/","text":"Class Magick\u00e9 slovo t\u0159\u00edda (class) v objektov\u00e9m programov\u00e1n\u00ed (OOP) Letm\u00fd \u00favod do objektov\u00e9ho programov\u00e1n\u00ed si nazna\u010d\u00edme na tradi\u010dn\u00edm hello world projektu: blik\u00e1n\u00ed ledky . Sv\u00edtiv\u00e1 dioda (LED) je mal\u00e1 sou\u010d\u00e1stka, kterou snad nemus\u00edme p\u0159edstavovat. Tak\u017ee jak je to s t\u011bmi \"objekty\"? V\u0161echno v Pythonu je objekt . Z\u00e1kladn\u00ed vlastnost objekt\u016f (v programu) je to, \u017ee obsahuj\u00ed jak data (informace), tak p\u0159edpis chov\u00e1n\u00ed \u2013 instrukce nebo metody, kter\u00e9 s t\u011bmito daty pracuj\u00ed. U sv\u00edtiv\u00e9 diody budou data (vlastnosti / property) 1 nebo 0 - podle toho, jestli sv\u00edt\u00ed nebo nesv\u00edt\u00ed. A metoda bude t\u0159eba blikni nebo v p\u0159\u00edpad\u011b svi\u0165 je to p\u0159esn\u011bji: zm\u011b\u0148 hodnotu (value) na 1 value(1) nebo pro zhasni je to: zm\u011b\u0148 hodnotu na 0 value(0) . P\u0159edpis objektu je ve t\u0159\u00edd\u011b class() . Podle tohoto p\u0159edpisu vytv\u00e1\u0159\u00edme takzvanou instanci, do z\u00e1vorek se d\u00e1vaj\u00ed p\u0159\u00edpadn\u00e9 vstupn\u00ed parametry. Na PINU 2 m\u00e1me p\u0159ipojenu LED a chceme s n\u00ed pracovat pomoc\u00ed dostupn\u00fdch metod pro t\u0159\u00eddu Led? Mikrokontrol\u00e9ru to \u0159ekneme takto: led = Led(2) Co\u017e znamen\u00e1: vytvo\u0159 novou instanci led podle vzoru Led s parametrem 2 (co\u017e je \u010d\u00edslo PINu, na kter\u00e9m tuto ledku chceme m\u00edt). Je vhodn\u00e9 dodr\u017eet nepsan\u00e9 pravilo, \u017ee t\u0159\u00edda za\u010d\u00edn\u00e1 v\u017edy velk\u00fdm p\u00edsmenem . Abychom odli\u0161ili led od Led led.value(1) Syntaxe je pak: instance objektu led \"te\u010dka\" metoda value \"( parametry )\" (1) , ze pouze 1 , mo\u017eno i True Chceme jinou Led? Na jin\u00e9m pinu? T\u0159eba druhou na PINu 33? Vytvo\u0159\u00edme instanci stejn\u00e9ho objektu: led2 = Led(33) > a pak j\u00ed pou\u017e\u00edv\u00e1me \"stejn\u011b\": led2.value(1) Na rozd\u00edl od prom\u011bnn\u00e9: a = 123 Metoda nebo funkce data z\u00edsk\u00e1 nebo na z\u00e1klad\u011b parametr\u016f zpracuje, prom\u011bnn\u00e1 je obsahuje . T\u0159\u00edda je jako formi\u010dka na v\u00e1no\u010dn\u00ed cukrov\u00ed. Kole\u010dko, Hv\u011bzdi\u010dka, Pras\u00e1tko - to je ur\u010den\u00ed tvaru. A instance jsou jednotliv\u00e9 kousky cukrov\u00ed touto formi\u010dkou vyroben\u00e9. M\u016f\u017eeme si vytvo\u0159it tucet hv\u011bzdi\u010dek, podobn\u00fdm zp\u016fsobem si m\u016f\u017eeme p\u0159ipojit v\u00edce LEDek (ka\u017edou na jin\u00e9m PINu) led1 = Led(20) led2 = Led(2) led3 = Led(33) rozsv\u00edcen\u00ed druh\u00e9 ledky je: led2.value(1) no a zhasnut\u00ed t\u0159et\u00ed je led3.value(0) Shrnut\u00ed: T\u00e9m\u011b\u0159 v\u0161e v Pythonu je objekt. Objekt je kolekce dat (prom\u011bnn\u00fdch) a metod (funkc\u00ed), kter\u00e9 s dan\u00fdmi daty pracuj\u00ed. Prototypem objekt\u016f jsou t\u0159\u00eddy , z nich\u017e jsou v\u0161echny objekty (\u010d\u00edsla, \u0159et\u011bzce, funkce, moduly, metody, atp) odvozeny coby instance .","title":"Class"},{"location":"class/#class","text":"","title":"Class"},{"location":"class/#magicke-slovo-trida-class-v-objektovem-programovani-oop","text":"Letm\u00fd \u00favod do objektov\u00e9ho programov\u00e1n\u00ed si nazna\u010d\u00edme na tradi\u010dn\u00edm hello world projektu: blik\u00e1n\u00ed ledky . Sv\u00edtiv\u00e1 dioda (LED) je mal\u00e1 sou\u010d\u00e1stka, kterou snad nemus\u00edme p\u0159edstavovat. Tak\u017ee jak je to s t\u011bmi \"objekty\"? V\u0161echno v Pythonu je objekt . Z\u00e1kladn\u00ed vlastnost objekt\u016f (v programu) je to, \u017ee obsahuj\u00ed jak data (informace), tak p\u0159edpis chov\u00e1n\u00ed \u2013 instrukce nebo metody, kter\u00e9 s t\u011bmito daty pracuj\u00ed. U sv\u00edtiv\u00e9 diody budou data (vlastnosti / property) 1 nebo 0 - podle toho, jestli sv\u00edt\u00ed nebo nesv\u00edt\u00ed. A metoda bude t\u0159eba blikni nebo v p\u0159\u00edpad\u011b svi\u0165 je to p\u0159esn\u011bji: zm\u011b\u0148 hodnotu (value) na 1 value(1) nebo pro zhasni je to: zm\u011b\u0148 hodnotu na 0 value(0) . P\u0159edpis objektu je ve t\u0159\u00edd\u011b class() . Podle tohoto p\u0159edpisu vytv\u00e1\u0159\u00edme takzvanou instanci, do z\u00e1vorek se d\u00e1vaj\u00ed p\u0159\u00edpadn\u00e9 vstupn\u00ed parametry. Na PINU 2 m\u00e1me p\u0159ipojenu LED a chceme s n\u00ed pracovat pomoc\u00ed dostupn\u00fdch metod pro t\u0159\u00eddu Led? Mikrokontrol\u00e9ru to \u0159ekneme takto: led = Led(2) Co\u017e znamen\u00e1: vytvo\u0159 novou instanci led podle vzoru Led s parametrem 2 (co\u017e je \u010d\u00edslo PINu, na kter\u00e9m tuto ledku chceme m\u00edt). Je vhodn\u00e9 dodr\u017eet nepsan\u00e9 pravilo, \u017ee t\u0159\u00edda za\u010d\u00edn\u00e1 v\u017edy velk\u00fdm p\u00edsmenem . Abychom odli\u0161ili led od Led led.value(1) Syntaxe je pak: instance objektu led \"te\u010dka\" metoda value \"( parametry )\" (1) , ze pouze 1 , mo\u017eno i True Chceme jinou Led? Na jin\u00e9m pinu? T\u0159eba druhou na PINu 33? Vytvo\u0159\u00edme instanci stejn\u00e9ho objektu: led2 = Led(33) > a pak j\u00ed pou\u017e\u00edv\u00e1me \"stejn\u011b\": led2.value(1) Na rozd\u00edl od prom\u011bnn\u00e9: a = 123 Metoda nebo funkce data z\u00edsk\u00e1 nebo na z\u00e1klad\u011b parametr\u016f zpracuje, prom\u011bnn\u00e1 je obsahuje . T\u0159\u00edda je jako formi\u010dka na v\u00e1no\u010dn\u00ed cukrov\u00ed. Kole\u010dko, Hv\u011bzdi\u010dka, Pras\u00e1tko - to je ur\u010den\u00ed tvaru. A instance jsou jednotliv\u00e9 kousky cukrov\u00ed touto formi\u010dkou vyroben\u00e9. M\u016f\u017eeme si vytvo\u0159it tucet hv\u011bzdi\u010dek, podobn\u00fdm zp\u016fsobem si m\u016f\u017eeme p\u0159ipojit v\u00edce LEDek (ka\u017edou na jin\u00e9m PINu) led1 = Led(20) led2 = Led(2) led3 = Led(33) rozsv\u00edcen\u00ed druh\u00e9 ledky je: led2.value(1) no a zhasnut\u00ed t\u0159et\u00ed je led3.value(0) Shrnut\u00ed: T\u00e9m\u011b\u0159 v\u0161e v Pythonu je objekt. Objekt je kolekce dat (prom\u011bnn\u00fdch) a metod (funkc\u00ed), kter\u00e9 s dan\u00fdmi daty pracuj\u00ed. Prototypem objekt\u016f jsou t\u0159\u00eddy , z nich\u017e jsou v\u0161echny objekty (\u010d\u00edsla, \u0159et\u011bzce, funkce, moduly, metody, atp) odvozeny coby instance .","title":"Magick\u00e9 slovo t\u0159\u00edda (class) v objektov\u00e9m programov\u00e1n\u00ed (OOP)"},{"location":"deployer/","text":"p \u0159 i p r a v u j e m e https://github.com/micro-deployer","title":"Deployer"},{"location":"displays/","text":"Zobrazovac\u00ed moduly - displeje Disp 7 Oled LCD Disp 8 TFT st7735 Nalezen\u00e9 knihovny a testy: https://blog.boochow.com/article/454678621.html https://github.com/boochow/MicroPython-ST7735 https://github.com/hosaka/micropython-st7735 https://github.com/AnthonyKNorman/MicroPython_ST7735","title":"logo Zobrazovac\u00ed moduly - displeje"},{"location":"displays/#zobrazovaci-moduly-displeje","text":"","title":"Zobrazovac\u00ed moduly - displeje"},{"location":"displays/#disp-7","text":"","title":"Disp 7"},{"location":"displays/#oled","text":"","title":"Oled"},{"location":"displays/#lcd","text":"","title":"LCD"},{"location":"displays/#disp-8","text":"","title":"Disp 8"},{"location":"displays/#tft-st7735","text":"Nalezen\u00e9 knihovny a testy: https://blog.boochow.com/article/454678621.html https://github.com/boochow/MicroPython-ST7735 https://github.com/hosaka/micropython-st7735 https://github.com/AnthonyKNorman/MicroPython_ST7735","title":"TFT st7735"},{"location":"esp-ide/","text":"ESP - IDE Tabulka n\u00e1stroj\u016f pro pr\u00e1ci s ESP flash uPy - \"Flashov\u00e1n\u00ed\" Micropythonu copy lib - kop\u00edrov\u00e1n\u00ed knihoven z extern\u00edho zdroje deploy /.py - cel\u00e9 \"setaven\u00ed\" konkr\u00e9tn\u00edho projektu Terminal - s\u00e9riov\u00fd termin\u00e1l pro pr\u00e1ci s ESP / REPL IDE - pokro\u010dilej\u0161\u00ed editor k\u00f3du (lib | *.py - p\u0159esun cel\u00fdch knihoven nebo jen d\u00edl\u010d\u00ed p\u0159esun soubor\u016f) - flash uPy - - copy lib - - deploy *.py - - Terminal - - IDE - esptool \u2705\u2705 ~ \u274c \u274c \u274c ampy \u274c \u2705 \u2705 \u274c \u274c putty \u274c \u274c \u274c \u2705 \u274c rshell \u274c \u2705 \u2705 \u2705\u2705 ~ pip \u274c \u2705 \u2705\u2705 \u274c \u274c FTP \u274c \u2705\u2705 \u2705 \u274c \u274c web_server \u274c ~ \u2705 \u2705 \u2705 Thonny \u2705 ~ \u2705 \u2705 \u2705 uPyCraft \u2705 ~ \u2705 \u2705 \u2705 EsPy ~ ~ \u2705 \u2705 \u2705 Mu ~ ~ \u2705 \u2705 \u2705 shell / editor \u274c \u274c \u2705 ~ ~ deployer \u274c \u2705 \u2705 ~ ~ Legenda: \u2705\u2705 ide\u00e1ln\u00ed | \u2705 vhodn\u00e9 | ~ pou\u017eiteln\u00e9 | \u274c nevhodn\u00e9 Ampy S programem ampy pracujeme v p\u0159\u00edkazov\u00e9 \u0159\u00e1dce sv\u00e9ho po\u010d\u00edta\u010de. Slou\u017e\u00ed pro \"vzd\u00e1lenou\" pr\u00e1ci s ESP po s\u00e9riov\u00e9 lince, kdy n\u00e1m umo\u017e\u0148uje p\u0159edev\u0161\u00edm p\u0159esouvat soubory do ESP put / z ESP get , vytv\u00e1\u0159et adres\u00e1\u0159e mkdir a podobn\u011b. Pozor na kolize portu - ampy nesm\u00ed b\u00fdt blokov\u00e1no s\u00e9riov\u00fdm termin\u00e1lem (screen nebo putty ). Instalace Pro pou\u017e\u00edv\u00e1n\u00ed ampy mus\u00edte m\u00edt nainstalov\u00e1n Python3. Windows: Instalace Pythonu \u2013 hezky pops\u00e1no na https://naucse.python.cz/course/pyladies/beginners/install/ Linux: Python b\u00fdv\u00e1 u\u017e sou\u010d\u00e1st\u00ed z\u00e1kladn\u00ed instalace Instalace ampy p\u0159es pip : pip install adafruit-ampy pip install adafruit-ampy --upgrade P\u0159\u00edkazy ampy --help ampy --version \u00a8 Klasick\u00e9mu shellu podobn\u00e9: get ls mkdir put reset rm rmdir run Hlavn\u00ed p\u0159\u00edkaz put Pozor N\u00e1sleduj\u00edc\u00ed uk\u00e1zky jsou pro Win, kde jsme detekovali port COM6 . Stejn\u011b tak by to mohl b\u00fdt jin\u00fd port nebo na jin\u00fdch opera\u010dn\u00edch syst\u00e9mech to bude obdobn\u011b. T\u0159eba pro Linux to b\u00fdv\u00e1 /dev/ttyUSB0 . ampy -p /COM6 ls ampy -p /COM6 put main.py ampy -p /COM6 mkdir config ampy -p /COM6 mkdir utils ampy -p /COM6 put ./shell/__init__.py shell/__init__.py ampy -p /COM6 mkdir lib ampy -p /COM6 put ./lib/max7219_8digit.py lib/max7219_8digit.py ampy -p /COM6 put ./lib/ssd1306.py lib/ssd1306.py ... rshell Alternativa k ampy nebo Thony se s\u00e9riov\u00fdm termin\u00e1lem screen pro Linux (b\u011b\u017e\u00ed i na Raspberry Pi). Ke sta\u017een\u00ed \ud83e\udc52 github.com/dhylands/rshell . Instalace sudo pip3 install rshell P\u0159ipojen\u00ed a spu\u0161t\u011bn\u00ed rshell --buffer-size=30 -p /dev/ttyUSB0 V\u00fdchoz\u00ed cesta k p\u0159ipojen\u00e9 desce je /pyboard . Mo\u017enost nastaven\u00ed editoru dal\u0161\u00edm parametrem: - e nano , nano je i v\u00fdchoz\u00ed (Linux). Z\u00e1kladn\u00ed p\u0159\u00edkazy Podbn\u00e9 Linuxu: ls (list) a cp (copy file). > ls /pyboard > cp myfile.py /pyboard > cd ... > edit /pyboard/main.py ... > rsync . /pyboard ... > exit Termin\u00e1l + REPL Plnohodnotn\u00fd a stabiln\u011bj\u0161\u00ed s\u00e9riov\u00fd termin\u00e1l pro REPL se pust\u00ed snadno p\u0159\u00edkazem repl : > repl Pro ukon\u010den\u00ed pr\u00e1ce s termin\u00e1lem (exit: CTRL+X ) - zp\u011bt do rshellu. PIP Hesla: PIP| upip | pypi Pracujeme na vlastn\u00edch \"instala\u010dn\u00edch bal\u00ed\u010dc\u00edch\" (packages) pro Roz\u0161\u00ed\u0159en\u00ed MicroPythonu . Tyto bal\u00ed\u010dky se nej\u010dast\u011bji instaluj\u00ed pomoc\u00ed pip ( package installer for Python ), p\u0159esn\u011bji upip (pro Micropython). Chceme pou\u017e\u00edvat pypi ( the Python Package Index ) na str\u00e1nk\u00e1ch \ud83e\udc52 pypi.org/ . micropython-octopus-installer Z\u00e1kladn\u00edm instala\u010dn\u00edm bal\u00ed\u010dkem je micropython-octopus-installer , nahrazuj\u00edc\u00ed octopus_initial.setup() v \"lite\" verzi. \ud83e\udc52 pipi.org/octopuslab-installer \ud83e\udc52 github.com/octopuslab-installer \ud83e\udc52 Micropython pro ESP32. (Pou\u017e\u00edv\u00e1me zat\u00edm l\u00e9pe otestovanou verzi ESP-IDF v3.x ) V t\u00e9to z\u00e1kladn\u00ed (vanilla) verzi Micropythonu sta\u010d\u00ed prov\u00e9st dva n\u00e1sleduj\u00edc\u00ed kroky: P\u0159ipojen\u00ed k WiFi M\u016f\u017eete pou\u017e\u00edt copy&paste cel\u00e9ho bloku popmoc\u00ed CTRL+E (nezapome\u0148te si vyplnit svoje ssid a heslo). import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') Instalace metody deploy() z octopuslab_installer import upip upip.install('micropython-octopuslab-installer') # wait for install from lib import octopuslab_installer octopuslab_installer.deploy() uPip \ud83e\udc52 micropython/packages >>> import upip >>> upip.help() upip - Simple PyPI package manager for MicroPython Usage: micropython -m upip install [-p <path>] <package>... | -r <requirements.txt> import upip; upip.install(package_or_list, [<path>]) If <path> is not given, packages will be installed into sys.path[1] (can be set from MICROPYPATH environment variable, if current system supports that). Current value of sys.path[1]: /lib Note: only MicroPython packages (usually, named micropython-*) are supported for installation, upip does not support arbitrary code in setup.py. Mo\u017enosti instalace dal\u0161\u00edch \"bal\u00ed\u010dk\u016f\" uv\u00e1d\u00edme v samostatn\u00e9 kapitole Roz\u0161\u00ed\u0159en\u00ed MicroPythonu . FTP FTP (File transfer protocol) - protokol pro p\u0159enos soubor\u016f mezi po\u010d\u00edta\u010di pomoc\u00ed po\u010d\u00edta\u010dov\u00e9 s\u00edt\u011b. P\u016fvodn\u00ed knihovna pro ESP8266 i ESP32 v z\u00e1kladu funguje. Pou\u017e\u00edv\u00e1me nap\u0159\u00edklad FTP plugin Total Commanderu (testov\u00e1no ve Win 10). Jednoduch\u00e1 verze - na ESP b\u011b\u017e\u00ed samostatn\u011b \"pouze\" FTP. Po p\u0159ipojen\u00ed k lok\u00e1ln\u00ed s\u00edti se spust\u00ed FTP a vyp\u00ed\u0161e IP adresu. >>> from utils.octopus_lib import w >>> w() # wifi connect >>> import ftp >>> ftp FTP Server started on 192.168.x.y # -> IP Spustit se d\u00e1 i ze setup() - p\u0159\u00edkazy cw -> ftp . Pou\u017eit\u00ed z Total commanderu V menu S\u00ed\u0165 se zvol\u00ed Protokol FTP - p\u0159ipojit kserveru (nebo p\u0159\u00edmo: CTRL-F ), co\u017e vyvol\u00e1 FTP okno, kde se zvol\u00ed Nov\u00e9 p\u0159ipojen\u00ed a vypln\u00ed do Hostilel [port] IP adresa, kterou v\u00e1m ESP ozn\u00e1lilo. (Nej\u010dast\u011bji 192.168. x.y , kde x y jsou konkr\u00e9tn\u00ed \u010d\u00edsla). Toto nastaven\u00ed si ulo\u017e\u00edme v poli N\u00e1zev relace nap\u0159\u00edklad pod n\u00e1zvem \"ESP32\". Pro jednor\u00e1zov\u00e9 p\u0159ipojen\u00ed sta\u010d\u00ed v menu S\u00ed\u0165 zvolit Protokol FTP - nov\u00e9 p\u0159ipojen\u00ed (nebo p\u0159\u00edmo: CTRL-N ) a zadat IP adresu. Pou\u017eit\u00ed v termin\u00e1lu Linuxu $ sudo apt-get install ftp $ ftp 192.168.x.y ftp> ls ... ftp> mput *.py ... ftp> prompt Zdrojov\u00e1 knihovna \ud83e\udc52 github.com/robert-hh/FTP-Server... Mo\u017enost b\u011bhu i v threadu a pod., zat\u00edm netestov\u00e1no. import uftpd uftpd.start() # uftpd.start([port = 21][, verbose = level]) Pou\u017eit\u00ed v projektech Po boot se stiskem tla\u010d\u00edtka BOOT / EN spust\u00ed ftp server , pokud tla\u010d\u00edtko stiknuto nen\u00ed, bude pokra\u010dovat standardn\u00ed program. from time import sleep from machine import Pin from utils.octopus_lib import w btnum = 0 button = Pin(0, Pin.IN) print(\"press button / CTRL+C or continue\") sleep(1) for i in range(12): print(\"-\",end=\"\") btnum += button.value() sleep(0.2) w() print() if (btnum > 0): print(\"button1 -> start FTP\") import ftp else: print(\"button0 -> continue\") # ... # your code: ... Vyu\u017eili jsme nap\u0159\u00edklad v uk\u00e1zce WiFi RGB lampi\u010dky , kde se dodate\u010dn\u011b mohou modifikovat parametry. Dal\u0161\u00ed inspirace: https://www.youtube.com/watch?v=a7DrFqqu-78&t=369s Thonny Alternativou k IDE + Ampy (i esptool ) je tento jednoduch\u00fd n\u00e1stroj (program b\u011b\u017e\u00edc\u00ed na PC). V prvn\u00edm vyd\u00e1n\u00ed byl tak\u0159ka nepou\u017eiteln\u00fd (a\u017e na p\u00e1r tutori\u00e1lov\u00fdch v\u00fdjimek), ale nov\u011bj\u0161\u00ed verze, po odstran\u011bn\u00ed \u0159ady z\u00e1sadn\u00edch nedostatk\u016f, u\u017e b\u011b\u017e\u00ed mnohem l\u00e9pe. Pro velmi jednoduch\u00e9 a pam\u011b\u0165ov\u011b nen\u00e1ro\u010dn\u00e9 pokusy funguje podle o\u010dek\u00e1v\u00e1n\u00ed, ale kdy\u017e chcete p\u0159ipojen\u00ed k WiFi a z\u00e1rove\u0148 BlueTooth, tak nejsp\u00ed\u0161 naraz\u00edte. Ob\u010das i b\u011b\u017e\u00edc\u00ed program znemo\u017en\u00ed korektn\u00ed start Thonny , a jeliko\u017e se tlu\u010de komunikace na s\u00e9riov\u00e9m portu, mus\u00edte si osvojit specifick\u00e9 rutiny, jak to provozovat. Pom\u00e1haj\u00ed opakovan\u00e9 restarty jak ESP tak Aplikace Thony, co\u017e nen\u00ed \u00fapln\u011b komfortn\u00ed , ale za zkou\u0161ku to stoj\u00ed. Nastaven\u00ed v Tools/Options/Interpreter , by m\u011blo b\u00fdt zvoleno v Interpreter MicroPython (ESP32) a v Port Va\u0161e USB p\u0159ipojen\u00ed k ESP - nap\u0159\u00edklad Silicon Labs CP210x USB to UART Bridge (COM6) . Pak v lev\u00e9m sloupci vid\u00edte i soubory dostupn\u00e9 v ESP, kter\u00e9 m\u016f\u017eete v hlavn\u00edm okn\u011b (horn\u00ed) editovat, v okn\u011b doln\u00edm pak b\u00fdv\u00e1 p\u0159ednastaven termin\u00e1l (shell). Tato speci\u00e1ln\u00ed aplikace Thonny - Python IDE for beginners , je ke sta\u017een\u00ed zde: \ud83e\udc52 https://thonny.org/ P\u00e1r (anglick\u00fdch) odkaz\u016f (ale nebojte se pou\u017e\u00edt google ): randomnerdtutorials.com/getting-started-thonny-micropython youtube.com/Saravanan... uPyCraft https://randomnerdtutorials.com/uPyCraftWindows Mu Dal\u0161\u00ed alternativn\u00ed IDE: https://codewith.mu/en/download EsPy https://github.com/jungervin/EsPy P\u0159ipravujeme: deployer","title":"Pr\u00e1ce s ESP"},{"location":"esp-ide/#esp-ide","text":"","title":"ESP - IDE"},{"location":"esp-ide/#tabulka-nastroju-pro-praci-s-esp","text":"flash uPy - \"Flashov\u00e1n\u00ed\" Micropythonu copy lib - kop\u00edrov\u00e1n\u00ed knihoven z extern\u00edho zdroje deploy /.py - cel\u00e9 \"setaven\u00ed\" konkr\u00e9tn\u00edho projektu Terminal - s\u00e9riov\u00fd termin\u00e1l pro pr\u00e1ci s ESP / REPL IDE - pokro\u010dilej\u0161\u00ed editor k\u00f3du (lib | *.py - p\u0159esun cel\u00fdch knihoven nebo jen d\u00edl\u010d\u00ed p\u0159esun soubor\u016f) - flash uPy - - copy lib - - deploy *.py - - Terminal - - IDE - esptool \u2705\u2705 ~ \u274c \u274c \u274c ampy \u274c \u2705 \u2705 \u274c \u274c putty \u274c \u274c \u274c \u2705 \u274c rshell \u274c \u2705 \u2705 \u2705\u2705 ~ pip \u274c \u2705 \u2705\u2705 \u274c \u274c FTP \u274c \u2705\u2705 \u2705 \u274c \u274c web_server \u274c ~ \u2705 \u2705 \u2705 Thonny \u2705 ~ \u2705 \u2705 \u2705 uPyCraft \u2705 ~ \u2705 \u2705 \u2705 EsPy ~ ~ \u2705 \u2705 \u2705 Mu ~ ~ \u2705 \u2705 \u2705 shell / editor \u274c \u274c \u2705 ~ ~ deployer \u274c \u2705 \u2705 ~ ~ Legenda: \u2705\u2705 ide\u00e1ln\u00ed | \u2705 vhodn\u00e9 | ~ pou\u017eiteln\u00e9 | \u274c nevhodn\u00e9","title":"Tabulka n\u00e1stroj\u016f pro pr\u00e1ci s ESP"},{"location":"esp-ide/#ampy","text":"S programem ampy pracujeme v p\u0159\u00edkazov\u00e9 \u0159\u00e1dce sv\u00e9ho po\u010d\u00edta\u010de. Slou\u017e\u00ed pro \"vzd\u00e1lenou\" pr\u00e1ci s ESP po s\u00e9riov\u00e9 lince, kdy n\u00e1m umo\u017e\u0148uje p\u0159edev\u0161\u00edm p\u0159esouvat soubory do ESP put / z ESP get , vytv\u00e1\u0159et adres\u00e1\u0159e mkdir a podobn\u011b. Pozor na kolize portu - ampy nesm\u00ed b\u00fdt blokov\u00e1no s\u00e9riov\u00fdm termin\u00e1lem (screen nebo putty ).","title":"Ampy"},{"location":"esp-ide/#instalace","text":"Pro pou\u017e\u00edv\u00e1n\u00ed ampy mus\u00edte m\u00edt nainstalov\u00e1n Python3. Windows: Instalace Pythonu \u2013 hezky pops\u00e1no na https://naucse.python.cz/course/pyladies/beginners/install/ Linux: Python b\u00fdv\u00e1 u\u017e sou\u010d\u00e1st\u00ed z\u00e1kladn\u00ed instalace Instalace ampy p\u0159es pip : pip install adafruit-ampy pip install adafruit-ampy --upgrade","title":"Instalace"},{"location":"esp-ide/#prikazy","text":"ampy --help ampy --version \u00a8 Klasick\u00e9mu shellu podobn\u00e9: get ls mkdir put reset rm rmdir run","title":"P\u0159\u00edkazy"},{"location":"esp-ide/#hlavni-prikaz-put","text":"Pozor N\u00e1sleduj\u00edc\u00ed uk\u00e1zky jsou pro Win, kde jsme detekovali port COM6 . Stejn\u011b tak by to mohl b\u00fdt jin\u00fd port nebo na jin\u00fdch opera\u010dn\u00edch syst\u00e9mech to bude obdobn\u011b. T\u0159eba pro Linux to b\u00fdv\u00e1 /dev/ttyUSB0 . ampy -p /COM6 ls ampy -p /COM6 put main.py ampy -p /COM6 mkdir config ampy -p /COM6 mkdir utils ampy -p /COM6 put ./shell/__init__.py shell/__init__.py ampy -p /COM6 mkdir lib ampy -p /COM6 put ./lib/max7219_8digit.py lib/max7219_8digit.py ampy -p /COM6 put ./lib/ssd1306.py lib/ssd1306.py ...","title":"Hlavn\u00ed p\u0159\u00edkaz put"},{"location":"esp-ide/#rshell","text":"Alternativa k ampy nebo Thony se s\u00e9riov\u00fdm termin\u00e1lem screen pro Linux (b\u011b\u017e\u00ed i na Raspberry Pi). Ke sta\u017een\u00ed \ud83e\udc52 github.com/dhylands/rshell .","title":"rshell"},{"location":"esp-ide/#instalace_1","text":"sudo pip3 install rshell","title":"Instalace"},{"location":"esp-ide/#pripojeni-a-spusteni","text":"rshell --buffer-size=30 -p /dev/ttyUSB0 V\u00fdchoz\u00ed cesta k p\u0159ipojen\u00e9 desce je /pyboard . Mo\u017enost nastaven\u00ed editoru dal\u0161\u00edm parametrem: - e nano , nano je i v\u00fdchoz\u00ed (Linux).","title":"P\u0159ipojen\u00ed a spu\u0161t\u011bn\u00ed"},{"location":"esp-ide/#zakladni-prikazy","text":"Podbn\u00e9 Linuxu: ls (list) a cp (copy file). > ls /pyboard > cp myfile.py /pyboard > cd ... > edit /pyboard/main.py ... > rsync . /pyboard ... > exit","title":"Z\u00e1kladn\u00ed p\u0159\u00edkazy"},{"location":"esp-ide/#terminal-repl","text":"Plnohodnotn\u00fd a stabiln\u011bj\u0161\u00ed s\u00e9riov\u00fd termin\u00e1l pro REPL se pust\u00ed snadno p\u0159\u00edkazem repl : > repl Pro ukon\u010den\u00ed pr\u00e1ce s termin\u00e1lem (exit: CTRL+X ) - zp\u011bt do rshellu.","title":"Termin\u00e1l + REPL"},{"location":"esp-ide/#pip","text":"Hesla: PIP| upip | pypi Pracujeme na vlastn\u00edch \"instala\u010dn\u00edch bal\u00ed\u010dc\u00edch\" (packages) pro Roz\u0161\u00ed\u0159en\u00ed MicroPythonu . Tyto bal\u00ed\u010dky se nej\u010dast\u011bji instaluj\u00ed pomoc\u00ed pip ( package installer for Python ), p\u0159esn\u011bji upip (pro Micropython). Chceme pou\u017e\u00edvat pypi ( the Python Package Index ) na str\u00e1nk\u00e1ch \ud83e\udc52 pypi.org/ .","title":"PIP"},{"location":"esp-ide/#micropython-octopus-installer","text":"Z\u00e1kladn\u00edm instala\u010dn\u00edm bal\u00ed\u010dkem je micropython-octopus-installer , nahrazuj\u00edc\u00ed octopus_initial.setup() v \"lite\" verzi. \ud83e\udc52 pipi.org/octopuslab-installer \ud83e\udc52 github.com/octopuslab-installer \ud83e\udc52 Micropython pro ESP32. (Pou\u017e\u00edv\u00e1me zat\u00edm l\u00e9pe otestovanou verzi ESP-IDF v3.x ) V t\u00e9to z\u00e1kladn\u00ed (vanilla) verzi Micropythonu sta\u010d\u00ed prov\u00e9st dva n\u00e1sleduj\u00edc\u00ed kroky: P\u0159ipojen\u00ed k WiFi M\u016f\u017eete pou\u017e\u00edt copy&paste cel\u00e9ho bloku popmoc\u00ed CTRL+E (nezapome\u0148te si vyplnit svoje ssid a heslo). import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') Instalace metody deploy() z octopuslab_installer import upip upip.install('micropython-octopuslab-installer') # wait for install from lib import octopuslab_installer octopuslab_installer.deploy()","title":"micropython-octopus-installer"},{"location":"esp-ide/#upip","text":"\ud83e\udc52 micropython/packages >>> import upip >>> upip.help() upip - Simple PyPI package manager for MicroPython Usage: micropython -m upip install [-p <path>] <package>... | -r <requirements.txt> import upip; upip.install(package_or_list, [<path>]) If <path> is not given, packages will be installed into sys.path[1] (can be set from MICROPYPATH environment variable, if current system supports that). Current value of sys.path[1]: /lib Note: only MicroPython packages (usually, named micropython-*) are supported for installation, upip does not support arbitrary code in setup.py. Mo\u017enosti instalace dal\u0161\u00edch \"bal\u00ed\u010dk\u016f\" uv\u00e1d\u00edme v samostatn\u00e9 kapitole Roz\u0161\u00ed\u0159en\u00ed MicroPythonu .","title":"uPip"},{"location":"esp-ide/#ftp","text":"FTP (File transfer protocol) - protokol pro p\u0159enos soubor\u016f mezi po\u010d\u00edta\u010di pomoc\u00ed po\u010d\u00edta\u010dov\u00e9 s\u00edt\u011b. P\u016fvodn\u00ed knihovna pro ESP8266 i ESP32 v z\u00e1kladu funguje. Pou\u017e\u00edv\u00e1me nap\u0159\u00edklad FTP plugin Total Commanderu (testov\u00e1no ve Win 10). Jednoduch\u00e1 verze - na ESP b\u011b\u017e\u00ed samostatn\u011b \"pouze\" FTP. Po p\u0159ipojen\u00ed k lok\u00e1ln\u00ed s\u00edti se spust\u00ed FTP a vyp\u00ed\u0161e IP adresu. >>> from utils.octopus_lib import w >>> w() # wifi connect >>> import ftp >>> ftp FTP Server started on 192.168.x.y # -> IP Spustit se d\u00e1 i ze setup() - p\u0159\u00edkazy cw -> ftp .","title":"FTP"},{"location":"esp-ide/#pouziti-z-total-commanderu","text":"V menu S\u00ed\u0165 se zvol\u00ed Protokol FTP - p\u0159ipojit kserveru (nebo p\u0159\u00edmo: CTRL-F ), co\u017e vyvol\u00e1 FTP okno, kde se zvol\u00ed Nov\u00e9 p\u0159ipojen\u00ed a vypln\u00ed do Hostilel [port] IP adresa, kterou v\u00e1m ESP ozn\u00e1lilo. (Nej\u010dast\u011bji 192.168. x.y , kde x y jsou konkr\u00e9tn\u00ed \u010d\u00edsla). Toto nastaven\u00ed si ulo\u017e\u00edme v poli N\u00e1zev relace nap\u0159\u00edklad pod n\u00e1zvem \"ESP32\". Pro jednor\u00e1zov\u00e9 p\u0159ipojen\u00ed sta\u010d\u00ed v menu S\u00ed\u0165 zvolit Protokol FTP - nov\u00e9 p\u0159ipojen\u00ed (nebo p\u0159\u00edmo: CTRL-N ) a zadat IP adresu.","title":"Pou\u017eit\u00ed z Total commanderu"},{"location":"esp-ide/#pouziti-v-terminalu-linuxu","text":"$ sudo apt-get install ftp $ ftp 192.168.x.y ftp> ls ... ftp> mput *.py ... ftp> prompt Zdrojov\u00e1 knihovna \ud83e\udc52 github.com/robert-hh/FTP-Server... Mo\u017enost b\u011bhu i v threadu a pod., zat\u00edm netestov\u00e1no. import uftpd uftpd.start() # uftpd.start([port = 21][, verbose = level])","title":"Pou\u017eit\u00ed v termin\u00e1lu Linuxu"},{"location":"esp-ide/#pouziti-v-projektech","text":"Po boot se stiskem tla\u010d\u00edtka BOOT / EN spust\u00ed ftp server , pokud tla\u010d\u00edtko stiknuto nen\u00ed, bude pokra\u010dovat standardn\u00ed program. from time import sleep from machine import Pin from utils.octopus_lib import w btnum = 0 button = Pin(0, Pin.IN) print(\"press button / CTRL+C or continue\") sleep(1) for i in range(12): print(\"-\",end=\"\") btnum += button.value() sleep(0.2) w() print() if (btnum > 0): print(\"button1 -> start FTP\") import ftp else: print(\"button0 -> continue\") # ... # your code: ... Vyu\u017eili jsme nap\u0159\u00edklad v uk\u00e1zce WiFi RGB lampi\u010dky , kde se dodate\u010dn\u011b mohou modifikovat parametry. Dal\u0161\u00ed inspirace: https://www.youtube.com/watch?v=a7DrFqqu-78&t=369s","title":"Pou\u017eit\u00ed v projektech"},{"location":"esp-ide/#thonny","text":"Alternativou k IDE + Ampy (i esptool ) je tento jednoduch\u00fd n\u00e1stroj (program b\u011b\u017e\u00edc\u00ed na PC). V prvn\u00edm vyd\u00e1n\u00ed byl tak\u0159ka nepou\u017eiteln\u00fd (a\u017e na p\u00e1r tutori\u00e1lov\u00fdch v\u00fdjimek), ale nov\u011bj\u0161\u00ed verze, po odstran\u011bn\u00ed \u0159ady z\u00e1sadn\u00edch nedostatk\u016f, u\u017e b\u011b\u017e\u00ed mnohem l\u00e9pe. Pro velmi jednoduch\u00e9 a pam\u011b\u0165ov\u011b nen\u00e1ro\u010dn\u00e9 pokusy funguje podle o\u010dek\u00e1v\u00e1n\u00ed, ale kdy\u017e chcete p\u0159ipojen\u00ed k WiFi a z\u00e1rove\u0148 BlueTooth, tak nejsp\u00ed\u0161 naraz\u00edte. Ob\u010das i b\u011b\u017e\u00edc\u00ed program znemo\u017en\u00ed korektn\u00ed start Thonny , a jeliko\u017e se tlu\u010de komunikace na s\u00e9riov\u00e9m portu, mus\u00edte si osvojit specifick\u00e9 rutiny, jak to provozovat. Pom\u00e1haj\u00ed opakovan\u00e9 restarty jak ESP tak Aplikace Thony, co\u017e nen\u00ed \u00fapln\u011b komfortn\u00ed , ale za zkou\u0161ku to stoj\u00ed. Nastaven\u00ed v Tools/Options/Interpreter , by m\u011blo b\u00fdt zvoleno v Interpreter MicroPython (ESP32) a v Port Va\u0161e USB p\u0159ipojen\u00ed k ESP - nap\u0159\u00edklad Silicon Labs CP210x USB to UART Bridge (COM6) . Pak v lev\u00e9m sloupci vid\u00edte i soubory dostupn\u00e9 v ESP, kter\u00e9 m\u016f\u017eete v hlavn\u00edm okn\u011b (horn\u00ed) editovat, v okn\u011b doln\u00edm pak b\u00fdv\u00e1 p\u0159ednastaven termin\u00e1l (shell). Tato speci\u00e1ln\u00ed aplikace Thonny - Python IDE for beginners , je ke sta\u017een\u00ed zde: \ud83e\udc52 https://thonny.org/ P\u00e1r (anglick\u00fdch) odkaz\u016f (ale nebojte se pou\u017e\u00edt google ): randomnerdtutorials.com/getting-started-thonny-micropython youtube.com/Saravanan...","title":"Thonny"},{"location":"esp-ide/#upycraft","text":"https://randomnerdtutorials.com/uPyCraftWindows","title":"uPyCraft"},{"location":"esp-ide/#mu","text":"Dal\u0161\u00ed alternativn\u00ed IDE: https://codewith.mu/en/download","title":"Mu"},{"location":"esp-ide/#espy","text":"https://github.com/jungervin/EsPy P\u0159ipravujeme: deployer","title":"EsPy"},{"location":"esp32/","text":"ESP 32 ESP32 m\u00e1: dv\u011b CPU j\u00e1dra s nastavitelnou taktovac\u00ed frekvenc\u00ed do 240 MHz klasick\u00e9 Bluetooth i podporu Bluetooth Low Energy (BLE) 4MB Flash pam\u011b\u0165 3 bloky pam\u011bti RAM v celkov\u00e9 velikosti 520kB periferie zahrnuj\u00ed kapacitn\u00ed dotykov\u00e9 senzory, Hall\u016fv sn\u00edma\u010d, zesilova\u010d s n\u00edzk\u00fdm \u0161umem, rozhran\u00ed pro SD kartu, Ethernet, vysokorychlostn\u00ed SPI, UART, I2S a I2C Tak\u017ee m\u00e1 dostate\u010dn\u00fd v\u00fdkon, aby na n\u011bm mohl b\u011b\u017eet i robustn\u011bj\u0161\u00ed syst\u00e9m, jako je Micropython. Nej\u010dast\u011bji budeme pou\u017e\u00edvat dva z\u00e1kldan\u00ed moduly, s ESP32: Modul ESP32 DoIt 2x15 Modul OctopusLAB ESP32board Z\u00e1kladem je deska s polo\u0161n\u00fdmi spoji , kter\u00e1 se d\u00e1 (do)osadit n\u011bkolika zp\u016fsoby, podle projektu. Voliteln\u011b: p\u0159evodn\u00edk USB-UART (FTDI), roz\u0161\u00ed\u0159en\u00ed pam\u011bti RAM, dva druhy stabiliz\u00e1toru (klasick\u00fd pro nap\u00e1jen\u00ed ze zdroje, nebo \u00fasporn\u00fd pro nap\u00e1jen\u00ed za baterky - Li-ion nej\u010dast\u011bji)","title":"ESP32"},{"location":"esp32/#esp-32","text":"ESP32 m\u00e1: dv\u011b CPU j\u00e1dra s nastavitelnou taktovac\u00ed frekvenc\u00ed do 240 MHz klasick\u00e9 Bluetooth i podporu Bluetooth Low Energy (BLE) 4MB Flash pam\u011b\u0165 3 bloky pam\u011bti RAM v celkov\u00e9 velikosti 520kB periferie zahrnuj\u00ed kapacitn\u00ed dotykov\u00e9 senzory, Hall\u016fv sn\u00edma\u010d, zesilova\u010d s n\u00edzk\u00fdm \u0161umem, rozhran\u00ed pro SD kartu, Ethernet, vysokorychlostn\u00ed SPI, UART, I2S a I2C Tak\u017ee m\u00e1 dostate\u010dn\u00fd v\u00fdkon, aby na n\u011bm mohl b\u011b\u017eet i robustn\u011bj\u0161\u00ed syst\u00e9m, jako je Micropython. Nej\u010dast\u011bji budeme pou\u017e\u00edvat dva z\u00e1kldan\u00ed moduly, s ESP32:","title":"ESP 32"},{"location":"esp32/#modul-esp32-doit-2x15","text":"","title":"Modul ESP32 DoIt 2x15"},{"location":"esp32/#modul-octopuslab-esp32board","text":"Z\u00e1kladem je deska s polo\u0161n\u00fdmi spoji , kter\u00e1 se d\u00e1 (do)osadit n\u011bkolika zp\u016fsoby, podle projektu. Voliteln\u011b: p\u0159evodn\u00edk USB-UART (FTDI), roz\u0161\u00ed\u0159en\u00ed pam\u011bti RAM, dva druhy stabiliz\u00e1toru (klasick\u00fd pro nap\u00e1jen\u00ed ze zdroje, nebo \u00fasporn\u00fd pro nap\u00e1jen\u00ed za baterky - Li-ion nej\u010dast\u011bji)","title":"Modul OctopusLAB ESP32board"},{"location":"examples/","text":"OCTOPUS Examples - uk\u00e1zky \u2022 examples/x.py V souboru s n\u00e1zvem komponenty by m\u011bla b\u00fdt z\u00e1kladn\u00ed uk\u00e1zka, nej\u010dast\u011bji nejjednodu\u0161\u0161\u00ed nebo nejkrat\u0161\u00ed s vyu\u017eit\u00edm octopus workframe analog button dcmotor display7 ... pro mnoh\u00e9 element\u00e1rn\u00ed dvou\u0159\u00e1dkov\u00e9 \"n\u00e1vody\" ani samostatn\u00fd soubor uk\u00e1zky neexistuje. Nap\u0159\u00edklad pro led by vypadal takto: from components.led import Led led = Led(2) led.blink() A dal by se tedy snadno testovat i z p\u0159\u00edkazov\u00e9 \u0159\u00e1dky REPLu: >>> from components.led import Led >>> led = Led(2) >>> led.blink() # jednou blikne Traval\u00e9 blik\u00e1n\u00ed LEDkou? Uk\u00e1zkov\u00fd a testovac\u00ed p\u0159\u00edklad, kter\u00fd v nekone\u010dn\u00e9 smy\u010dce prov\u00e1d\u00ed blink() ... while True: led.blink() Cel\u00fd zdrojov\u00fd k\u00f3d je na Githubu /examples/blink.py a z emul\u00e1toru termin\u00e1lu se d\u00e1 spustit p\u0159\u00edkazem run examples/blink.py : >>> shell() uPyShell:~/$ run examples/blink.py \ud83e\udc52 Led \ud83e\udc52 UpyShell Podobn\u011b pak pro oled displej, inicializace p\u0159\u00edmo na displeji n\u011bco \"nap\u00ed\u0161e\": from utils.octopus import oled_init oled = oled_init() \ud83e\udc52 Oled \u2022 examples/x_basic.py uk\u00e1zka, kter\u00e1 ale podrobn\u011bji vysv\u011btl\u00ed pou\u017e\u00edt\u00ed obecn\u011bj\u0161\u00edho p\u0159\u00edstupu, naopak oproti p\u0159edchoz\u00edmu - je zcela bez vyu\u017eit\u00ed octopus workframe oled_basic ... (chyst\u00e1me dal\u0161\u00ed) \ud83e\udc52 Oled \u2022 examples/test_x.py Tyto uk\u00e1zky slou\u017e\u00ed z\u00e1rove\u0148 i jako soubor \"hardwarov\u00fdch\" test\u016f jednotliv\u00fdch komponent, a jsou vol\u00e1ny z testovac\u00edho adres\u00e1\u0159e tests . Vyzna\u010duj\u00ed se t\u00edm, \u017ee v\u017edy pouze jednou provedou n\u011bjakou akci nebo soubor akc\u00ed a pak program skon\u010d\u00ed, aby se p\u0159\u00edpadn\u011b mohlo pokra\u010dovat dal\u0161\u00edm. Nap\u0159\u00edklad pro otestov\u00e1n\u00ed EDU_KIT1 : vol\u00e1me soubor /tests/main-test_sw1.py kter\u00fd spou\u0161t\u00ed n\u00e1sleduj\u00edc\u00ed uk\u00e1zka/testy: import examples.test_esp32 import examples.test_led import examples.test_rgb import examples.test_display7 import examples.test_analog \u2022 eaxamples/subdir Specifick\u00e9 uk\u00e1zky jsou v podares\u00e1\u0159\u00edch: eaxamples/ble eaxamples/pubsub eaxamples/asyncio eaxamples/database eaxamples/param","title":"Examples - uk\u00e1zky"},{"location":"examples/#octopus-examples-ukazky","text":"","title":"OCTOPUS Examples - uk\u00e1zky"},{"location":"examples/#examplesxpy","text":"V souboru s n\u00e1zvem komponenty by m\u011bla b\u00fdt z\u00e1kladn\u00ed uk\u00e1zka, nej\u010dast\u011bji nejjednodu\u0161\u0161\u00ed nebo nejkrat\u0161\u00ed s vyu\u017eit\u00edm octopus workframe analog button dcmotor display7 ... pro mnoh\u00e9 element\u00e1rn\u00ed dvou\u0159\u00e1dkov\u00e9 \"n\u00e1vody\" ani samostatn\u00fd soubor uk\u00e1zky neexistuje. Nap\u0159\u00edklad pro led by vypadal takto: from components.led import Led led = Led(2) led.blink() A dal by se tedy snadno testovat i z p\u0159\u00edkazov\u00e9 \u0159\u00e1dky REPLu: >>> from components.led import Led >>> led = Led(2) >>> led.blink() # jednou blikne Traval\u00e9 blik\u00e1n\u00ed LEDkou? Uk\u00e1zkov\u00fd a testovac\u00ed p\u0159\u00edklad, kter\u00fd v nekone\u010dn\u00e9 smy\u010dce prov\u00e1d\u00ed blink() ... while True: led.blink() Cel\u00fd zdrojov\u00fd k\u00f3d je na Githubu /examples/blink.py a z emul\u00e1toru termin\u00e1lu se d\u00e1 spustit p\u0159\u00edkazem run examples/blink.py : >>> shell() uPyShell:~/$ run examples/blink.py \ud83e\udc52 Led \ud83e\udc52 UpyShell Podobn\u011b pak pro oled displej, inicializace p\u0159\u00edmo na displeji n\u011bco \"nap\u00ed\u0161e\": from utils.octopus import oled_init oled = oled_init() \ud83e\udc52 Oled","title":"\u2022 examples/x.py"},{"location":"examples/#examplesx_basicpy","text":"uk\u00e1zka, kter\u00e1 ale podrobn\u011bji vysv\u011btl\u00ed pou\u017e\u00edt\u00ed obecn\u011bj\u0161\u00edho p\u0159\u00edstupu, naopak oproti p\u0159edchoz\u00edmu - je zcela bez vyu\u017eit\u00ed octopus workframe oled_basic ... (chyst\u00e1me dal\u0161\u00ed) \ud83e\udc52 Oled","title":"\u2022 examples/x_basic.py"},{"location":"examples/#examplestest_xpy","text":"Tyto uk\u00e1zky slou\u017e\u00ed z\u00e1rove\u0148 i jako soubor \"hardwarov\u00fdch\" test\u016f jednotliv\u00fdch komponent, a jsou vol\u00e1ny z testovac\u00edho adres\u00e1\u0159e tests . Vyzna\u010duj\u00ed se t\u00edm, \u017ee v\u017edy pouze jednou provedou n\u011bjakou akci nebo soubor akc\u00ed a pak program skon\u010d\u00ed, aby se p\u0159\u00edpadn\u011b mohlo pokra\u010dovat dal\u0161\u00edm. Nap\u0159\u00edklad pro otestov\u00e1n\u00ed EDU_KIT1 : vol\u00e1me soubor /tests/main-test_sw1.py kter\u00fd spou\u0161t\u00ed n\u00e1sleduj\u00edc\u00ed uk\u00e1zka/testy: import examples.test_esp32 import examples.test_led import examples.test_rgb import examples.test_display7 import examples.test_analog","title":"\u2022 examples/test_x.py"},{"location":"examples/#eaxamplessubdir","text":"Specifick\u00e9 uk\u00e1zky jsou v podares\u00e1\u0159\u00edch: eaxamples/ble eaxamples/pubsub eaxamples/asyncio eaxamples/database eaxamples/param","title":"\u2022 eaxamples/subdir"},{"location":"extension/","text":"Roz\u0161\u00ed\u0159en\u00ed Micropythonu Mo\u017enost roz\u0161\u00ed\u0159en\u00ed Micropythonu o vlastn\u00ed moduly jsme si ji\u017e zm\u00ednili u octopus_initial.setup() . M\u00e1me v\u00edce mo\u017enost\u00ed, zm\u00edn\u00edme t\u0159i z\u00e1kladn\u00ed varianty. Roz\u0161\u00ed\u0159en\u00ed je implementov\u00e1no do samotn\u00e9ho Mictopythonu (co\u017e vyu\u017e\u00edv\u00e1me ve forku micropython-octopus). M\u00e1me mo\u017enost si p\u0159ihr\u00e1t vlastn\u00ed modul (nap\u0159\u00edklad do adres\u00e1\u0159e /lib ), co\u017e je nap\u0159\u00edklad cel\u00fd Octopus FrameWork . Varianta, na kterou se zam\u011b\u0159\u00edme je vyu\u017eit\u00ed pip (package installer for Python) v p\u0159\u00edpad\u011b Micropythonu upip . octopuslab_installer Pro instalci Octopus FrameWork vyu\u017e\u00edv\u00e1me metody deploy() z \"bal\u00ed\u010dku\" octopuslab_installer . ... WiFi conncect import upip upip.install('micropython-octopuslab-installer') # wait for install from lib import octopuslab_installer octopuslab_installer.deploy() itertools V \"dosp\u011bl\u00e9m\" Pythonu existuje \"modul\" itertools, kter\u00fd umo\u017en\u00ed pokro\u010dilej\u0161\u00ed pr\u00e1ci s \"iter\u00e1tory\". Nap\u0159\u00edklad podle n\u00e1sleduj\u00edc\u00ed uk\u00e1zky vyu\u017e\u00edv\u00e1me metodu cycle() s mo\u017enost\u00ed next() : import itertools as it players = [\"John\", \"Alice\", \"Bob\"] player_choice = it.cycle(players) print(next(player_choice)) # John print(next(player_choice)) # Alice print(next(player_choice)) # Bob print(next(player_choice)) # John print(next(player_choice)) # Alice ... V Micropythonu itertools nenajdeme, ale na\u0161t\u011bst\u00ed existuje mo\u017enost snadn\u00e9 instalace upip.install(\"micropython-???\") : ... WiFi conncect >>> import upip >>> upip.install('micropython-itertools') Installing to: /lib/ Warning: micropython.org SSL certificate is not validated Installing micropython-itertools 0.2.3 from https://micropython.org/pi/itertools/itertools-0.2.3.tar.gz N\u011bkter\u00e9 dal\u0161\u00ed moduly (ok) testov\u00e1no a zd\u00e1 se funk\u010dn\u00ed | (+) zkou\u0161eno a n\u011bco tam nefunguje https://libraries.io/pypi/micropython-sqlite3 (+) https://pypi.org/project/micropython-itertools/ (ok) https://libraries.io/pypi/micropython-vec vectors (ok) https://pypi.org/project/micropython-wifimanager/ https://pypi.org/project/micropython-wifi-setup/ https://pypi.org/project/micropython-mailbox/ https://pypi.org/project/micropython-email.utils/ https://pypi.org/project/micropython-mqtt/ https://pypi.org/project/micropython-umqtt.simple/ https://pypi.org/project/micropython-mqtt-async/ https://pypi.org/project/micropython-umqtt.robust/ https://pypi.org/project/micropython-uaiohttpclient/ https://pypi.org/project/micropython-bme280/ (ok) https://pypi.org/project/micropython-dht12/ sensor https://pypi.org/project/micropython-pcf8591/ i2c (4x A/D, 1x D/A) https://pypi.org/project/micropython-mpu6886/ gyroskop https://pypi.org/project/micropython-ssd1306/ oled https://pypi.org/project/micropython-pcd8544/ nokia displ. https://libraries.io/pypi/micropython-rfsocket \u010c\u00e1st knihoven m\u00e1 zdroj na githubu v \ud83e\udc52 micropython/micropython-lib , ostatn\u00ed jsou d\u00edlem \"t\u0159et\u00edch stran\".","title":"Roz\u0161\u00ed\u0159en\u00ed "},{"location":"extension/#rozsireni-micropythonu","text":"Mo\u017enost roz\u0161\u00ed\u0159en\u00ed Micropythonu o vlastn\u00ed moduly jsme si ji\u017e zm\u00ednili u octopus_initial.setup() . M\u00e1me v\u00edce mo\u017enost\u00ed, zm\u00edn\u00edme t\u0159i z\u00e1kladn\u00ed varianty. Roz\u0161\u00ed\u0159en\u00ed je implementov\u00e1no do samotn\u00e9ho Mictopythonu (co\u017e vyu\u017e\u00edv\u00e1me ve forku micropython-octopus). M\u00e1me mo\u017enost si p\u0159ihr\u00e1t vlastn\u00ed modul (nap\u0159\u00edklad do adres\u00e1\u0159e /lib ), co\u017e je nap\u0159\u00edklad cel\u00fd Octopus FrameWork . Varianta, na kterou se zam\u011b\u0159\u00edme je vyu\u017eit\u00ed pip (package installer for Python) v p\u0159\u00edpad\u011b Micropythonu upip .","title":"Roz\u0161\u00ed\u0159en\u00ed Micropythonu"},{"location":"extension/#octopuslab_installer","text":"Pro instalci Octopus FrameWork vyu\u017e\u00edv\u00e1me metody deploy() z \"bal\u00ed\u010dku\" octopuslab_installer . ... WiFi conncect import upip upip.install('micropython-octopuslab-installer') # wait for install from lib import octopuslab_installer octopuslab_installer.deploy()","title":"octopuslab_installer"},{"location":"extension/#itertools","text":"V \"dosp\u011bl\u00e9m\" Pythonu existuje \"modul\" itertools, kter\u00fd umo\u017en\u00ed pokro\u010dilej\u0161\u00ed pr\u00e1ci s \"iter\u00e1tory\". Nap\u0159\u00edklad podle n\u00e1sleduj\u00edc\u00ed uk\u00e1zky vyu\u017e\u00edv\u00e1me metodu cycle() s mo\u017enost\u00ed next() : import itertools as it players = [\"John\", \"Alice\", \"Bob\"] player_choice = it.cycle(players) print(next(player_choice)) # John print(next(player_choice)) # Alice print(next(player_choice)) # Bob print(next(player_choice)) # John print(next(player_choice)) # Alice ... V Micropythonu itertools nenajdeme, ale na\u0161t\u011bst\u00ed existuje mo\u017enost snadn\u00e9 instalace upip.install(\"micropython-???\") : ... WiFi conncect >>> import upip >>> upip.install('micropython-itertools') Installing to: /lib/ Warning: micropython.org SSL certificate is not validated Installing micropython-itertools 0.2.3 from https://micropython.org/pi/itertools/itertools-0.2.3.tar.gz","title":"itertools"},{"location":"extension/#nektere-dalsi-moduly","text":"(ok) testov\u00e1no a zd\u00e1 se funk\u010dn\u00ed | (+) zkou\u0161eno a n\u011bco tam nefunguje https://libraries.io/pypi/micropython-sqlite3 (+) https://pypi.org/project/micropython-itertools/ (ok) https://libraries.io/pypi/micropython-vec vectors (ok) https://pypi.org/project/micropython-wifimanager/ https://pypi.org/project/micropython-wifi-setup/ https://pypi.org/project/micropython-mailbox/ https://pypi.org/project/micropython-email.utils/ https://pypi.org/project/micropython-mqtt/ https://pypi.org/project/micropython-umqtt.simple/ https://pypi.org/project/micropython-mqtt-async/ https://pypi.org/project/micropython-umqtt.robust/ https://pypi.org/project/micropython-uaiohttpclient/ https://pypi.org/project/micropython-bme280/ (ok) https://pypi.org/project/micropython-dht12/ sensor https://pypi.org/project/micropython-pcf8591/ i2c (4x A/D, 1x D/A) https://pypi.org/project/micropython-mpu6886/ gyroskop https://pypi.org/project/micropython-ssd1306/ oled https://pypi.org/project/micropython-pcd8544/ nokia displ. https://libraries.io/pypi/micropython-rfsocket \u010c\u00e1st knihoven m\u00e1 zdroj na githubu v \ud83e\udc52 micropython/micropython-lib , ostatn\u00ed jsou d\u00edlem \"t\u0159et\u00edch stran\".","title":"N\u011bkter\u00e9 dal\u0161\u00ed moduly"},{"location":"framework/","text":"Octopus FrameWork Framework Framework (aplika\u010dn\u00ed r\u00e1mec) je softwarov\u00e1 struktura, kter\u00e1 slou\u017e\u00ed jako podpora p\u0159i programov\u00e1n\u00ed a v\u00fdvoji a organizaci jin\u00fdch softwarov\u00fdch projekt\u016f. M\u016f\u017ee obsahovat podp\u016frn\u00e9 programy, knihovny API, podporu pro n\u00e1vrhov\u00e9 vzory nebo doporu\u010den\u00e9 postupy p\u0159i v\u00fdvoji. (Zdroj: Wikipedia) 1. Micropython +-------------+ | MicroPython | +----+--------+ | +--- Vanilla ---> micropython-octopus-installer -+ | | +--- Octopus ------+-----------------------------+ | | >>> octopus_initial.setup() 2. Setup >>> setup() WiFi FTP ... Podrobn\u011bj\u0161\u00ed popis na samostatn\u00e9 str\u00e1nce setup . 3. UpyShell >>> shell() uPyShell:~/$ Mal\u00fd modul, kter\u00e9 se na prvn\u00ed pohled chov\u00e1 jako klasick\u00fd Linuxov\u00fd shell (p\u0159\u00edkazov\u00e1 \u0159\u00e1dka v termin\u00e1lu pro pr\u00e1ci se soubory a pod.) Podrobn\u011bj\u0161\u00ed popis je na samostatn\u00e9 str\u00e1nce upyshell . 4. Editor uPyShell:~/$ edit examples/file.py Jednoduch\u00fd \u0159\u00e1dkov\u00fd editor testov\u00fdch soubor\u016f (zdrojov\u00fdch k\u00f3d\u016f). 5. Components / Utils config pubsub datab\u00e1ze BLE ... 6. Webserver Ne ESP32 se d\u00e1 spustit jednoduch\u00fd webov\u00fd server. V lok\u00e1ln\u00ed s\u00edti pak na dan\u00e9 IP adrese spust\u00edte klasickou webovou str\u00e1nku, p\u0159es kterou se s ESP d\u00e1 komunikovat. Podrobn\u011bj\u0161\u00ed popis je na samostatn\u00e9 str\u00e1nce webserver .","title":"Octopus Framework"},{"location":"framework/#octopus-framework","text":"Framework Framework (aplika\u010dn\u00ed r\u00e1mec) je softwarov\u00e1 struktura, kter\u00e1 slou\u017e\u00ed jako podpora p\u0159i programov\u00e1n\u00ed a v\u00fdvoji a organizaci jin\u00fdch softwarov\u00fdch projekt\u016f. M\u016f\u017ee obsahovat podp\u016frn\u00e9 programy, knihovny API, podporu pro n\u00e1vrhov\u00e9 vzory nebo doporu\u010den\u00e9 postupy p\u0159i v\u00fdvoji. (Zdroj: Wikipedia)","title":"Octopus FrameWork"},{"location":"framework/#1-micropython","text":"+-------------+ | MicroPython | +----+--------+ | +--- Vanilla ---> micropython-octopus-installer -+ | | +--- Octopus ------+-----------------------------+ | | >>> octopus_initial.setup()","title":"1. Micropython"},{"location":"framework/#2-setup","text":">>> setup() WiFi FTP ... Podrobn\u011bj\u0161\u00ed popis na samostatn\u00e9 str\u00e1nce setup .","title":"2. Setup"},{"location":"framework/#3-upyshell","text":">>> shell() uPyShell:~/$ Mal\u00fd modul, kter\u00e9 se na prvn\u00ed pohled chov\u00e1 jako klasick\u00fd Linuxov\u00fd shell (p\u0159\u00edkazov\u00e1 \u0159\u00e1dka v termin\u00e1lu pro pr\u00e1ci se soubory a pod.) Podrobn\u011bj\u0161\u00ed popis je na samostatn\u00e9 str\u00e1nce upyshell .","title":"3. UpyShell"},{"location":"framework/#4-editor","text":"uPyShell:~/$ edit examples/file.py Jednoduch\u00fd \u0159\u00e1dkov\u00fd editor testov\u00fdch soubor\u016f (zdrojov\u00fdch k\u00f3d\u016f).","title":"4. Editor"},{"location":"framework/#5-components-utils","text":"config pubsub datab\u00e1ze BLE ...","title":"5. Components / Utils"},{"location":"framework/#6-webserver","text":"Ne ESP32 se d\u00e1 spustit jednoduch\u00fd webov\u00fd server. V lok\u00e1ln\u00ed s\u00edti pak na dan\u00e9 IP adrese spust\u00edte klasickou webovou str\u00e1nku, p\u0159es kterou se s ESP d\u00e1 komunikovat. Podrobn\u011bj\u0161\u00ed popis je na samostatn\u00e9 str\u00e1nce webserver .","title":"6. Webserver"},{"location":"github/","text":"Co je to github a jak se s n\u00edm pracuje Git a Github Samostatn\u00fd \u010dl\u00e1nek \ud83e\udc52 www.octopuslab.cz/git-github \u2022 U\u017eivatelsk\u00fd \u00fa\u010det Pokud chcete aktivn\u011b p\u0159isp\u00edvat na Githubu, z\u00e1kladem je m\u00edt vytvo\u0159en u\u017eivatelsk\u00fd \u00fa\u010det. V\u0159ele V\u00e1m to doporu\u010dujeme. A budeme r\u00e1di, kdy\u017e n\u00e1m pom\u016f\u017eete vytv\u00e1\u0159et dokumentaci je\u0161t\u011b lep\u0161\u00ed. M\u016f\u017eete nejen testovat a zkou\u0161et n\u00e1\u0161 programov\u00fd k\u00f3d, ale m\u016f\u017eete inspirovat k jeho zlep\u0161en\u00ed, oprimalizaci a roz\u0161\u00ed\u0159en\u00ed. \u2022 Edit on GitHub V prav\u00e9m horm\u00edm rohu tohoto dokumentu si m\u016f\u017eete pov\u0161imnout \"tla\u010d\u00edtka\" Edit on GitHub , kter\u00e9 vede p\u0159\u00edmo na podklady k dan\u00e9 str\u00e1nce. P\u0159inejmen\u0161\u00edm n\u00e1m m\u016f\u017eete poslat zpr\u00e1vu, \u017ee n\u011bkde m\u00e1me chybu nebo podn\u011bt pro dopln\u011bn\u00ed. Nej\u010dast\u011bj\u0161\u00ed gitov\u00e9 v\u00fdrazy \u2022 git clone - Naklonov\u00e1n\u00ed repozit\u00e1\u0159e Ze zdrojov\u00e9ho repozit\u00e1\u0159e, jeho\u017e je zpravidla autorem n\u011bkdo jin\u00fd, vytv\u00e1\u0159\u00edme \"fork\". Ve\u0161ker\u00e9 \u00fapravy pak prov\u00e1d\u00edme \"u sebe\". \u2022 git push - Pos\u00edl\u00e1n\u00ed zm\u011bn \u2022 pull request - \u017d\u00e1dost o za\u010dlen\u011bn\u00ed \u2022 git pull - Aktualizace \u2022 issues - Hl\u00e1\u0161en\u00ed chyb Nejen chyb, vyu\u017e\u00edv\u00e1 se i pro podn\u011bty na zlep\u0161en\u00ed a \"ToDo\". ... Docs \u2022 Pro\u010d je dokumentace d\u016fle\u017eit\u00e1 Dokumentace m\u016f\u017ee b\u00fdt dobr\u00e1 nebo \u0161patn\u00e1. Nebo tak\u00e9 \u017e\u00e1dn\u00e1. My jsme se rozhodli m\u00edt ji co nejlep\u0161\u00ed. Proto\u017ee z vlastn\u00ed praxe v\u00edme, jak je d\u016fle\u017eit\u00e9 dostat se k relevantn\u00edm a aktu\u00e1ln\u00edm podklad\u016fm, uk\u00e1zk\u00e1m a popis\u016fm. \u2022 Pou\u017e\u00edv\u00e1me Markdown Markdown je zna\u010dkovac\u00ed jazyk , kter\u00fd slou\u017e\u00ed pro \u00fapravu prost\u00e9ho textu. Umo\u017e\u0148uje pomoc\u00ed jednoduch\u00fdch form\u00e1tovac\u00edch zna\u010dek vyzna\u010dit v textu nadpisy a seznamy, doplnit odkazy, obr\u00e1zky atd. C\u00edlem jazyka je, aby byl text dob\u0159e \u010diteln\u00fd a publikovateln\u00fd i v p\u016fvodn\u00edm form\u00e1tu prost\u00e9ho textu. Zdroj \ud83e\udc52 Wikipedia/Markdown","title":"Github "},{"location":"github/#co-je-to-github-a-jak-se-s-nim-pracuje","text":"","title":"Co je to github a jak se s n\u00edm pracuje"},{"location":"github/#git-a-github","text":"Samostatn\u00fd \u010dl\u00e1nek \ud83e\udc52 www.octopuslab.cz/git-github","title":"Git a Github"},{"location":"github/#uzivatelsky-ucet","text":"Pokud chcete aktivn\u011b p\u0159isp\u00edvat na Githubu, z\u00e1kladem je m\u00edt vytvo\u0159en u\u017eivatelsk\u00fd \u00fa\u010det. V\u0159ele V\u00e1m to doporu\u010dujeme. A budeme r\u00e1di, kdy\u017e n\u00e1m pom\u016f\u017eete vytv\u00e1\u0159et dokumentaci je\u0161t\u011b lep\u0161\u00ed. M\u016f\u017eete nejen testovat a zkou\u0161et n\u00e1\u0161 programov\u00fd k\u00f3d, ale m\u016f\u017eete inspirovat k jeho zlep\u0161en\u00ed, oprimalizaci a roz\u0161\u00ed\u0159en\u00ed.","title":"\u2022 U\u017eivatelsk\u00fd \u00fa\u010det"},{"location":"github/#edit-on-github","text":"V prav\u00e9m horm\u00edm rohu tohoto dokumentu si m\u016f\u017eete pov\u0161imnout \"tla\u010d\u00edtka\" Edit on GitHub , kter\u00e9 vede p\u0159\u00edmo na podklady k dan\u00e9 str\u00e1nce. P\u0159inejmen\u0161\u00edm n\u00e1m m\u016f\u017eete poslat zpr\u00e1vu, \u017ee n\u011bkde m\u00e1me chybu nebo podn\u011bt pro dopln\u011bn\u00ed.","title":"\u2022 Edit on GitHub"},{"location":"github/#nejcastejsi-gitove-vyrazy","text":"","title":"Nej\u010dast\u011bj\u0161\u00ed gitov\u00e9 v\u00fdrazy"},{"location":"github/#git-clone-naklonovani-repozitare","text":"Ze zdrojov\u00e9ho repozit\u00e1\u0159e, jeho\u017e je zpravidla autorem n\u011bkdo jin\u00fd, vytv\u00e1\u0159\u00edme \"fork\". Ve\u0161ker\u00e9 \u00fapravy pak prov\u00e1d\u00edme \"u sebe\".","title":"\u2022 git clone - Naklonov\u00e1n\u00ed repozit\u00e1\u0159e"},{"location":"github/#git-push-posilani-zmen","text":"","title":"\u2022 git push - Pos\u00edl\u00e1n\u00ed zm\u011bn"},{"location":"github/#pull-request-zadost-o-zacleneni","text":"","title":"\u2022 pull request - \u017d\u00e1dost o za\u010dlen\u011bn\u00ed"},{"location":"github/#git-pull-aktualizace","text":"","title":"\u2022 git pull - Aktualizace"},{"location":"github/#issues-hlaseni-chyb","text":"Nejen chyb, vyu\u017e\u00edv\u00e1 se i pro podn\u011bty na zlep\u0161en\u00ed a \"ToDo\". ...","title":"\u2022 issues - Hl\u00e1\u0161en\u00ed chyb"},{"location":"github/#docs","text":"","title":"Docs"},{"location":"github/#proc-je-dokumentace-dulezita","text":"Dokumentace m\u016f\u017ee b\u00fdt dobr\u00e1 nebo \u0161patn\u00e1. Nebo tak\u00e9 \u017e\u00e1dn\u00e1. My jsme se rozhodli m\u00edt ji co nejlep\u0161\u00ed. Proto\u017ee z vlastn\u00ed praxe v\u00edme, jak je d\u016fle\u017eit\u00e9 dostat se k relevantn\u00edm a aktu\u00e1ln\u00edm podklad\u016fm, uk\u00e1zk\u00e1m a popis\u016fm.","title":"\u2022 Pro\u010d je dokumentace d\u016fle\u017eit\u00e1"},{"location":"github/#pouzivame-markdown","text":"Markdown je zna\u010dkovac\u00ed jazyk , kter\u00fd slou\u017e\u00ed pro \u00fapravu prost\u00e9ho textu. Umo\u017e\u0148uje pomoc\u00ed jednoduch\u00fdch form\u00e1tovac\u00edch zna\u010dek vyzna\u010dit v textu nadpisy a seznamy, doplnit odkazy, obr\u00e1zky atd. C\u00edlem jazyka je, aby byl text dob\u0159e \u010diteln\u00fd a publikovateln\u00fd i v p\u016fvodn\u00edm form\u00e1tu prost\u00e9ho textu. Zdroj \ud83e\udc52 Wikipedia/Markdown","title":"\u2022 Pou\u017e\u00edv\u00e1me Markdown"},{"location":"install/","text":"Instalace syst\u00e9mu - spole\u010dn\u00e1 \u010d\u00e1st Note Cel\u00fd proces je rozd\u011blen do t\u0159\u00ed blok\u016f Instalaci MicroPythonu do ESP32 \u0159\u00edk\u00e1me flashov\u00e1n\u00ed . (\"Nafle\u0161ovat\" znamen\u00e1 nahr\u00e1t do vnit\u0159n\u00ed flash pam\u011bti ESP.) Postup se li\u0161\u00ed podle toho, jak\u00fd pou\u017e\u00edv\u00e1te po\u010d\u00edta\u010d a opera\u010dn\u00ed syst\u00e9m, viz d\u00e1le - kroky 1 a 2. P\u0159\u00edprava po\u010d\u00edta\u010de \u010cerven\u00e1 \u0161ipka: Do po\u010d\u00edta\u010de st\u00e1hneme n\u00e1stroj esptool | python nebo exe Instalace Micropythonu do ESP Fialov\u00e9 \u0161ipky: Do po\u010d\u00edta\u010de st\u00e1hneme Micropython.bin (bin\u00e1rn\u00ed soubor) a pomoc\u00ed esptool ho nahrajeme do ESP Instalace Octopus FrameWork do ESP Zelen\u00e1 a oran\u017eov\u00e1: Pomoc\u00ed termin\u00e1lu ( screen nebo Putty ) dokon\u010d\u00edme instalaci dal\u0161\u00edch knihoven \"octopus framework\" 1. Instalace Micropythonu Prvn\u00ed dva body se li\u0161\u00ed podle pou\u017eit\u00e9 platformy (opera\u010dn\u00edho syst\u00e9mu): GNU/Linux Windows Mac_OS Pokud je na Va\u0161em ESP32 \u00fasp\u011b\u0161n\u011b nahr\u00e1n Micropython , m\u016f\u017eete pokra\u010dovat dal\u0161\u00edm krokem t\u0159i: 2. Prvn\u00ed spu\u0161t\u011bn\u00ed a instalace \"octopusLAB FrameWork\" Posledn\u00edmi kroky jsou: p\u0159ipojit se USB kabelem k za\u0159\u00edzen\u00ed - u\u017e v tomto kroku je mo\u017eno proj\u00edt si z\u00e1kladn\u00ed Tutorial1-python spustit setup - z prost\u0159ed\u00ed Micropythonu nastavit wifi, p\u0159ipojit se na wifi. st\u00e1hnout posledn\u00ed verzi Octopus FrameWork pomoc\u00ed octopus_initial.setup . (Cel\u00fd syst\u00e9m se stahuje z Internetu p\u0159\u00edmo do ESP32 p\u0159es WiFi.) \u2022 octopus_initial.setup() Pro uleh\u010den\u00ed instalace m\u00e1me vlastn\u00ed fork Micropythonu, do kter\u00e9ho jsme zaintegrovali mal\u00fd modul octopus_initial s metodou setup() . uPip Kdy\u017e chcete pou\u017e\u00edt z\u00e1kladn\u00ed (vanilla) verzi Micropythonu, m\u00e1te mo\u017enost st\u00e1hnout si \"lite\" verzi instal\u00e1toru i pomoc\u00ed uPip, kter\u00e1 p\u0159id\u00e1v\u00e1 lite modul micropython-octopuslab-installer s metodou deploy() . Podrobn\u011bji na samostatn\u00e9 str\u00e1nce \ud83e\udc52 upip . Vychyt\u00e1vka [TAB] Kdy\u017e chcete v Pythnou nebo Micropythonu n\u011bco napsat, nau\u010dte se vyu\u017e\u00edvat TABul\u00e1tor (kl\u00e1vesa TAB ). Kdy\u017e nap\u0159\u00edklad po promptu >>> chcete napsat octopus_initial.setup() , zkuste napsat pouze prvn\u00edch p\u00e1r p\u00edsmen a pak zm\u00e1\u010dknout TAB : >>> oc [TAB] a syst\u00e9m v\u00e1m dopln\u00ed nebo d\u00e1 vybrat. Stejn\u011b tak po te\u010dce: octopus_initial. sta\u010d\u00ed napsat se a pak TAB - a \"na\u0161ept\u00e1va\u010d\" automaticky dopln\u00ed setup (nezapome\u0148te na z\u00e1vorky () , je to metoda). >>> octopus_initial.setup() ,'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( ============================== S E T U P ============================== [w] - wifi submenu [cw] - connect wifi [cl] - connect LAN [sd] - system download [q] - quit setup ============================== select: Zvolte w [enter]. \u2022 Nastaven\u00ed WiFi: ============================== S E T U P - W I F I ============================== [a] - Add wifi network [r] - Remove wifi network [s] - Show configuration ============================== select: Zvolte a (add wifi) a stiskn\u011bte [enter] pro p\u0159id\u00e1n\u00ed va\u0161\u00ed wifi s\u00edt\u011b do za\u0159\u00edzen\u00ed a vypl\u0148te spr\u00e1vn\u011b: SSID: n\u00e1zev Va\u0161\u00ed wifi | PASSWORD: a heslo do n\u00ed. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed. \u2022 System download - Deploy Pro p\u0159ipojen\u00ed do Internetu se ve volb\u011b select: nap\u00ed\u0161e: cw (conect wifi) [enter] a ESP se p\u0159ipoj\u00ed k internetu. Pak u\u017e m\u016f\u017eeme zadat sd (system download - from url octopus) [enter], kter\u00e9 provede sta\u017een\u00ed TARu z na\u0161eho cloudu - v\u0161e se do ESP samo nahraje a rozbal\u00ed. Pr\u016fb\u011b\u017en\u011b uvid\u00edte v\u0161echny soubory (v\u010detn\u011b podadres\u00e1\u0159\u016f). Co obsahuje stable.tar Vybran\u00e9 knihovny, kter\u00e9 jsou ve\u0159ejn\u011b dostupn\u00e9 na github.com/octopusengine/octopuslab po na\u0161em otestov\u00e1n\u00ed jsou p\u0159evedeny do .mpy a ulo\u017eeny do souboru stable.tar , kter\u00fd je v na\u0161em cloudu (vzd\u00e1len\u00e9 internetov\u00e9 \u00falo\u017ei\u0161t\u011b) Uk\u00e1zka jak v octopusLABu \"kompilujeme\" .py do .mpy (to vy d\u011blat nemus\u00edte) ./precompile.sh Compile file deploy/lib/blesync_uart/__init__.py Compile file deploy/lib/blesync_uart/client.py Compile file deploy/lib/blesync_uart/server.py Compile file deploy/lib/blesync.py Compile file deploy/components/oled/__init__.py Compile file deploy/components/__init__.py Compile file ... ... \u2022 Examples - je adres\u00e1\u0159 pln\u00fd p\u0159\u00edklad\u016f Pokud si chcete nahr\u00e1t velk\u00fd bal\u00ed\u010dek uk\u00e1zek a test\u016f, m\u00e1me k dispozici op\u011bt \"zabalen\u00fd\" .tar soubor u n\u00e1s v cloudu. Provedeme reset za\u0159\u00edzen\u00ed. Pak spust\u00edme setup() a op\u011bt postupn\u011b cw (connect wifi) a tentokr\u00e1t sde (system download examples). V\u00edce o uk\u00e1zk\u00e1ch se dozv\u00edte v dokumentaci: /basicdoc/#octopus-examples . Setup - nastaven\u00ed syst\u00e9mu Pro n\u011bkter\u00e9 projekty a uk\u00e1zky mus\u00edme m\u00edt spr\u00e1vn\u011b nastavenou platformu (desku) a n\u011bkter\u00e9 dal\u0161\u00ed periferie. P\u0159\u00edkazem setup() nastavujeme i dal\u0161\u00ed WiFi s\u00edt\u011b. Cel\u00fd popis setup() je na samostatn\u00e9 str\u00e1nce \ud83e\udc52 setup . Pr\u00e1ce se soubory - uPyshell | Ampy | Thonny Pro p\u0159esouv\u00e1n\u00ed soubor\u016f do ESP m\u00e1me v\u00edc mo\u017enost\u00ed. Jednoduch\u00e9 \u00fapravy a p\u0159\u00edm\u00e9 kop\u00edrov\u00e1n\u00ed se daj\u00ed rovnou prov\u00e1d\u011bt v ESP pomoc\u00ed emul\u00e1toru uPyShell . Tam se d\u00e1 vyu\u017e\u00edt p\u0159\u00edkaz edit a pak cp . Je\u0161t\u011b je tu i mo\u017enost wget pro sta\u017een\u00ed libovoln\u00e9ho souboru z internetu. (pro wget mus\u00ed b\u00fdt vytvo\u0159en adres\u00e1\u0159 download - pomoc\u00ed p\u0159\u00edkazu mkdir ) Dal\u0161\u00ed varianta, kterou jsme d\u0159\u00edve vyu\u017e\u00edvali i pro deploy (sestaven\u00ed syst\u00e9mu) je program ampy , p\u0159\u00edmo ur\u010den\u00fd pro vzd\u00e1lenou pr\u00e1ci se soubory na ESP. Tomu se v\u011bnujeme ob\u0161\u00edrn\u011bji na samostatn\u00e9 str\u00e1nce \ud83e\udc52 ampy . Existuje jednoduch\u00e9 IDE s p\u0159\u00edm\u00fdm p\u0159ipojen\u00edm k ESP - op\u011bt v samostatn\u00e9m bloku \ud83e\udc52 Thonny . (Je k dispozici pro Win, Mac i Linux). Aplikace Thonny v posledn\u00edch verz\u00edch pro\u0161la \u0159adou zm\u011bn a tak si jist\u011b zaslou\u017e\u00ed Va\u0161\u00ed pozornost. Shrnut\u00ed Velmi zjednodu\u0161en\u011b: Instalace vanilla Micropythonu nebo forku OctopusLAB Micropythonu uPy je \u00favodn\u00ed \u010d\u00e1st\u00ed. D\u00e1le chceme instalovat Octopus LAB Frame Work , co\u017e je soubor knihoven lib (modul\u016f). A pak chceme pracovat s hlavn\u00edm programem main.py nebo dal\u0161\u00edmi knihovnami a moduly. P\u016fvodn\u00ed verze tohoto dokumentu je na https://www.octopuslab.cz/micropython-octopus/","title":"Spole\u010dn\u00e1 \u010d\u00e1st"},{"location":"install/#instalace-systemu-spolecna-cast","text":"Note Cel\u00fd proces je rozd\u011blen do t\u0159\u00ed blok\u016f Instalaci MicroPythonu do ESP32 \u0159\u00edk\u00e1me flashov\u00e1n\u00ed . (\"Nafle\u0161ovat\" znamen\u00e1 nahr\u00e1t do vnit\u0159n\u00ed flash pam\u011bti ESP.) Postup se li\u0161\u00ed podle toho, jak\u00fd pou\u017e\u00edv\u00e1te po\u010d\u00edta\u010d a opera\u010dn\u00ed syst\u00e9m, viz d\u00e1le - kroky 1 a 2.","title":"Instalace syst\u00e9mu - spole\u010dn\u00e1 \u010d\u00e1st"},{"location":"install/#priprava-pocitace","text":"\u010cerven\u00e1 \u0161ipka: Do po\u010d\u00edta\u010de st\u00e1hneme n\u00e1stroj esptool | python nebo exe","title":"P\u0159\u00edprava po\u010d\u00edta\u010de"},{"location":"install/#instalace-micropythonu-do-esp","text":"Fialov\u00e9 \u0161ipky: Do po\u010d\u00edta\u010de st\u00e1hneme Micropython.bin (bin\u00e1rn\u00ed soubor) a pomoc\u00ed esptool ho nahrajeme do ESP","title":"Instalace Micropythonu do ESP"},{"location":"install/#instalace-octopus-framework-do-esp","text":"Zelen\u00e1 a oran\u017eov\u00e1: Pomoc\u00ed termin\u00e1lu ( screen nebo Putty ) dokon\u010d\u00edme instalaci dal\u0161\u00edch knihoven \"octopus framework\"","title":"Instalace Octopus FrameWork do ESP"},{"location":"install/#1-instalace-micropythonu","text":"Prvn\u00ed dva body se li\u0161\u00ed podle pou\u017eit\u00e9 platformy (opera\u010dn\u00edho syst\u00e9mu): GNU/Linux Windows Mac_OS Pokud je na Va\u0161em ESP32 \u00fasp\u011b\u0161n\u011b nahr\u00e1n Micropython , m\u016f\u017eete pokra\u010dovat dal\u0161\u00edm krokem t\u0159i:","title":"1. Instalace Micropythonu"},{"location":"install/#2-prvni-spusteni-a-instalace-octopuslab-framework","text":"Posledn\u00edmi kroky jsou: p\u0159ipojit se USB kabelem k za\u0159\u00edzen\u00ed - u\u017e v tomto kroku je mo\u017eno proj\u00edt si z\u00e1kladn\u00ed Tutorial1-python spustit setup - z prost\u0159ed\u00ed Micropythonu nastavit wifi, p\u0159ipojit se na wifi. st\u00e1hnout posledn\u00ed verzi Octopus FrameWork pomoc\u00ed octopus_initial.setup . (Cel\u00fd syst\u00e9m se stahuje z Internetu p\u0159\u00edmo do ESP32 p\u0159es WiFi.)","title":"2. Prvn\u00ed spu\u0161t\u011bn\u00ed a instalace \"octopusLAB FrameWork\""},{"location":"install/#octopus_initialsetup","text":"Pro uleh\u010den\u00ed instalace m\u00e1me vlastn\u00ed fork Micropythonu, do kter\u00e9ho jsme zaintegrovali mal\u00fd modul octopus_initial s metodou setup() . uPip Kdy\u017e chcete pou\u017e\u00edt z\u00e1kladn\u00ed (vanilla) verzi Micropythonu, m\u00e1te mo\u017enost st\u00e1hnout si \"lite\" verzi instal\u00e1toru i pomoc\u00ed uPip, kter\u00e1 p\u0159id\u00e1v\u00e1 lite modul micropython-octopuslab-installer s metodou deploy() . Podrobn\u011bji na samostatn\u00e9 str\u00e1nce \ud83e\udc52 upip . Vychyt\u00e1vka [TAB] Kdy\u017e chcete v Pythnou nebo Micropythonu n\u011bco napsat, nau\u010dte se vyu\u017e\u00edvat TABul\u00e1tor (kl\u00e1vesa TAB ). Kdy\u017e nap\u0159\u00edklad po promptu >>> chcete napsat octopus_initial.setup() , zkuste napsat pouze prvn\u00edch p\u00e1r p\u00edsmen a pak zm\u00e1\u010dknout TAB : >>> oc [TAB] a syst\u00e9m v\u00e1m dopln\u00ed nebo d\u00e1 vybrat. Stejn\u011b tak po te\u010dce: octopus_initial. sta\u010d\u00ed napsat se a pak TAB - a \"na\u0161ept\u00e1va\u010d\" automaticky dopln\u00ed setup (nezapome\u0148te na z\u00e1vorky () , je to metoda). >>> octopus_initial.setup() ,'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( ============================== S E T U P ============================== [w] - wifi submenu [cw] - connect wifi [cl] - connect LAN [sd] - system download [q] - quit setup ============================== select: Zvolte w [enter].","title":"\u2022 octopus_initial.setup()"},{"location":"install/#nastaveni-wifi","text":"============================== S E T U P - W I F I ============================== [a] - Add wifi network [r] - Remove wifi network [s] - Show configuration ============================== select: Zvolte a (add wifi) a stiskn\u011bte [enter] pro p\u0159id\u00e1n\u00ed va\u0161\u00ed wifi s\u00edt\u011b do za\u0159\u00edzen\u00ed a vypl\u0148te spr\u00e1vn\u011b: SSID: n\u00e1zev Va\u0161\u00ed wifi | PASSWORD: a heslo do n\u00ed. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed.","title":"\u2022 Nastaven\u00ed WiFi:"},{"location":"install/#system-download-deploy","text":"Pro p\u0159ipojen\u00ed do Internetu se ve volb\u011b select: nap\u00ed\u0161e: cw (conect wifi) [enter] a ESP se p\u0159ipoj\u00ed k internetu. Pak u\u017e m\u016f\u017eeme zadat sd (system download - from url octopus) [enter], kter\u00e9 provede sta\u017een\u00ed TARu z na\u0161eho cloudu - v\u0161e se do ESP samo nahraje a rozbal\u00ed. Pr\u016fb\u011b\u017en\u011b uvid\u00edte v\u0161echny soubory (v\u010detn\u011b podadres\u00e1\u0159\u016f). Co obsahuje stable.tar Vybran\u00e9 knihovny, kter\u00e9 jsou ve\u0159ejn\u011b dostupn\u00e9 na github.com/octopusengine/octopuslab po na\u0161em otestov\u00e1n\u00ed jsou p\u0159evedeny do .mpy a ulo\u017eeny do souboru stable.tar , kter\u00fd je v na\u0161em cloudu (vzd\u00e1len\u00e9 internetov\u00e9 \u00falo\u017ei\u0161t\u011b) Uk\u00e1zka jak v octopusLABu \"kompilujeme\" .py do .mpy (to vy d\u011blat nemus\u00edte) ./precompile.sh Compile file deploy/lib/blesync_uart/__init__.py Compile file deploy/lib/blesync_uart/client.py Compile file deploy/lib/blesync_uart/server.py Compile file deploy/lib/blesync.py Compile file deploy/components/oled/__init__.py Compile file deploy/components/__init__.py Compile file ... ...","title":"\u2022 System download - Deploy"},{"location":"install/#examples-je-adresar-plny-prikladu","text":"Pokud si chcete nahr\u00e1t velk\u00fd bal\u00ed\u010dek uk\u00e1zek a test\u016f, m\u00e1me k dispozici op\u011bt \"zabalen\u00fd\" .tar soubor u n\u00e1s v cloudu. Provedeme reset za\u0159\u00edzen\u00ed. Pak spust\u00edme setup() a op\u011bt postupn\u011b cw (connect wifi) a tentokr\u00e1t sde (system download examples). V\u00edce o uk\u00e1zk\u00e1ch se dozv\u00edte v dokumentaci: /basicdoc/#octopus-examples .","title":"\u2022 Examples - je adres\u00e1\u0159 pln\u00fd p\u0159\u00edklad\u016f"},{"location":"install/#setup-nastaveni-systemu","text":"Pro n\u011bkter\u00e9 projekty a uk\u00e1zky mus\u00edme m\u00edt spr\u00e1vn\u011b nastavenou platformu (desku) a n\u011bkter\u00e9 dal\u0161\u00ed periferie. P\u0159\u00edkazem setup() nastavujeme i dal\u0161\u00ed WiFi s\u00edt\u011b. Cel\u00fd popis setup() je na samostatn\u00e9 str\u00e1nce \ud83e\udc52 setup .","title":"Setup - nastaven\u00ed syst\u00e9mu"},{"location":"install/#prace-se-soubory-upyshell-ampy-thonny","text":"Pro p\u0159esouv\u00e1n\u00ed soubor\u016f do ESP m\u00e1me v\u00edc mo\u017enost\u00ed. Jednoduch\u00e9 \u00fapravy a p\u0159\u00edm\u00e9 kop\u00edrov\u00e1n\u00ed se daj\u00ed rovnou prov\u00e1d\u011bt v ESP pomoc\u00ed emul\u00e1toru uPyShell . Tam se d\u00e1 vyu\u017e\u00edt p\u0159\u00edkaz edit a pak cp . Je\u0161t\u011b je tu i mo\u017enost wget pro sta\u017een\u00ed libovoln\u00e9ho souboru z internetu. (pro wget mus\u00ed b\u00fdt vytvo\u0159en adres\u00e1\u0159 download - pomoc\u00ed p\u0159\u00edkazu mkdir ) Dal\u0161\u00ed varianta, kterou jsme d\u0159\u00edve vyu\u017e\u00edvali i pro deploy (sestaven\u00ed syst\u00e9mu) je program ampy , p\u0159\u00edmo ur\u010den\u00fd pro vzd\u00e1lenou pr\u00e1ci se soubory na ESP. Tomu se v\u011bnujeme ob\u0161\u00edrn\u011bji na samostatn\u00e9 str\u00e1nce \ud83e\udc52 ampy . Existuje jednoduch\u00e9 IDE s p\u0159\u00edm\u00fdm p\u0159ipojen\u00edm k ESP - op\u011bt v samostatn\u00e9m bloku \ud83e\udc52 Thonny . (Je k dispozici pro Win, Mac i Linux). Aplikace Thonny v posledn\u00edch verz\u00edch pro\u0161la \u0159adou zm\u011bn a tak si jist\u011b zaslou\u017e\u00ed Va\u0161\u00ed pozornost.","title":"Pr\u00e1ce se soubory - uPyshell | Ampy | Thonny"},{"location":"install/#shrnuti","text":"Velmi zjednodu\u0161en\u011b: Instalace vanilla Micropythonu nebo forku OctopusLAB Micropythonu uPy je \u00favodn\u00ed \u010d\u00e1st\u00ed. D\u00e1le chceme instalovat Octopus LAB Frame Work , co\u017e je soubor knihoven lib (modul\u016f). A pak chceme pracovat s hlavn\u00edm programem main.py nebo dal\u0161\u00edmi knihovnami a moduly. P\u016fvodn\u00ed verze tohoto dokumentu je na https://www.octopuslab.cz/micropython-octopus/","title":"Shrnut\u00ed"},{"location":"install_linux/","text":"GNU/Linux Sta\u017een\u00ed Octopus MicroPython Pracujte v nov\u00e9m, pr\u00e1zdn\u00e9m adres\u00e1\u0159i, nap\u0159. projects/esp32 . Pro rychl\u00fd start pr\u00e1ce s knihovnami OctopusLab si st\u00e1hn\u011bte do pracovn\u00edho adres\u00e1\u0159e bin\u00e1rku Micropythonu s Octopus Micropython pro ESP32 https://octopusengine.org/download/micropython/micropython-octopus.bin - n\u00e1\u0161 fork ofici\u00e1ln\u00edho MicroPythonu Nyn\u00ed jde o zprovozn\u011bn\u00ed s\u00e9riov\u00e9 linky do za\u0159\u00edzen\u00ed a nainstalov\u00e1n\u00ed n\u00e1stroje esptool pro nahr\u00e1v\u00e1n\u00ed .bin soubor\u016f. Pro esptool je t\u0159eba m\u00edt nainstalovan\u00fd Python3 . Tyto instrukce jsou lad\u011bn\u00e9 pro Ubuntu 20.04, pokud pou\u017e\u00edv\u00e1te jinou distribuci, bude tento postup pravd\u011bpodobn\u011b tak\u00e9 fungovat. Termin\u00e1l Po p\u0159ipojen\u00ed ESP modulu p\u0159es kabel USB (typicky microUSB) se zp\u0159\u00edstupn\u00ed serial device, obvykle v /dev/ttyUSB0 . K seriov\u00e9 konzoli se m\u016f\u017eeme p\u0159ipojit pomoc\u00ed p\u0159\u00edkazu screen /dev/ttyUSB0 115200 Jak zjist\u00edm, zda se mi za\u0159\u00edzen\u00ed hl\u00e1s\u00ed jako /dev/ttyUSB0 ? pokud chcete n\u00e1zev za\u0159\u00edzen\u00ed zjistit, spus\u0165te v termin\u00e1lu dmesg -w p\u0159ed t\u00edm, ne\u017e p\u0159ipoj\u00edte USB kabel. Pokud kouk\u00e1te do pr\u00e1znd\u00e9 obrazovky s kurzorem vlevo naho\u0159e, je to spr\u00e1vn\u011b. Nyn\u00ed m\u00e1te nastartovan\u00fd screen na seriov\u00e9 lince, znamen\u00e1 to, \u017ee m\u00e1te n\u00edzko\u00farov\u0148ov\u00fd p\u0159\u00edstup k za\u0159\u00edzen\u00ed a m\u016f\u017eete ho tedy p\u0159eprogramovat (flashnout). Pokud p\u0159\u00edkaz kon\u010d\u00ed chybou opr\u00e1vn\u011bn\u00ed, p\u0159idejte va\u0161eho u\u017eivatele do skupiny dialout pomoc\u00ed p\u0159\u00edkazu sudo adduser <username> dialout - pozor pro na\u010dten\u00ed nov\u00fdch opr\u00e1vn\u011bn\u00ed se mus\u00edte odhl\u00e1sit a p\u0159ihl\u00e1sit (nesta\u010d\u00ed nov\u00e9 okno termin\u00e1lu) - pokud nev\u00edte, jak to ud\u011blat, tak po\u010d\u00edta\u010d restartujte. Vysko\u010den\u00ed z programu screen je lehce komplikovan\u00e9, mus\u00edte pou\u017e\u00edt sekvenci kl\u00e1vesov\u00fdch zkratek. Postupn\u011b zm\u00e1\u010dkn\u011bte CTRL+A a potom K . Dole se zobraz\u00ed prompt, zda chcete opravdu ukon\u010dit (kill), zm\u00e1\u010dkn\u011bte Y pro potvrzen\u00ed. Pokud ze screenu vysko\u010d\u00edte jinak, tak se v\u00e1m m\u016f\u017ee st\u00e1t, \u017ee z\u016fstane p\u0159ipojen\u00ed \"viset\" a nebudete moci nahr\u00e1vat soubory apod., proto\u017ee na s\u00e9riov\u00e9 lince m\u016f\u017ee b\u00fdt p\u0159ipojena pouze jedna aplikace, v takov\u00e9m p\u0159\u00edpad\u011b sta\u010d\u00ed vyt\u00e1hnout a zastr\u010dit USB kabel. Instalace n\u00e1stroje esptool (*1) N\u00e1stroj esptool budeme instalovat do Pythonov\u00e9ho virtualenvu - odd\u011bl\u00edme jej od syst\u00e9mu. python3 -m venv venv source venv/bin/activate pip install esptool Flashov\u00e1n\u00ed Octopus MicroPython (*3) cd projects/esp32 Aktivujte vytvo\u0159en\u00e9 virtu\u00e1ln\u00ed prost\u0159ed\u00ed. source venv/bin/activate Sta\u017een\u00ed aktu\u00e1ln\u00ed verze wget https://octopusengine.org/download/micropython/micropython-octopus.bin POZOR n\u00e1sleduj\u00edc\u00ed p\u0159\u00edklad je pro za\u0159\u00edzen\u00ed /dev/ttyUSB0 , zkontrolujte p\u0159es dmesg jak\u00e9 m\u00e1te za\u0159\u00edzen\u00ed, riskujete ztr\u00e1tu dat!\" esptool.py --chip esp32 -p /dev/ttyUSB0 erase_flash esptool.py --chip esp32 -p /dev/ttyUSB0 write_flash -z 0x1000 ./micropython-octopus.bin U n\u011bkter\u00fdch modul\u016f bude pro \u00fasp\u011b\u0161n\u00e9 proveden\u00ed prvn\u00edho p\u0159\u00edkazu t\u0159eba pro potvrzen\u00ed zm\u00e1\u010dnout tla\u010d\u00edtko BOOT . Po \u00fasp\u011b\u0161n\u00e9m naflashov\u00e1n\u00ed se zkuste p\u0159ipojit k MicroPython REPL p\u0159es s\u00e9riovou linku. screen /dev/ttyUSB0 115200 Pokud se na obrazovce nic nezobrazuje zm\u00e1\u010dn\u011bte ENTER a m\u011bl by se v\u00e1m zobrazit prompt interaktivn\u00edho Pythonu >>> . Gratulujeme, m\u00e1te funk\u010dn\u00ed MicroPython! D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Linux "},{"location":"install_linux/#gnulinux","text":"","title":"GNU/Linux"},{"location":"install_linux/#stazeni-octopus-micropython","text":"Pracujte v nov\u00e9m, pr\u00e1zdn\u00e9m adres\u00e1\u0159i, nap\u0159. projects/esp32 . Pro rychl\u00fd start pr\u00e1ce s knihovnami OctopusLab si st\u00e1hn\u011bte do pracovn\u00edho adres\u00e1\u0159e bin\u00e1rku Micropythonu s Octopus Micropython pro ESP32 https://octopusengine.org/download/micropython/micropython-octopus.bin - n\u00e1\u0161 fork ofici\u00e1ln\u00edho MicroPythonu Nyn\u00ed jde o zprovozn\u011bn\u00ed s\u00e9riov\u00e9 linky do za\u0159\u00edzen\u00ed a nainstalov\u00e1n\u00ed n\u00e1stroje esptool pro nahr\u00e1v\u00e1n\u00ed .bin soubor\u016f. Pro esptool je t\u0159eba m\u00edt nainstalovan\u00fd Python3 . Tyto instrukce jsou lad\u011bn\u00e9 pro Ubuntu 20.04, pokud pou\u017e\u00edv\u00e1te jinou distribuci, bude tento postup pravd\u011bpodobn\u011b tak\u00e9 fungovat.","title":"Sta\u017een\u00ed Octopus MicroPython"},{"location":"install_linux/#terminal","text":"Po p\u0159ipojen\u00ed ESP modulu p\u0159es kabel USB (typicky microUSB) se zp\u0159\u00edstupn\u00ed serial device, obvykle v /dev/ttyUSB0 . K seriov\u00e9 konzoli se m\u016f\u017eeme p\u0159ipojit pomoc\u00ed p\u0159\u00edkazu screen /dev/ttyUSB0 115200 Jak zjist\u00edm, zda se mi za\u0159\u00edzen\u00ed hl\u00e1s\u00ed jako /dev/ttyUSB0 ? pokud chcete n\u00e1zev za\u0159\u00edzen\u00ed zjistit, spus\u0165te v termin\u00e1lu dmesg -w p\u0159ed t\u00edm, ne\u017e p\u0159ipoj\u00edte USB kabel. Pokud kouk\u00e1te do pr\u00e1znd\u00e9 obrazovky s kurzorem vlevo naho\u0159e, je to spr\u00e1vn\u011b. Nyn\u00ed m\u00e1te nastartovan\u00fd screen na seriov\u00e9 lince, znamen\u00e1 to, \u017ee m\u00e1te n\u00edzko\u00farov\u0148ov\u00fd p\u0159\u00edstup k za\u0159\u00edzen\u00ed a m\u016f\u017eete ho tedy p\u0159eprogramovat (flashnout). Pokud p\u0159\u00edkaz kon\u010d\u00ed chybou opr\u00e1vn\u011bn\u00ed, p\u0159idejte va\u0161eho u\u017eivatele do skupiny dialout pomoc\u00ed p\u0159\u00edkazu sudo adduser <username> dialout - pozor pro na\u010dten\u00ed nov\u00fdch opr\u00e1vn\u011bn\u00ed se mus\u00edte odhl\u00e1sit a p\u0159ihl\u00e1sit (nesta\u010d\u00ed nov\u00e9 okno termin\u00e1lu) - pokud nev\u00edte, jak to ud\u011blat, tak po\u010d\u00edta\u010d restartujte. Vysko\u010den\u00ed z programu screen je lehce komplikovan\u00e9, mus\u00edte pou\u017e\u00edt sekvenci kl\u00e1vesov\u00fdch zkratek. Postupn\u011b zm\u00e1\u010dkn\u011bte CTRL+A a potom K . Dole se zobraz\u00ed prompt, zda chcete opravdu ukon\u010dit (kill), zm\u00e1\u010dkn\u011bte Y pro potvrzen\u00ed. Pokud ze screenu vysko\u010d\u00edte jinak, tak se v\u00e1m m\u016f\u017ee st\u00e1t, \u017ee z\u016fstane p\u0159ipojen\u00ed \"viset\" a nebudete moci nahr\u00e1vat soubory apod., proto\u017ee na s\u00e9riov\u00e9 lince m\u016f\u017ee b\u00fdt p\u0159ipojena pouze jedna aplikace, v takov\u00e9m p\u0159\u00edpad\u011b sta\u010d\u00ed vyt\u00e1hnout a zastr\u010dit USB kabel.","title":"Termin\u00e1l"},{"location":"install_linux/#instalace-nastroje-esptool","text":"(*1) N\u00e1stroj esptool budeme instalovat do Pythonov\u00e9ho virtualenvu - odd\u011bl\u00edme jej od syst\u00e9mu. python3 -m venv venv source venv/bin/activate pip install esptool","title":"Instalace n\u00e1stroje esptool"},{"location":"install_linux/#flashovani-octopus-micropython","text":"(*3) cd projects/esp32 Aktivujte vytvo\u0159en\u00e9 virtu\u00e1ln\u00ed prost\u0159ed\u00ed. source venv/bin/activate Sta\u017een\u00ed aktu\u00e1ln\u00ed verze wget https://octopusengine.org/download/micropython/micropython-octopus.bin POZOR n\u00e1sleduj\u00edc\u00ed p\u0159\u00edklad je pro za\u0159\u00edzen\u00ed /dev/ttyUSB0 , zkontrolujte p\u0159es dmesg jak\u00e9 m\u00e1te za\u0159\u00edzen\u00ed, riskujete ztr\u00e1tu dat!\" esptool.py --chip esp32 -p /dev/ttyUSB0 erase_flash esptool.py --chip esp32 -p /dev/ttyUSB0 write_flash -z 0x1000 ./micropython-octopus.bin U n\u011bkter\u00fdch modul\u016f bude pro \u00fasp\u011b\u0161n\u00e9 proveden\u00ed prvn\u00edho p\u0159\u00edkazu t\u0159eba pro potvrzen\u00ed zm\u00e1\u010dnout tla\u010d\u00edtko BOOT . Po \u00fasp\u011b\u0161n\u00e9m naflashov\u00e1n\u00ed se zkuste p\u0159ipojit k MicroPython REPL p\u0159es s\u00e9riovou linku. screen /dev/ttyUSB0 115200 Pokud se na obrazovce nic nezobrazuje zm\u00e1\u010dn\u011bte ENTER a m\u011bl by se v\u00e1m zobrazit prompt interaktivn\u00edho Pythonu >>> . Gratulujeme, m\u00e1te funk\u010dn\u00ed MicroPython! D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Flashov\u00e1n\u00ed Octopus MicroPython"},{"location":"install_mac/","text":"Mac P\u0159ipravujeme - z\u00e1klad je podobn\u00fd v\u00edce Linuxu, z p\u0159\u00edkazov\u00e9 \u0159\u00e1dky . Nejv\u011bt\u0161\u00ed z\u00e1drhel tam byla nutnost \"odklikat\" Security & Privacy , aby v\u00e1s to pustilo k portu. D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Mac "},{"location":"install_mac/#mac","text":"P\u0159ipravujeme - z\u00e1klad je podobn\u00fd v\u00edce Linuxu, z p\u0159\u00edkazov\u00e9 \u0159\u00e1dky . Nejv\u011bt\u0161\u00ed z\u00e1drhel tam byla nutnost \"odklikat\" Security & Privacy , aby v\u00e1s to pustilo k portu. D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Mac"},{"location":"install_win/","text":"Win Pro instalaci MicroPythonu na va\u0161e ESP32 je t\u0159eba \"naflashovat\" Micropython na n\u00e1\u0161 kontroler. Podrobn\u011bji si rozebereme n\u00e1sleduj\u00edc\u00ed kroky: Stru\u010dn\u011b: pracujeme st\u00e1le v jednom podadres\u00e1\u0159i, do kter\u00e9ho mus\u00edme: st\u00e1hnout a rozzipovat esptool.exe st\u00e1hnout Octopus Micropython pro ESP32 nebo vanilla Micropython p\u0159ipojit ESP a detekovat COM port pomoc\u00ed esptool p\u0159ehr\u00e1t Micropython na ESP st\u00e1hnout si putty.exe spustit putty a nastavit \"serial\", baudrate 115200 , a COM port reset ESP (mo\u017eno jen CTRL+C) a m\u011bli bychom v termin\u00e1lu putty vid\u011bt >>> a te\u010f jednotliv\u00e9 kroky podrobn\u011bji: 1. P\u0159\u00edprava po\u010d\u00edta\u010de Ve v\u0161ech p\u0159\u00edpadech (Linux i Mac) budeme pracovat v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku. Termin\u00e1lov\u00e9 okno se vyvol\u00e1 p\u0159\u00edkazem cmd . Po kliknut\u00ed na ikonu Windows ( WIN ) nap\u00ed\u0161eme cmd a m\u011bl by se n\u00e1m nab\u00eddnout \"program\" P\u0159\u00edkazov\u00fd \u0159\u00e1dek . Pracujte v nov\u00e9m, pr\u00e1zdn\u00e9m adres\u00e1\u0159i, nap\u0159. projects/esp32 . Tak\u017ee byste m\u011bli m\u00edt osvojeny z\u00e1klady mkdir , cd , dir a pod. Pro rychl\u00fd start pr\u00e1ce s knihovnami OctopusLab si st\u00e1hn\u011bte do pracovn\u00edho adres\u00e1\u0159e bin\u00e1rku Micropythonu z Octopus Micropython pro ESP32 https://octopusengine.org/download/micropython/micropython-octopus.bin - n\u00e1\u0161 fork ofici\u00e1ln\u00edho MicroPythonu Detekce portu, kde je ESP Po p\u0159ipojen\u00ed ESP modulu p\u0159es kabel USB (microUSB) mus\u00edme zjistit, na kter\u00e9m COM portu ho m\u00e1me. Typicky sta\u010d\u00ed zm\u00e1\u010dknout symbol Windows a X -> WIN + X a v menu Spr\u00e1vce za\u0159\u00edzen\u00ed / Porty (COM a Lpt) najdeme za\u0159\u00edzen\u00ed Silicon Labs CP210x USB to UART . A tam b\u00fdv\u00e1 COM + \u010d\u00edslo (COM3, COM6...). Abyste vid\u011bli skci Porty ve Spr\u00e1vci za\u0159\u00edzen\u00ed na Windows 10 mus\u00edte v menu \"Zobrazen\u00ed\" zvolit \"Zobrazit skryt\u00e1 za\u0159\u00edzen\u00ed\". Zkuste si ESP kabelem st\u0159\u00eddav\u011b p\u0159ipojovat a odpojovat - COM port by se m\u011bl zobrazovat a pak mizet, podle stavu p\u0159ipojen\u00ed. 2. Instalace Micropythonu do ESP Nyn\u00ed p\u016fjde o zprovozn\u011bn\u00ed s\u00e9riov\u00e9 linky do za\u0159\u00edzen\u00ed a nainstalov\u00e1n\u00ed n\u00e1stroje esptool pro nahr\u00e1v\u00e1n\u00ed .bin soubor\u016f. Pro klasick\u00fd esptool je t\u0159eba m\u00edt nainstalovan\u00fd Python3 , ale je i varianta st\u00e1hnout si spustiteln\u00fd program esptool.exe , kter\u00fd si st\u00e1hnete zde: https://dl.espressif.com/dl/esptool-2.6.1-windows.zip Pak v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku zad\u00e1me postupn\u011b: esptool.exe --chip esp32 -p COM6 erase_flash esptool.exe --chip esp32 -p COM6 write_flash -z 0x1000 ./micropython-octopus.bin (pozor, star\u00e9 win10- rozli\u0161uj\u00ed / a \\ ) Prvn\u00ed \u010d\u00e1st instalace Micropythonu erase_flash , kdy se po spu\u0161t\u011bn\u00ed esptool vypisuje sekvence Connecting........_____....._____....._____....._____....._____..... n\u011bkdy je nutno v tuto chv\u00edli na ESP zm\u00e1\u010dknout BOOT . V\u00edce je o tom zde: https://www.esp32.com/viewtopic.php?t=5682 Termin\u00e1l (putty) Tato \u010d\u00e1st je tak\u00e9 sou\u010d\u00e1st\u00ed p\u0159\u00edpravy po\u010d\u00edta\u010de. P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e v\u00edte, na kter\u00e9m portu je ESP p\u0159ipojeno: \ud83e\udc52 Detekce portu, kde je ESP Jako komunika\u010dn\u00ed termin\u00e1l pou\u017e\u00edv\u00e1me program putty.exe a nastaven\u00edm: Serial, rychlost 115200, v\u00e1\u0161 COMport . Po nastaven\u00ed zavol\u00e1me Open , uk\u00e1\u017ee se nov\u00e9 okno termin\u00e1lu. Doporu\u010dujeme si nastaven\u00ed ulo\u017eit, nap\u0159\u00edklad jako v na\u0161\u00ed uk\u00e1zce: esp32-COM6 (pro port COM6) pomoc\u00ed p\u0159\u00edkazu Save . K op\u011btovn\u00e9mu nahr\u00e1n\u00ed pak slou\u017e\u00ed Load . Pokud se na obrazovce nic nezobrazuje zm\u00e1\u010dn\u011bte ENTER a m\u011bl by se v\u00e1m zobrazit prompt interaktivn\u00edho Pythonu >>> . Gratulujeme, m\u00e1te funk\u010dn\u00ed MicroPython! D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Windows "},{"location":"install_win/#win","text":"Pro instalaci MicroPythonu na va\u0161e ESP32 je t\u0159eba \"naflashovat\" Micropython na n\u00e1\u0161 kontroler. Podrobn\u011bji si rozebereme n\u00e1sleduj\u00edc\u00ed kroky: Stru\u010dn\u011b: pracujeme st\u00e1le v jednom podadres\u00e1\u0159i, do kter\u00e9ho mus\u00edme: st\u00e1hnout a rozzipovat esptool.exe st\u00e1hnout Octopus Micropython pro ESP32 nebo vanilla Micropython p\u0159ipojit ESP a detekovat COM port pomoc\u00ed esptool p\u0159ehr\u00e1t Micropython na ESP st\u00e1hnout si putty.exe spustit putty a nastavit \"serial\", baudrate 115200 , a COM port reset ESP (mo\u017eno jen CTRL+C) a m\u011bli bychom v termin\u00e1lu putty vid\u011bt >>> a te\u010f jednotliv\u00e9 kroky podrobn\u011bji:","title":"Win"},{"location":"install_win/#1-priprava-pocitace","text":"Ve v\u0161ech p\u0159\u00edpadech (Linux i Mac) budeme pracovat v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku. Termin\u00e1lov\u00e9 okno se vyvol\u00e1 p\u0159\u00edkazem cmd . Po kliknut\u00ed na ikonu Windows ( WIN ) nap\u00ed\u0161eme cmd a m\u011bl by se n\u00e1m nab\u00eddnout \"program\" P\u0159\u00edkazov\u00fd \u0159\u00e1dek . Pracujte v nov\u00e9m, pr\u00e1zdn\u00e9m adres\u00e1\u0159i, nap\u0159. projects/esp32 . Tak\u017ee byste m\u011bli m\u00edt osvojeny z\u00e1klady mkdir , cd , dir a pod. Pro rychl\u00fd start pr\u00e1ce s knihovnami OctopusLab si st\u00e1hn\u011bte do pracovn\u00edho adres\u00e1\u0159e bin\u00e1rku Micropythonu z Octopus Micropython pro ESP32 https://octopusengine.org/download/micropython/micropython-octopus.bin - n\u00e1\u0161 fork ofici\u00e1ln\u00edho MicroPythonu","title":"1. P\u0159\u00edprava po\u010d\u00edta\u010de"},{"location":"install_win/#detekce-portu-kde-je-esp","text":"Po p\u0159ipojen\u00ed ESP modulu p\u0159es kabel USB (microUSB) mus\u00edme zjistit, na kter\u00e9m COM portu ho m\u00e1me. Typicky sta\u010d\u00ed zm\u00e1\u010dknout symbol Windows a X -> WIN + X a v menu Spr\u00e1vce za\u0159\u00edzen\u00ed / Porty (COM a Lpt) najdeme za\u0159\u00edzen\u00ed Silicon Labs CP210x USB to UART . A tam b\u00fdv\u00e1 COM + \u010d\u00edslo (COM3, COM6...). Abyste vid\u011bli skci Porty ve Spr\u00e1vci za\u0159\u00edzen\u00ed na Windows 10 mus\u00edte v menu \"Zobrazen\u00ed\" zvolit \"Zobrazit skryt\u00e1 za\u0159\u00edzen\u00ed\". Zkuste si ESP kabelem st\u0159\u00eddav\u011b p\u0159ipojovat a odpojovat - COM port by se m\u011bl zobrazovat a pak mizet, podle stavu p\u0159ipojen\u00ed.","title":"Detekce portu, kde je ESP"},{"location":"install_win/#2-instalace-micropythonu-do-esp","text":"Nyn\u00ed p\u016fjde o zprovozn\u011bn\u00ed s\u00e9riov\u00e9 linky do za\u0159\u00edzen\u00ed a nainstalov\u00e1n\u00ed n\u00e1stroje esptool pro nahr\u00e1v\u00e1n\u00ed .bin soubor\u016f. Pro klasick\u00fd esptool je t\u0159eba m\u00edt nainstalovan\u00fd Python3 , ale je i varianta st\u00e1hnout si spustiteln\u00fd program esptool.exe , kter\u00fd si st\u00e1hnete zde: https://dl.espressif.com/dl/esptool-2.6.1-windows.zip Pak v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku zad\u00e1me postupn\u011b: esptool.exe --chip esp32 -p COM6 erase_flash esptool.exe --chip esp32 -p COM6 write_flash -z 0x1000 ./micropython-octopus.bin (pozor, star\u00e9 win10- rozli\u0161uj\u00ed / a \\ ) Prvn\u00ed \u010d\u00e1st instalace Micropythonu erase_flash , kdy se po spu\u0161t\u011bn\u00ed esptool vypisuje sekvence Connecting........_____....._____....._____....._____....._____..... n\u011bkdy je nutno v tuto chv\u00edli na ESP zm\u00e1\u010dknout BOOT . V\u00edce je o tom zde: https://www.esp32.com/viewtopic.php?t=5682","title":"2. Instalace Micropythonu do ESP"},{"location":"install_win/#terminal-putty","text":"Tato \u010d\u00e1st je tak\u00e9 sou\u010d\u00e1st\u00ed p\u0159\u00edpravy po\u010d\u00edta\u010de. P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e v\u00edte, na kter\u00e9m portu je ESP p\u0159ipojeno: \ud83e\udc52 Detekce portu, kde je ESP Jako komunika\u010dn\u00ed termin\u00e1l pou\u017e\u00edv\u00e1me program putty.exe a nastaven\u00edm: Serial, rychlost 115200, v\u00e1\u0161 COMport . Po nastaven\u00ed zavol\u00e1me Open , uk\u00e1\u017ee se nov\u00e9 okno termin\u00e1lu. Doporu\u010dujeme si nastaven\u00ed ulo\u017eit, nap\u0159\u00edklad jako v na\u0161\u00ed uk\u00e1zce: esp32-COM6 (pro port COM6) pomoc\u00ed p\u0159\u00edkazu Save . K op\u011btovn\u00e9mu nahr\u00e1n\u00ed pak slou\u017e\u00ed Load . Pokud se na obrazovce nic nezobrazuje zm\u00e1\u010dn\u011bte ENTER a m\u011bl by se v\u00e1m zobrazit prompt interaktivn\u00edho Pythonu >>> . Gratulujeme, m\u00e1te funk\u010dn\u00ed MicroPython! D\u00e1le m\u016f\u017eete pokra\u010dovat podkapitolou prvn\u00ed spu\u0161t\u011bn\u00ed a instalace octopus workframe .","title":"Termin\u00e1l (putty)"},{"location":"inv_kinematics/","text":"Inversn\u00ed kinematika p \u0159 i p r a v u j e m e Jednoduch\u00e1 uk\u00e1zka - bod x,y se p\u0159ev\u00e1d\u00ed na dva \u00fahly (pro dv\u011b serva) from utils.transform import * p = 10,10 p1 = Point2D(p) invkin2_1(p1) github.com/octopusengine/inverse_kinematics","title":"Inv kinematics"},{"location":"inv_kinematics/#inversni-kinematika","text":"p \u0159 i p r a v u j e m e Jednoduch\u00e1 uk\u00e1zka - bod x,y se p\u0159ev\u00e1d\u00ed na dva \u00fahly (pro dv\u011b serva) from utils.transform import * p = 10,10 p1 = Point2D(p) invkin2_1(p1) github.com/octopusengine/inverse_kinematics","title":"Inversn\u00ed kinematika"},{"location":"mqtt/","text":"MQTT Internet v\u011bc\u00ed vy\u017eaduje obrovskou \u0161k\u00e1lovatelnost v s\u00ed\u0165ov\u00e9m prostoru, aby zvl\u00e1dl n\u00e1r\u016fst za\u0159\u00edzen\u00ed. IETF 6LoWPAN se pou\u017e\u00edv\u00e1 k p\u0159ipojen\u00ed za\u0159\u00edzen\u00ed k IP s\u00edt\u00edm. S miliardami za\u0159\u00edzen\u00ed, kter\u00e9 jsou p\u0159id\u00e1v\u00e1ny do internetov\u00e9ho prostoru, hraje IPv6 hlavn\u00ed roli p\u0159i \u0159e\u0161en\u00ed \u0161k\u00e1lovatelnosti s\u00ed\u0165ov\u00e9 vrstvy. CoAP od IETF, ZeroMQ a MQTT poskytly odleh\u010den\u00fd p\u0159enos dat. \u201eMQ\u201c v \u201eMQTT\u201c poch\u00e1z\u00ed z produktov\u00e9 \u0159ady IBM MQ \u0159ady zpr\u00e1v: (Message Queuing Telemetry Transport) Zdroj: Wikipedia MQTT je tedy jednoduch\u00fd centralizovan\u00fd protokol slou\u017e\u00edc\u00ed nej\u010dast\u011bji pro pou\u017eit\u00ed s nejr\u016fzn\u011bj\u0161\u00edmi senzory IoT (Internetu v\u011bc\u00ed). Lze jej v\u0161ak vyu\u017e\u00edt i pro p\u0159enos mnoha jin\u00fdch, nap\u0159\u00edklad telemetrick\u00fdch dat. Z\u00e1kladem je princip typu zve\u0159ejnit/odeb\u00edrat (publish/subscribe). Za\u0159\u00edzen\u00ed s funkc\u00ed zve\u0159ejnit odes\u00edlaj\u00ed zpr\u00e1vy zprost\u0159edkovateli ( broker ), kter\u00fd na z\u00e1klad\u011b p\u0159ihl\u00e1\u0161en\u00fdch odb\u011br\u016f provede t\u0159\u00edd\u011bn\u00ed a p\u0159eposl\u00e1n\u00ed u\u017eivatel\u016fm. Klient-u\u017eivatel m\u016f\u017ee z\u00e1rove\u0148 publikovat ( publish ) i odeb\u00edrat ( subscribe ). P\u0159ipravujeme samostatnou str\u00e1nku zdroj\u016f \ud83e\udc52 github.com/octopusengine/octopusLAB_mqtt \ud83e\udc52 https://github.com/micropython/micropython-lib/tree/master/umqtt.simple \ud83e\udc52 https://github.com/micropython/micropython-lib/tree/master/umqtt.robust Uk\u00e1zky: # --- example_pub.py --- from umqtt.simple import MQTTClient # Test reception e.g. with: # mosquitto_sub -t foo_topic def main(server=\"localhost\"): c = MQTTClient(\"umqtt_client\", server) c.connect() c.publish(b\"foo_topic\", b\"hello\") c.disconnect() if __name__ == \"__main__\": main() # --- example_sub.py --- import time from umqtt.simple import MQTTClient # Publish test messages e.g. with: # mosquitto_pub -t foo_topic -m hello # Received messages from subscriptions will be delivered to this callback def sub_cb(topic, msg): print((topic, msg)) def main(server=\"localhost\"): c = MQTTClient(\"umqtt_client\", server) c.set_callback(sub_cb) c.connect() c.subscribe(b\"foo_topic\") while True: if True: # Blocking wait for message c.wait_msg() else: # Non-blocking wait for message c.check_msg() # Then need to sleep to avoid 100% CPU usage (in a real # app other useful actions would be performed instead) time.sleep(1) c.disconnect() if __name__ == \"__main__\": main() Mosquito - Raspberry Pi MQTT broker Instalce: sudo apt-get install mosquitto mosquitto-clients Uk\u00e1zka:","title":"MQTT"},{"location":"mqtt/#mqtt","text":"Internet v\u011bc\u00ed vy\u017eaduje obrovskou \u0161k\u00e1lovatelnost v s\u00ed\u0165ov\u00e9m prostoru, aby zvl\u00e1dl n\u00e1r\u016fst za\u0159\u00edzen\u00ed. IETF 6LoWPAN se pou\u017e\u00edv\u00e1 k p\u0159ipojen\u00ed za\u0159\u00edzen\u00ed k IP s\u00edt\u00edm. S miliardami za\u0159\u00edzen\u00ed, kter\u00e9 jsou p\u0159id\u00e1v\u00e1ny do internetov\u00e9ho prostoru, hraje IPv6 hlavn\u00ed roli p\u0159i \u0159e\u0161en\u00ed \u0161k\u00e1lovatelnosti s\u00ed\u0165ov\u00e9 vrstvy. CoAP od IETF, ZeroMQ a MQTT poskytly odleh\u010den\u00fd p\u0159enos dat. \u201eMQ\u201c v \u201eMQTT\u201c poch\u00e1z\u00ed z produktov\u00e9 \u0159ady IBM MQ \u0159ady zpr\u00e1v: (Message Queuing Telemetry Transport) Zdroj: Wikipedia MQTT je tedy jednoduch\u00fd centralizovan\u00fd protokol slou\u017e\u00edc\u00ed nej\u010dast\u011bji pro pou\u017eit\u00ed s nejr\u016fzn\u011bj\u0161\u00edmi senzory IoT (Internetu v\u011bc\u00ed). Lze jej v\u0161ak vyu\u017e\u00edt i pro p\u0159enos mnoha jin\u00fdch, nap\u0159\u00edklad telemetrick\u00fdch dat. Z\u00e1kladem je princip typu zve\u0159ejnit/odeb\u00edrat (publish/subscribe). Za\u0159\u00edzen\u00ed s funkc\u00ed zve\u0159ejnit odes\u00edlaj\u00ed zpr\u00e1vy zprost\u0159edkovateli ( broker ), kter\u00fd na z\u00e1klad\u011b p\u0159ihl\u00e1\u0161en\u00fdch odb\u011br\u016f provede t\u0159\u00edd\u011bn\u00ed a p\u0159eposl\u00e1n\u00ed u\u017eivatel\u016fm. Klient-u\u017eivatel m\u016f\u017ee z\u00e1rove\u0148 publikovat ( publish ) i odeb\u00edrat ( subscribe ). P\u0159ipravujeme samostatnou str\u00e1nku zdroj\u016f \ud83e\udc52 github.com/octopusengine/octopusLAB_mqtt \ud83e\udc52 https://github.com/micropython/micropython-lib/tree/master/umqtt.simple \ud83e\udc52 https://github.com/micropython/micropython-lib/tree/master/umqtt.robust Uk\u00e1zky: # --- example_pub.py --- from umqtt.simple import MQTTClient # Test reception e.g. with: # mosquitto_sub -t foo_topic def main(server=\"localhost\"): c = MQTTClient(\"umqtt_client\", server) c.connect() c.publish(b\"foo_topic\", b\"hello\") c.disconnect() if __name__ == \"__main__\": main() # --- example_sub.py --- import time from umqtt.simple import MQTTClient # Publish test messages e.g. with: # mosquitto_pub -t foo_topic -m hello # Received messages from subscriptions will be delivered to this callback def sub_cb(topic, msg): print((topic, msg)) def main(server=\"localhost\"): c = MQTTClient(\"umqtt_client\", server) c.set_callback(sub_cb) c.connect() c.subscribe(b\"foo_topic\") while True: if True: # Blocking wait for message c.wait_msg() else: # Non-blocking wait for message c.check_msg() # Then need to sleep to avoid 100% CPU usage (in a real # app other useful actions would be performed instead) time.sleep(1) c.disconnect() if __name__ == \"__main__\": main()","title":"MQTT"},{"location":"mqtt/#mosquito-raspberry-pi-mqtt-broker","text":"Instalce: sudo apt-get install mosquitto mosquitto-clients Uk\u00e1zka:","title":"Mosquito - Raspberry Pi MQTT broker"},{"location":"pinouts/","text":"Pinouts Hlavn\u00ed moduly Nej\u010dast\u011bji budeme pou\u017e\u00edvat dva z\u00e1kldan\u00ed moduly, s ESP32: Modul ESP32 DoIt 2x15 Modul OctopusLAB ESP32board Pinouts files - zapojen\u00ed PIN\u016f Cel\u00fd komplet soubor\u016f pinouts je na Githubu. Zam\u011b\u0159\u00edme se proto jen na n\u011bkter\u00e9 hlavn\u00ed \u010d\u00e1sti: base.py # Base abstract pinouts without any, this base can be replaced by any board specific settings # Here should be definiton of every pins used in Octopus library BUILT_IN_LED = None HALL_SENSOR = None # I2C I2C_SCL_PIN = None I2C_SDA_PIN = None # SPI SPI_CLK_PIN = None SPI_MISO_PIN = None SPI_MOSI_PIN = None SPI_CS0_PIN = None # Default basic pins ANALOG_PIN = None BUTT1_PIN = None PIEZZO_PIN = None WS_LED_PIN = None ONE_WIRE_PIN = None # Input pins I39_PIN = None I34_PIN = None I35_PIN = None # IoT Specific pins RELAY_PIN = None MFET_PIN = None BUTT1_PIN = None BUTT2_PIN = None BUTT3_PIN = None # PWM pins PWM1_PIN = None PWM2_PIN = None PWM3_PIN = None # DEV pins DEV1_PIN = None DEV2_PIN = None DEV3_PIN = None # DC motors MOTOR_12EN = None MOTOR_34EN = None MOTOR_1A = None MOTOR_2A = None MOTOR_3A = None MOTOR_4A = None # Witty specifiv LED_RED = None LED_GRE = None LED_BLU = None # UART RXD0 = None # Used for REPL TXD0 = None # Used for REPL RXD1 = None TXD1 = None olab_esp32_robot_board1.py \"\"\" This is octopusLab basic library for robotBoard PCB and esp32 soc I2C / SPI / MOTORs / SERVO / PWM... Edition: --- 2.12.2018 --- \"\"\" from micropython import const from pinouts.olab_esp32_base import * ##WS_LED_PIN 13 # Robot Board v1 WS_LED_PIN = const(15) # Robot Board v2 - WS RGB ledi diode ONE_WIRE_PIN = const(32) #one wire (for Dallas temperature sensor) PIEZZO_PIN = const(27) # DC motors MOTOR_12EN = const(25) # Select version of robot board ##MOTOR_34EN 15 # Robot Board v1 MOTOR_34EN = const(13) # Robot Board v2 MOTOR_1A = const(26) MOTOR_2A = const(12) MOTOR_3A = const(14) MOTOR_4A = const(27) #main analog input (for power management) ANALOG_PIN = const(36) #PWM/servo: PWM1_PIN = const(17) PWM2_PIN = const(16) PWM3_PIN = const(4) #pwm duty for servo: SERVO_MIN = const(38) SERVO_MAX= const(130) #inputs: I39_PIN = const(39) I34_PIN = const(34) I35_PIN = const(35) #temp MFET_PIN = const(17) # PWM1 RELAY_PIN = const(16) # PWM2 # DEV pins DEV1_PIN = const(32) DEV2_PIN = const(33) olab_esp32_esp32_board1.py Toto bude postupem \u010dasu hlavn\u00ed OctopusLAB modul: \"\"\" This is octopusLab basic library for ESP32 board PCB and esp32 soc Edition: --- 10.8.2019 --- \"\"\" from micropython import const from pinouts.olab_esp32_base import * BUTT1_PIN = const(0) PWM1_PIN = const(17) PWM2_PIN = const(16) PWM3_PIN = const(25) DEV1_PIN = const(32) # RAM DEV2_PIN = const(33) # RAM DEV3_PIN = const(27) #inputs: I34_PIN = const(34) I39_PIN = const(39) I35_PIN = const(35) # UART 1 RXD1 = const(36) TXD1 = const(4) PIEZZO_PIN = const(27) # hack on DEV3","title":"Pinouts"},{"location":"pinouts/#pinouts","text":"","title":"Pinouts"},{"location":"pinouts/#hlavni-moduly","text":"Nej\u010dast\u011bji budeme pou\u017e\u00edvat dva z\u00e1kldan\u00ed moduly, s ESP32:","title":"Hlavn\u00ed moduly"},{"location":"pinouts/#modul-esp32-doit-2x15","text":"","title":"Modul ESP32 DoIt 2x15"},{"location":"pinouts/#modul-octopuslab-esp32board","text":"","title":"Modul OctopusLAB ESP32board"},{"location":"pinouts/#pinouts-files-zapojeni-pinu","text":"Cel\u00fd komplet soubor\u016f pinouts je na Githubu. Zam\u011b\u0159\u00edme se proto jen na n\u011bkter\u00e9 hlavn\u00ed \u010d\u00e1sti:","title":"Pinouts files - zapojen\u00ed PIN\u016f"},{"location":"pinouts/#basepy","text":"# Base abstract pinouts without any, this base can be replaced by any board specific settings # Here should be definiton of every pins used in Octopus library BUILT_IN_LED = None HALL_SENSOR = None # I2C I2C_SCL_PIN = None I2C_SDA_PIN = None # SPI SPI_CLK_PIN = None SPI_MISO_PIN = None SPI_MOSI_PIN = None SPI_CS0_PIN = None # Default basic pins ANALOG_PIN = None BUTT1_PIN = None PIEZZO_PIN = None WS_LED_PIN = None ONE_WIRE_PIN = None # Input pins I39_PIN = None I34_PIN = None I35_PIN = None # IoT Specific pins RELAY_PIN = None MFET_PIN = None BUTT1_PIN = None BUTT2_PIN = None BUTT3_PIN = None # PWM pins PWM1_PIN = None PWM2_PIN = None PWM3_PIN = None # DEV pins DEV1_PIN = None DEV2_PIN = None DEV3_PIN = None # DC motors MOTOR_12EN = None MOTOR_34EN = None MOTOR_1A = None MOTOR_2A = None MOTOR_3A = None MOTOR_4A = None # Witty specifiv LED_RED = None LED_GRE = None LED_BLU = None # UART RXD0 = None # Used for REPL TXD0 = None # Used for REPL RXD1 = None TXD1 = None","title":"base.py"},{"location":"pinouts/#olab_esp32_robot_board1py","text":"\"\"\" This is octopusLab basic library for robotBoard PCB and esp32 soc I2C / SPI / MOTORs / SERVO / PWM... Edition: --- 2.12.2018 --- \"\"\" from micropython import const from pinouts.olab_esp32_base import * ##WS_LED_PIN 13 # Robot Board v1 WS_LED_PIN = const(15) # Robot Board v2 - WS RGB ledi diode ONE_WIRE_PIN = const(32) #one wire (for Dallas temperature sensor) PIEZZO_PIN = const(27) # DC motors MOTOR_12EN = const(25) # Select version of robot board ##MOTOR_34EN 15 # Robot Board v1 MOTOR_34EN = const(13) # Robot Board v2 MOTOR_1A = const(26) MOTOR_2A = const(12) MOTOR_3A = const(14) MOTOR_4A = const(27) #main analog input (for power management) ANALOG_PIN = const(36) #PWM/servo: PWM1_PIN = const(17) PWM2_PIN = const(16) PWM3_PIN = const(4) #pwm duty for servo: SERVO_MIN = const(38) SERVO_MAX= const(130) #inputs: I39_PIN = const(39) I34_PIN = const(34) I35_PIN = const(35) #temp MFET_PIN = const(17) # PWM1 RELAY_PIN = const(16) # PWM2 # DEV pins DEV1_PIN = const(32) DEV2_PIN = const(33)","title":"olab_esp32_robot_board1.py"},{"location":"pinouts/#olab_esp32_esp32_board1py","text":"Toto bude postupem \u010dasu hlavn\u00ed OctopusLAB modul: \"\"\" This is octopusLab basic library for ESP32 board PCB and esp32 soc Edition: --- 10.8.2019 --- \"\"\" from micropython import const from pinouts.olab_esp32_base import * BUTT1_PIN = const(0) PWM1_PIN = const(17) PWM2_PIN = const(16) PWM3_PIN = const(25) DEV1_PIN = const(32) # RAM DEV2_PIN = const(33) # RAM DEV3_PIN = const(27) #inputs: I34_PIN = const(34) I39_PIN = const(39) I35_PIN = const(35) # UART 1 RXD1 = const(36) TXD1 = const(4) PIEZZO_PIN = const(27) # hack on DEV3","title":"olab_esp32_esp32_board1.py"},{"location":"pubsub/","text":"PubSub Note N\u00e1stroj pro p\u0159ed\u00e1v\u00e1n\u00ed hodnot mezi nez\u00e1visl\u00fdmi komponenty v r\u00e1mci projektu a to i v samostatn\u011b b\u011b\u017e\u00edc\u00edch vl\u00e1knech. Pracuje na principu publish and subscribe . Fork z basecue/micropython-pubsub . Zdrojov\u00fd k\u00f3d knihovny: ./lib/pubsub.py Z\u00e1klad pr\u00e1ce: jedno vl\u00e1kno (nebo \u010d\u00e1st programu) publikuje z\u00edskan\u00e9 hodnoty metodou publish kde parametrem je topic a hodnota value . Nap\u0159\u00edklad pubsub.publish('topic', value) . (value m\u016f\u017ee b\u00fdt libovoln\u00fd objekt). V jednoduch\u00e9 uk\u00e1zce jednou za vte\u0159inu generujeme n\u00e1hodn\u00e1 \u010d\u00edsla, kter\u00e1 \"publikujeme\". (pozor, pou\u017e\u00edv\u00e1me while True: - je to blokuj\u00edc\u00ed, lep\u0161\u00ed je pou\u017e\u00edt timer ) Z\u00e1kladem je import pubsub a pak dekor\u00e1tor @pubsub.subscriber(\"value\") pro subscribe a pubsub.publish('value', value) pro publish . V jednom programu Tato jednoduch\u00e1 uk\u00e1zka pouze nazna\u010duje mo\u017enost funk\u010dn\u00edho pou\u017eit\u00ed. Jej\u00ed univerz\u00e1lnost a robustnost ocen\u00edte a\u017e p\u0159i rozs\u00e1hlej\u0161\u00edch projektech. from time import sleep from os import urandom import pubsub from utils.octopus import disp7_init print(\"display7 init\") d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) print(\"start ps_random\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1) Samostatn\u00e9 programy / thready / moduly Jeden program nebo dva thready. Mo\u017enost testovat jako dva v threadu spustiteln\u00e9 programy: import pubsub from utils.octopus import disp7_init d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) from time import sleep from os import urandom import pubsub print(\"start: ps_random.py\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1) Zjednodu\u0161en\u00ed na maximum Jak pou\u017eit\u00ed pub sub zjednodu\u0161\u00ed program? Chceme v pravideln\u00e9m intervalu zobrazovat n\u00e1hodn\u00e1 \u010d\u00edsla na displeji. Jde to jednodu\u0161eji? import octopus.ps_display7 import octopus.ps_timer_rnd Zdrojov\u00e9 k\u00f3dy k pou\u017eit\u00fdm octopus pub sub modul\u016fm tak\u00e9 nejsou slo\u017eit\u00e9: octopus.ps_display7 octopus.ps_timer_rnd","title":"Pubsub"},{"location":"pubsub/#pubsub","text":"Note N\u00e1stroj pro p\u0159ed\u00e1v\u00e1n\u00ed hodnot mezi nez\u00e1visl\u00fdmi komponenty v r\u00e1mci projektu a to i v samostatn\u011b b\u011b\u017e\u00edc\u00edch vl\u00e1knech. Pracuje na principu publish and subscribe . Fork z basecue/micropython-pubsub . Zdrojov\u00fd k\u00f3d knihovny: ./lib/pubsub.py Z\u00e1klad pr\u00e1ce: jedno vl\u00e1kno (nebo \u010d\u00e1st programu) publikuje z\u00edskan\u00e9 hodnoty metodou publish kde parametrem je topic a hodnota value . Nap\u0159\u00edklad pubsub.publish('topic', value) . (value m\u016f\u017ee b\u00fdt libovoln\u00fd objekt). V jednoduch\u00e9 uk\u00e1zce jednou za vte\u0159inu generujeme n\u00e1hodn\u00e1 \u010d\u00edsla, kter\u00e1 \"publikujeme\". (pozor, pou\u017e\u00edv\u00e1me while True: - je to blokuj\u00edc\u00ed, lep\u0161\u00ed je pou\u017e\u00edt timer ) Z\u00e1kladem je import pubsub a pak dekor\u00e1tor @pubsub.subscriber(\"value\") pro subscribe a pubsub.publish('value', value) pro publish .","title":"PubSub"},{"location":"pubsub/#v-jednom-programu","text":"Tato jednoduch\u00e1 uk\u00e1zka pouze nazna\u010duje mo\u017enost funk\u010dn\u00edho pou\u017eit\u00ed. Jej\u00ed univerz\u00e1lnost a robustnost ocen\u00edte a\u017e p\u0159i rozs\u00e1hlej\u0161\u00edch projektech. from time import sleep from os import urandom import pubsub from utils.octopus import disp7_init print(\"display7 init\") d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) print(\"start ps_random\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1)","title":"V jednom programu"},{"location":"pubsub/#samostatne-programy-thready-moduly","text":"Jeden program nebo dva thready. Mo\u017enost testovat jako dva v threadu spustiteln\u00e9 programy: import pubsub from utils.octopus import disp7_init d7 = disp7_init() # 8 x 7segment display init @pubsub.subscriber(\"value\") def display_num(value): d7.show(value) from time import sleep from os import urandom import pubsub print(\"start: ps_random.py\") while True: value = int(urandom(1)[0]) print(\"rnd.: \", value) pubsub.publish('value', value) sleep(1)","title":"Samostatn\u00e9 programy / thready / moduly"},{"location":"pubsub/#zjednoduseni-na-maximum","text":"Jak pou\u017eit\u00ed pub sub zjednodu\u0161\u00ed program? Chceme v pravideln\u00e9m intervalu zobrazovat n\u00e1hodn\u00e1 \u010d\u00edsla na displeji. Jde to jednodu\u0161eji? import octopus.ps_display7 import octopus.ps_timer_rnd Zdrojov\u00e9 k\u00f3dy k pou\u017eit\u00fdm octopus pub sub modul\u016fm tak\u00e9 nejsou slo\u017eit\u00e9: octopus.ps_display7 octopus.ps_timer_rnd","title":"Zjednodu\u0161en\u00ed na maximum"},{"location":"repl/","text":"REPL REPL je zkratka pro styl programovac\u00edho (nebo p\u0159esn\u011bji skriptovac\u00edho) a lad\u00edc\u00edho cyklu Read\u2013eval\u2013print loop . Jedn\u00e1 se o \"interaktivn\u00ed MicroPython prompt\", kter\u00fd funguje p\u0159es USB s\u00e9riovou linku i vzd\u00e1len\u011b p\u0159es WebRrepl . V origin\u00e1ln\u00ed dokumentaci docs.micropython.org/repl se o REPLu m\u016f\u017eete dozv\u011bd\u011bt, \u017ee je v ESP p\u0159ipojen na UART0 s\u00e9riov\u00e9 linky, kter\u00e1 je na PINech GPIO1 pro TX and GPIO3 pro RX . Rychlost p\u0159enosu (Baudrate) je 115200 . To je d\u016fvod, pro\u010d pro vlastn\u00ed s\u00e9riovou linku pou\u017e\u00edv\u00e1me UART1 . V\u00fd\u010det kl\u00e1vesov\u00fdch zkratek pro pr\u00e1ci s REPLem CTRL-A (on a blank line, enter raw REPL mode) CTRL-B (on a blank line, enter normal REPL mode) CTRL-C (interrupt a running program) CTRL-D (on a blank line, do a soft reset of the board) CTRL-E (on a blank line, enter paste mode) Nej\u010dast\u011bji pot\u0159ebujeme CTRL-C (zastaven\u00ed programu) nebo CTRL-D (reset) WebRepl Vzd\u00e1len\u00e9 p\u0159ipojen\u00ed se prov\u00e1d\u00ed p\u0159es \"webovou aplikaci\" micropython.org/webrepl . Pokud ESP p\u0159ipojej\u00ed k wifi a n\u00e1sledn\u011b se spust\u00ed webrepl.start() , za\u0159\u00edzen\u00ed je na adrese ws://192.168.4.1:8266/ (port 8266 zat\u00edm z\u016fst\u00e1v\u00e1 historicky z \u00e9ry ESP8266). S ESP p\u0159ipojen\u00e9mu v lok\u00e1ln\u00ed s\u00edti pak m\u016f\u017eete pracovat v termin\u00e1lu >>> jako by bylo spojeno kabelem. main.py - Octopus LAB kr\u00e1tk\u00e1 varianta - je na p\u00e1r \u0159\u00e1dek: from utils.octopus_lib import w w() import webrepl webrepl.start() Tradi\u010dn\u00ed verze: import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') import esp esp.osdebug(None) import webrepl webrepl.start() Heslo do WebReplu je v Octopus FrameWork p\u0159ednastaveno na octopus . Spustit se d\u00e1 i ze setup() - p\u0159\u00edkazy cw -> ws .","title":"REPL"},{"location":"repl/#repl","text":"REPL je zkratka pro styl programovac\u00edho (nebo p\u0159esn\u011bji skriptovac\u00edho) a lad\u00edc\u00edho cyklu Read\u2013eval\u2013print loop . Jedn\u00e1 se o \"interaktivn\u00ed MicroPython prompt\", kter\u00fd funguje p\u0159es USB s\u00e9riovou linku i vzd\u00e1len\u011b p\u0159es WebRrepl . V origin\u00e1ln\u00ed dokumentaci docs.micropython.org/repl se o REPLu m\u016f\u017eete dozv\u011bd\u011bt, \u017ee je v ESP p\u0159ipojen na UART0 s\u00e9riov\u00e9 linky, kter\u00e1 je na PINech GPIO1 pro TX and GPIO3 pro RX . Rychlost p\u0159enosu (Baudrate) je 115200 . To je d\u016fvod, pro\u010d pro vlastn\u00ed s\u00e9riovou linku pou\u017e\u00edv\u00e1me UART1 . V\u00fd\u010det kl\u00e1vesov\u00fdch zkratek pro pr\u00e1ci s REPLem CTRL-A (on a blank line, enter raw REPL mode) CTRL-B (on a blank line, enter normal REPL mode) CTRL-C (interrupt a running program) CTRL-D (on a blank line, do a soft reset of the board) CTRL-E (on a blank line, enter paste mode) Nej\u010dast\u011bji pot\u0159ebujeme CTRL-C (zastaven\u00ed programu) nebo CTRL-D (reset)","title":"REPL"},{"location":"repl/#webrepl","text":"Vzd\u00e1len\u00e9 p\u0159ipojen\u00ed se prov\u00e1d\u00ed p\u0159es \"webovou aplikaci\" micropython.org/webrepl . Pokud ESP p\u0159ipojej\u00ed k wifi a n\u00e1sledn\u011b se spust\u00ed webrepl.start() , za\u0159\u00edzen\u00ed je na adrese ws://192.168.4.1:8266/ (port 8266 zat\u00edm z\u016fst\u00e1v\u00e1 historicky z \u00e9ry ESP8266). S ESP p\u0159ipojen\u00e9mu v lok\u00e1ln\u00ed s\u00edti pak m\u016f\u017eete pracovat v termin\u00e1lu >>> jako by bylo spojeno kabelem. main.py - Octopus LAB kr\u00e1tk\u00e1 varianta - je na p\u00e1r \u0159\u00e1dek: from utils.octopus_lib import w w() import webrepl webrepl.start() Tradi\u010dn\u00ed verze: import network wlan = network.WLAN(network.STA_IF) wlan.active(True) wlan.connect('ssid', 'password') import esp esp.osdebug(None) import webrepl webrepl.start() Heslo do WebReplu je v Octopus FrameWork p\u0159ednastaveno na octopus . Spustit se d\u00e1 i ze setup() - p\u0159\u00edkazy cw -> ws .","title":"WebRepl"},{"location":"setup/","text":"Setup Pokud p\u00ed\u0161eme vlastn\u00ed programy, co\u017e se bude t\u00fdkat i v\u011bt\u0161iny na\u0161ich uk\u00e1zek v /examples (adres\u00e1\u0159 v ESP), z\u00e1klad nastaven\u00ed b\u00fdv\u00e1 zahrnut v nich. Testovac\u00ed a prototypovac\u00ed syst\u00e9m umo\u017en\u00ed m\u00edt konkr\u00e9tn\u00ed nastaven\u00ed i n\u011bkde ulo\u017eeno \u2013 a k tomu slou\u017e\u00ed konfigura\u010dn\u00ed soubor config/ios.json \u2013 input output setup ( nastaven\u00ed vstup\u016f a v\u00fdstup\u016f ). Nastaven\u00ed se prov\u00e1d\u00ed v z\u00e1kladn\u00edm Micropythonu, kde akci vyvol\u00e1me pomoc\u00ed metody setup: >>> setup() octopus_initial.setup() | setup() Z prost\u0159ed\u00ed Micropythonu >>> spou\u0161t\u00edme \u00fapln\u011b napoprv\u00e9 inicializa\u010dn\u00ed octopus_initial.setup() , kter\u00fd je sou\u010d\u00e1st\u00ed na\u0161eho forku Micropythonu. Pak se n\u00e1m st\u00e1hne aktu\u00e1ln\u00ed verze Octopus Framework a pro dal\u0161\u00ed nastavov\u00e1n\u00ed u\u017e pou\u017e\u00edv\u00e1me pouze setup() , kter\u00fd je roz\u0161\u00ed\u0159enou verz\u00ed octopus_initial.setup() . Roz\u0161\u00ed\u0159en\u00e9 mo\u017enosti nastaven\u00ed: >>> setup() ,'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( Hello, this will help you initialize your ESP ver: 0.71 / 22.11.2020 (c)octopusLAB Press Ctrl+C to abort ================================ S E T U P ================================ [w] - wifi submenu [cw] - connect wifi [cl] - connect LAN [sd] - system download > stable octopus modules from URL [sde] - system download > examples (from URL) /[sdh] hydroponics [sdo] - system download > octopus (Alfa octopus modules from URL) [ds] - device setting [ios] - I/O setting submenu [si] - system info [wr] - run web repl [ftp] - start FTP [q] - quit setup ================================ select: Z\u00e1kladn\u00ed nastaven\u00ed: Nastaven\u00ed desky V prvn\u00edm kroku nejd\u0159\u00edve nap\u00ed\u0161eme ds ( device setting ) nastaven\u00ed desky - (deskou rozum\u00edme jeden z HW modul\u016f pro ESP) Pro na\u0161e uk\u00e1zky budeme pou\u017e\u00edvat nejv\u00edce variantu 5 pro ROBOTboard nebo 9 pro ESP32board . Pro jin\u00e9 desky nebo moduly se m\u011bn\u00ed nastaven\u00ed pinouty . Nastaven\u00ed WiFi Wifi submenu umo\u017en\u00ed nastavit dal\u0161\u00ed Wifi s\u00ed\u0165. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed. Po zvolen\u00ed w s uk\u00e1\u017ee toto menu ni\u017e\u0161\u00ed \u00farovn\u011b: ============================== S E T U P - W I F I ============================== [a] - Add wifi network [r] - Remove wifi network [s] - Show configuration ============================== select: Zvolte a ( add wifi ) a stiskn\u011bte [enter] pro p\u0159id\u00e1n\u00ed va\u0161\u00ed WiFi s\u00edt\u011b do za\u0159\u00edzen\u00ed a vypl\u0148te spr\u00e1vn\u011b: SSID: n\u00e1zev Va\u0161\u00ed wifi | PASSWORD: a heslo do n\u00ed. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed. Update w / cw , sd / sde Uk\u00e1zkov\u00e9 programy M\u016f\u017eeme si z cloudu tak\u00e9 st\u00e1hnout uk\u00e1zkov\u00e9 programy (budou pak v adres\u00e1\u0159i /examples) Postupn\u011b zvolte: cw Wifi by se m\u011bla p\u0159ipojit, nastaveno u\u017e m\u00e1me od minula) a n\u00e1sledn\u011b sde (system download examples) st\u00e1hne op\u011bt n\u011bkolik des\u00edtek uk\u00e1zkov\u00fdch soubor\u016f. Nastaven\u00ed vstup\u016f a v\u00fdstup\u016f ios ( I/O setting submenu ) - nastaven\u00ed perif\u00e9ri\u00ed, nen\u00ed nezbytn\u00e9, krom\u011b oled (I2c) nebo disp7 (SPI) - pokud chcete vyu\u017e\u00edt \"chytr\u00e9\" pinouty Octopus FrameWork . Komunikace WebREPL [wr] FTP [ftp]","title":"Setup (nastaven\u00ed)"},{"location":"setup/#setup","text":"Pokud p\u00ed\u0161eme vlastn\u00ed programy, co\u017e se bude t\u00fdkat i v\u011bt\u0161iny na\u0161ich uk\u00e1zek v /examples (adres\u00e1\u0159 v ESP), z\u00e1klad nastaven\u00ed b\u00fdv\u00e1 zahrnut v nich. Testovac\u00ed a prototypovac\u00ed syst\u00e9m umo\u017en\u00ed m\u00edt konkr\u00e9tn\u00ed nastaven\u00ed i n\u011bkde ulo\u017eeno \u2013 a k tomu slou\u017e\u00ed konfigura\u010dn\u00ed soubor config/ios.json \u2013 input output setup ( nastaven\u00ed vstup\u016f a v\u00fdstup\u016f ). Nastaven\u00ed se prov\u00e1d\u00ed v z\u00e1kladn\u00edm Micropythonu, kde akci vyvol\u00e1me pomoc\u00ed metody setup: >>> setup() octopus_initial.setup() | setup() Z prost\u0159ed\u00ed Micropythonu >>> spou\u0161t\u00edme \u00fapln\u011b napoprv\u00e9 inicializa\u010dn\u00ed octopus_initial.setup() , kter\u00fd je sou\u010d\u00e1st\u00ed na\u0161eho forku Micropythonu. Pak se n\u00e1m st\u00e1hne aktu\u00e1ln\u00ed verze Octopus Framework a pro dal\u0161\u00ed nastavov\u00e1n\u00ed u\u017e pou\u017e\u00edv\u00e1me pouze setup() , kter\u00fd je roz\u0161\u00ed\u0159enou verz\u00ed octopus_initial.setup() . Roz\u0161\u00ed\u0159en\u00e9 mo\u017enosti nastaven\u00ed: >>> setup() ,'''`. / \\ |(@)(@)| ) ( /,'))((`.\\ (( (( )) )) ) \\ `)(' / ( Hello, this will help you initialize your ESP ver: 0.71 / 22.11.2020 (c)octopusLAB Press Ctrl+C to abort ================================ S E T U P ================================ [w] - wifi submenu [cw] - connect wifi [cl] - connect LAN [sd] - system download > stable octopus modules from URL [sde] - system download > examples (from URL) /[sdh] hydroponics [sdo] - system download > octopus (Alfa octopus modules from URL) [ds] - device setting [ios] - I/O setting submenu [si] - system info [wr] - run web repl [ftp] - start FTP [q] - quit setup ================================ select:","title":"Setup"},{"location":"setup/#zakladni-nastaveni","text":"","title":"Z\u00e1kladn\u00ed nastaven\u00ed:"},{"location":"setup/#nastaveni-desky","text":"V prvn\u00edm kroku nejd\u0159\u00edve nap\u00ed\u0161eme ds ( device setting ) nastaven\u00ed desky - (deskou rozum\u00edme jeden z HW modul\u016f pro ESP) Pro na\u0161e uk\u00e1zky budeme pou\u017e\u00edvat nejv\u00edce variantu 5 pro ROBOTboard nebo 9 pro ESP32board . Pro jin\u00e9 desky nebo moduly se m\u011bn\u00ed nastaven\u00ed pinouty .","title":"Nastaven\u00ed desky"},{"location":"setup/#nastaveni-wifi","text":"Wifi submenu umo\u017en\u00ed nastavit dal\u0161\u00ed Wifi s\u00ed\u0165. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed. Po zvolen\u00ed w s uk\u00e1\u017ee toto menu ni\u017e\u0161\u00ed \u00farovn\u011b: ============================== S E T U P - W I F I ============================== [a] - Add wifi network [r] - Remove wifi network [s] - Show configuration ============================== select: Zvolte a ( add wifi ) a stiskn\u011bte [enter] pro p\u0159id\u00e1n\u00ed va\u0161\u00ed WiFi s\u00edt\u011b do za\u0159\u00edzen\u00ed a vypl\u0148te spr\u00e1vn\u011b: SSID: n\u00e1zev Va\u0161\u00ed wifi | PASSWORD: a heslo do n\u00ed. Nastaven\u00ed WiFi se ulo\u017e\u00ed do flash ESP (v config/wifi.json ) a je uchov\u00e1no i pro dal\u0161\u00ed pou\u017eit\u00ed.","title":"Nastaven\u00ed WiFi"},{"location":"setup/#update","text":"w / cw , sd / sde","title":"Update"},{"location":"setup/#ukazkove-programy","text":"M\u016f\u017eeme si z cloudu tak\u00e9 st\u00e1hnout uk\u00e1zkov\u00e9 programy (budou pak v adres\u00e1\u0159i /examples) Postupn\u011b zvolte: cw Wifi by se m\u011bla p\u0159ipojit, nastaveno u\u017e m\u00e1me od minula) a n\u00e1sledn\u011b sde (system download examples) st\u00e1hne op\u011bt n\u011bkolik des\u00edtek uk\u00e1zkov\u00fdch soubor\u016f.","title":"Uk\u00e1zkov\u00e9 programy"},{"location":"setup/#nastaveni-vstupu-a-vystupu","text":"ios ( I/O setting submenu ) - nastaven\u00ed perif\u00e9ri\u00ed, nen\u00ed nezbytn\u00e9, krom\u011b oled (I2c) nebo disp7 (SPI) - pokud chcete vyu\u017e\u00edt \"chytr\u00e9\" pinouty Octopus FrameWork .","title":"Nastaven\u00ed vstup\u016f a v\u00fdstup\u016f"},{"location":"setup/#komunikace","text":"WebREPL [wr] FTP [ftp]","title":"Komunikace"},{"location":"tutorial-edukit1/","text":"Tutorial - EDU_KIT1 Samostatn\u00e1 str\u00e1nka, kter\u00e1 podrobn\u011bji popisuje EDU_KIT1: https://www.octopuslab.cz/edu-kit1/ P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e m\u00e1te na sv\u00e9m ESP32 Do-It nainstalovan\u00fd Micropython . V \u00favodn\u00edch tutorial 1 (Python) a tutorial 2 (Micropython | ESP) jsme se sezn\u00e1mili s \u00fapln\u00fdmi z\u00e1klady. V tomto dal\u0161\u00edm pokra\u010dov\u00e1n\u00ed u\u017e budeme pot\u0159ebovat ESP32 . \u2022 Led Led dioda osazen\u00e1 na ESP32 Do-It modulu je na Pinu 2. P\u00e1r uk\u00e1zek - \"blik\u00e1me LEDkou\" hned n\u011bkolika zp\u016fsoby: from time import sleep from components.led import Led led = Led(2) # 1 >>> while True: ... led.value(1) ... sleep(1) ... led.value(0) ... sleep(1) # 2 >>> while True: ... led.value(not led.value()) ... sleep(0.5) # 3 for _ in range(10): \u2026 blink(led,1000,1000) \u2026 ctrl+C (pro p\u0159eru\u0161en\u00ed b\u011bhu programu) \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / led \u2022 RGB Led RGB barevn\u00e1 dioda je na WS konektoru. Tento typ se d\u00e1 p\u0159ipojit i na dal\u0161\u00ed konektor a diod WS se m\u016f\u017ee \u0159adit v\u00edc z sebou. (A\u017e 127, na to je ale pot\u0159eba pos\u00edlit nap\u00e1jen\u00ed nap\u011bt\u00ed 5V) Pou\u017e\u00edv\u00e1me \u010dast\u011bji p\u00e1sek 8-mi diod, krou\u017eek 12 nebo 18, tak\u00e9 matice 4x4 a spojovan\u00e9 do v\u011bt\u0161\u00edho bloku. >>> from components.rgb import Rgb >>> ws = Rgb(32) >>> ws.test() # problikne R G B cca - default 500ms >>> ws.test(100) # s parametrem 100ms >>> import colors_rgb as rgb # definice barev v /lib > RED, GREEN, BLUE, ORANGE, BLACK (nesv\u00edt\u00ed) >>> ws.color(rgb.BLUE) # zobrazen\u00ed barvy, rgb.RED/rgb.GREEN ... >>> ws.color((128,0,0)) # parametr color je (128,0,0) >>> ws.rainbow_cycle() # \"projedou barvy\" duhy # ws2 = Rgb(pin,num) # > \u010d\u00edslo pinu a po\u010det LEDek >>> ws2 = Rgb(32,8) >>> ws.color(5,rgb.RED) > p\u0159i LED p\u00e1sku > nastaven\u00ed p\u00e1t\u00e9 na RED \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / rgb \u2022 Display7 Obl\u00edben\u00fd modul s obvodem MAX na sb\u011brnici SPI p\u0159\u00edmo p\u0159ipojiteln\u00fd na OCTOBUS-display sb\u011brnici. \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / display7 \u2022 Servo \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / servo \u2022 Senzory \u2022 Mo\u017enosti roz\u0161\u00ed\u0159en\u00ed Mechatronika Modul ROBOT board se d\u00e1 v jedn\u00e9 verzi zapojen\u00ed osadit \"H-m\u016fstkem\" L293, kter\u00fdm se daj\u00ed ovl\u00e1dat dva DC motory. Pou\u017e\u00edv\u00e1me \"levn\u00e9 \u010d\u00ednsk\u00e9\" \u017elut\u00e9, na 5-9V (doporu\u010deno 7) DC motory Expand\u00e9r I2C PCF 8 bit + v\u00fdkonov\u00fd budi\u010d ULN. Pro pokra\u010dov\u00e1n\u00ed - materi\u00e1ly k n\u011bkter\u00fdm Workshop\u016fm: Pr\u00e1ce s daty a datab\u00e1ze \ud83e\udc52 Workshop Python DATA Tvo\u0159en\u00ed jednoduch\u00e9 hry \ud83e\udc52 Workshop EDUshield1) Jednoduch\u00e9 uk\u00e1zky N\u00e1hodn\u011b blikaj\u00edci ledka from utils.octopus_lib import randint from components.led import Led led = Led(2) # random blink def randblink(n): for _ in range(n): delay = randint(100,500) print(delay) led.blink(delay) >>> randblink(10)","title":"Tutorial EDUkit1"},{"location":"tutorial-edukit1/#tutorial-edu_kit1","text":"Samostatn\u00e1 str\u00e1nka, kter\u00e1 podrobn\u011bji popisuje EDU_KIT1: https://www.octopuslab.cz/edu-kit1/ P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e m\u00e1te na sv\u00e9m ESP32 Do-It nainstalovan\u00fd Micropython . V \u00favodn\u00edch tutorial 1 (Python) a tutorial 2 (Micropython | ESP) jsme se sezn\u00e1mili s \u00fapln\u00fdmi z\u00e1klady. V tomto dal\u0161\u00edm pokra\u010dov\u00e1n\u00ed u\u017e budeme pot\u0159ebovat ESP32 .","title":"Tutorial - EDU_KIT1"},{"location":"tutorial-edukit1/#led","text":"Led dioda osazen\u00e1 na ESP32 Do-It modulu je na Pinu 2. P\u00e1r uk\u00e1zek - \"blik\u00e1me LEDkou\" hned n\u011bkolika zp\u016fsoby: from time import sleep from components.led import Led led = Led(2) # 1 >>> while True: ... led.value(1) ... sleep(1) ... led.value(0) ... sleep(1) # 2 >>> while True: ... led.value(not led.value()) ... sleep(0.5) # 3 for _ in range(10): \u2026 blink(led,1000,1000) \u2026 ctrl+C (pro p\u0159eru\u0161en\u00ed b\u011bhu programu) \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / led","title":"\u2022 Led"},{"location":"tutorial-edukit1/#rgb-led","text":"RGB barevn\u00e1 dioda je na WS konektoru. Tento typ se d\u00e1 p\u0159ipojit i na dal\u0161\u00ed konektor a diod WS se m\u016f\u017ee \u0159adit v\u00edc z sebou. (A\u017e 127, na to je ale pot\u0159eba pos\u00edlit nap\u00e1jen\u00ed nap\u011bt\u00ed 5V) Pou\u017e\u00edv\u00e1me \u010dast\u011bji p\u00e1sek 8-mi diod, krou\u017eek 12 nebo 18, tak\u00e9 matice 4x4 a spojovan\u00e9 do v\u011bt\u0161\u00edho bloku. >>> from components.rgb import Rgb >>> ws = Rgb(32) >>> ws.test() # problikne R G B cca - default 500ms >>> ws.test(100) # s parametrem 100ms >>> import colors_rgb as rgb # definice barev v /lib > RED, GREEN, BLUE, ORANGE, BLACK (nesv\u00edt\u00ed) >>> ws.color(rgb.BLUE) # zobrazen\u00ed barvy, rgb.RED/rgb.GREEN ... >>> ws.color((128,0,0)) # parametr color je (128,0,0) >>> ws.rainbow_cycle() # \"projedou barvy\" duhy # ws2 = Rgb(pin,num) # > \u010d\u00edslo pinu a po\u010det LEDek >>> ws2 = Rgb(32,8) >>> ws.color(5,rgb.RED) > p\u0159i LED p\u00e1sku > nastaven\u00ed p\u00e1t\u00e9 na RED \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / rgb","title":"\u2022 RGB Led"},{"location":"tutorial-edukit1/#display7","text":"Obl\u00edben\u00fd modul s obvodem MAX na sb\u011brnici SPI p\u0159\u00edmo p\u0159ipojiteln\u00fd na OCTOBUS-display sb\u011brnici. \ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / display7","title":"\u2022 Display7"},{"location":"tutorial-edukit1/#servo","text":"\ud83e\udc52 referen\u010dn\u00ed p\u0159\u00edru\u010dka / servo","title":"\u2022 Servo"},{"location":"tutorial-edukit1/#senzory","text":"","title":"\u2022 Senzory"},{"location":"tutorial-edukit1/#moznosti-rozsireni","text":"","title":"\u2022 Mo\u017enosti roz\u0161\u00ed\u0159en\u00ed"},{"location":"tutorial-edukit1/#mechatronika","text":"Modul ROBOT board se d\u00e1 v jedn\u00e9 verzi zapojen\u00ed osadit \"H-m\u016fstkem\" L293, kter\u00fdm se daj\u00ed ovl\u00e1dat dva DC motory. Pou\u017e\u00edv\u00e1me \"levn\u00e9 \u010d\u00ednsk\u00e9\" \u017elut\u00e9, na 5-9V (doporu\u010deno 7)","title":"Mechatronika"},{"location":"tutorial-edukit1/#dc-motory","text":"","title":"DC motory"},{"location":"tutorial-edukit1/#expander-i2c","text":"PCF 8 bit + v\u00fdkonov\u00fd budi\u010d ULN. Pro pokra\u010dov\u00e1n\u00ed - materi\u00e1ly k n\u011bkter\u00fdm Workshop\u016fm: Pr\u00e1ce s daty a datab\u00e1ze \ud83e\udc52 Workshop Python DATA Tvo\u0159en\u00ed jednoduch\u00e9 hry \ud83e\udc52 Workshop EDUshield1)","title":"Expand\u00e9r I2C"},{"location":"tutorial-edukit1/#jednoduche-ukazky","text":"","title":"Jednoduch\u00e9 uk\u00e1zky"},{"location":"tutorial-edukit1/#nahodne-blikajici-ledka","text":"from utils.octopus_lib import randint from components.led import Led led = Led(2) # random blink def randblink(n): for _ in range(n): delay = randint(100,500) print(delay) led.blink(delay) >>> randblink(10)","title":"N\u00e1hodn\u011b blikaj\u00edci ledka"},{"location":"tutorial-edukit2/","text":"Tutorial - EDU_KIT2 p \u0159 i p r a v u j e m e","title":"Tutorial EDUkit2"},{"location":"tutorial-edukit2/#tutorial-edu_kit2","text":"p \u0159 i p r a v u j e m e","title":"Tutorial - EDU_KIT2"},{"location":"tutorial-robot/","text":"Tutorial - Robot p \u0159 i p r a v u j e m e","title":"Tutorial Robot"},{"location":"tutorial-robot/#tutorial-robot","text":"p \u0159 i p r a v u j e m e","title":"Tutorial - Robot"},{"location":"tutorial1-python/","text":"Tutorial 1 P\u00e1r prvn\u00edch pokus\u016f s Pythonem V\u011bt\u0161ina uk\u00e1zek z tohoto prvn\u00edho tutori\u00e1lu bude fungovat i na b\u011b\u017en\u00e9m po\u010d\u00edta\u010di p\u0159i pou\u017eit\u00ed Pythonu (verze 3.5+) . C\u00edlem je z\u00e1kladn\u00ed p\u0159edstaven\u00ed, \u010d\u00e1ste\u010dn\u00e9 pochopen\u00ed a procvi\u010den\u00ed element\u00e1rn\u00edch z\u00e1klad\u016f. Pokra\u010dov\u00e1n\u00ed, kde u\u017e vyu\u017eijeme ESP32 s MicroPythonem, je v samostatn\u00e9m tutori\u00e1lu: Tutorial2 . Pro ten u\u017e si ale mus\u00edte nainstalovat MicroPython na ESP. CTRL-C Po restartu n\u00e1m ESP32 pos\u00edl\u00e1 do na\u0161eho po\u010d\u00edta\u010de na termin\u00e1l prvn\u00ed zpr\u00e1vy s vyu\u017eit\u00edm REPL (Read\u2013eval\u2013print loop). Zelen\u011b jsou syst\u00e9mov\u00e9 informace, kter\u00e9 n\u00e1s v tuto chv\u00edli nezaj\u00edmaj\u00ed. Po stisknut\u00ed CTRL-C se p\u0159eru\u0161\u00ed b\u011bh programu a uvid\u00edme verzi MicroPythonu: MicroPython v1.13-7-g5060270c6-build-octopusLAB on 2020-09-05; ESP32 module (spiram) with ESP32 Type \"help()\" for more information. >>> Samoz\u0159ejm\u011b plat\u00ed i pro Python , \u017ee CTRL-C p\u0159eru\u0161\u00ed b\u011bh programu. >>> >>> toto je takzvan\u00fd \"prompt\", termin\u00e1lov\u00e1 v\u00fdzva, abychom tam n\u011bco napsali - p\u0159\u00edkaz nebo \"posloupnost p\u0159\u00edkaz\u016f\". >>> a = 123 # do prom\u011bnn\u00e9 s n\u00e1zvem \"a\" se ulo\u017eila hodnota (\u010d\u00edslo 123) >>> a # vytiskne / zobraz\u00ed hodnotu prom\u011bnn\u00e9 123 # nebo print(a) >>> a + 10 133 # zobraz\u00ed vypo\u010dtenou hodnotu (jako kalkula\u010dka) Python zde b\u011b\u017e\u00ed v takzvan\u00e9m interaktivn\u00edm m\u00f3du. Po ka\u017ed\u00e9m vlo\u017een\u00ed \u0159\u00e1dku (nebo bloku \u0159\u00e1dk\u016f) se okam\u017eit\u011b napsan\u00fd p\u0159\u00edkaz (nebo skupina p\u0159\u00edkaz\u016f) provede a \u010dek\u00e1 na dal\u0161\u00ed v\u00fdzvu zobrazen\u00edm >>> . Je to v\u00fdhodn\u00e9 pro testov\u00e1n\u00ed jednotliv\u00fdch p\u0159\u00edkaz\u016f, pro v\u00fduku nebo pr\u016fb\u011b\u017en\u00e9 modifikace. >>> x = y = z = 123 # p\u0159i\u0159azen\u00ed pro v\u00edce prom\u011bnn\u00fdch najednou >>> z 123 >>> x, y = 123, 567 # p\u0159i\u0159azen\u00ed v\u00edce hodnot >>> y 567 Math N\u011bkdy chceme pou\u017e\u00edt i slo\u017eit\u011bj\u0161\u00ed matematick\u00e9 v\u00fdrazy, ne\u017e je + s\u010d\u00edt\u00e1n\u00ed | - od\u010d\u00edt\u00e1n\u00ed | * n\u00e1soben\u00ed | / d\u011blen\u00ed Pro dal\u0161\u00ed matematick\u00e9 funkce a konstanty pou\u017eijeme knihovnu math . >>> import math # knihovnu importujeme, a\u017e kdy\u017e ji pot\u0159ebujeme, # jinak n\u00e1m zbyte\u010dn\u011b blokuje opera\u010dn\u00ed pam\u011b\u0165 >>> math.log10(1000) # funkce logaritmus o z\u00e1kladu deset je jednou z metod knihovny math 3.0 >>> math.pi # konstanta P\u00ed (nen\u00ed to metoda!) 3.141593 # a po\u010det desetinn\u00fdch m\u00edst je omezen\u00fd Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm hardware. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz >>> hodnota = 123 >>> print(hodnota) # > 123 | vyp\u00ed\u0161e obsah prom\u011bnn\u00e9 s n\u00e1zvem hodnota (korektn\u011b) >>> print(math.pi) # > 3.141593 Help Zkuste si napsat help() . V Pythonu uvid\u00edte asi n\u011bco jin\u00e9ho ne\u017e v obecn\u00e9m MicroPythonu. v\u00edce... (klikn\u011bte pro obsah) V MicroPythonu pro ESP se po help() vyp\u00ed\u0161e: >>> help() Welcome to MicroPython on the ESP32! For generic online docs please visit http://docs.micropython.org/ For access to the hardware use the 'machine' module: import machine pin12 = machine.Pin(12, machine.Pin.OUT) pin12.value(1) pin13 = machine.Pin(13, machine.Pin.IN, machine.Pin.PULL_UP) print(pin13.value()) i2c = machine.I2C(scl=machine.Pin(21), sda=machine.Pin(22)) i2c.scan() i2c.writeto(addr, b'1234') i2c.readfrom(addr, 4) Basic WiFi configuration: import network sta_if = network.WLAN(network.STA_IF); sta_if.active(True) sta_if.scan() # Scan for available access points sta_if.connect(\" \", \" \") # Connect to an AP sta_if.isconnected() # Check for successful connection Control commands: CTRL-A -- on a blank line, enter raw REPL mode CTRL-B -- on a blank line, enter normal REPL mode CTRL-C -- interrupt a running program CTRL-D -- on a blank line, do a soft reset of the board CTRL-E -- on a blank line, enter paste mode For further help on a specific object, type help(obj) For a list of available modules, type help('modules') Oper\u00e1tory Sem pat\u0159\u00ed nap\u0159\u00edklad + pro s\u010d\u00edt\u00e1n\u00ed, - pro od\u010d\u00edt\u00e1n\u00ed, * n\u00e1soben\u00ed a / d\u011blen\u00ed. A je jich mnohem v\u00edce. v\u00edce... (klikn\u011bte pro obsah) Informativn\u00ed v\u00fd\u010det oper\u00e1tor\u016f v MicroPythonu: Operator Description ======================== ================== lambda Lambda expression or Boolean OR and Boolean AND not x Boolean NOT in, not in Membership tests is, is not Identity tests < , < =, >, >=, < >, !=, == Comparisons | Bitwise OR ^ Bitwise XOR & Bitwise AND < < , >> Shifts +, -\u00ad Addition and subtraction *, /, % Multiplication, division, remainder +x, \u00ad-x Positive, negative ~x Bitwise not ** Exponentiation x.attribute Attribute reference x[index] Subscription x[index:index] Slicing f(arguments...) Function call (expressions...) Binding or tuple display [expressions...] List display {key:datum...} Dictionary display `expressions...` String conversion ... V\u00fdpis dostupn\u00fdch modul\u016f >>> help(\"modules\") v\u00edce... (klikn\u011bte pro obsah), Kter\u00e9 \"moduly\" jsou aktu\u00e1ln\u011b v Micropythonu dostupn\u00e9 help(\"modules\") >>> help() *(Verze 1.13)*: __main__ inisetup ubluetooth ure _boot machine ucollections urequests _onewire math ucryptolib uselect _thread micropython uctypes usocket _uasyncio neopixel uerrno ussl _webrepl network uhashlib ustruct apa106 ntptime uhashlib usys btree onewire uheapq utils/octopus_initial builtins ssd1306 uio utils/wifi_connect cmath uarray ujson utime dht uasyncio/__init__ umqtt/robust utimeq ds18x20 uasyncio/core umqtt/simple uwebsocket esp uasyncio/event uos uzlib esp32 uasyncio/funcs upip webrepl flashbdev uasyncio/lock upip_utarfile webrepl_setup framebuf uasyncio/stream upysh websocket_helper gc ubinascii urandom Plus any modules on the filesystem A po importu se m\u016f\u017eete dot\u00e1zat na ka\u017ed\u00fd modul samostatn\u011b (podobn\u011b i math. + TAB): >>> import math >>> help(math) object <module 'math'> is of type module __name__ -- math e -- 2.718282 pi -- 3.141593 sqrt -- <function> pow -- <function> exp -- <function> expm1 -- <function> log -- <function> log2 -- <function> log10 -- <function> cosh -- <function> sinh -- <function> tanh -- <function> acosh -- <function> asinh -- <function> atanh -- <function> cos -- <function> sin -- <function> ... Python je jednoduch\u00fd logick\u00e9 \u010dlen\u011bn\u00ed se prov\u00e1d\u00ed pomoc\u00ed striktn\u00edho odsazov\u00e1n\u00ed blok\u016f pozor na z\u00e1vorky u metod a funkc\u00ed print(\"\u0159et\u011bzec\") a uvozovky pro takzvan\u00e9 \u0159et\u011bzce (shluky p\u00edsmen, co nejsou \u010d\u00edslo) pozor na dvojte\u010dku za deklarac\u00ed funkce, cyklu nebo podm\u00ednky: def funkce(parametr) : Blok programu na v\u00edce \u0159\u00e1dk\u016f a odsazov\u00e1n\u00ed V\u00edce\u0159\u00e1dkov\u00e9 \"do\u010dasn\u00e9 definice vlastn\u00edch funkc\u00ed\" se prov\u00e1d\u00ed pomoc\u00ed def n\u00e1zev(parametry): - odsazen\u00ed za n\u00e1s ud\u011bl\u00e1 REPL ... nezapomenout na dvojte\u010dku! >>> def suma(x, y): ... return x + y >>> suma (1, 2) 3 Odsazov\u00e1n\u00ed zm\u00ednili jsme u\u017e, \u017ee logick\u00e9 \u010dlen\u011bn\u00ed se prov\u00e1d\u00ed pomoc\u00ed striktn\u00edho odsazov\u00e1n\u00ed blok\u016f p\u0159i psan\u00ed jedno\u0159\u00e1dkov\u00fdch pokus\u016f v termin\u00e1lu (po >>> ) V\u00e1m po \u0159\u00e1dku kon\u010d\u00edc\u00edm dvojte\u010dkou Python s\u00e1m p\u0159edvypln\u00ed symbolick\u00e9 t\u0159i te\u010dky ... jako odsazen\u00ed viz p\u0159edchoz\u00ed uk\u00e1zka , ale pozor! P\u0159i psan\u00ed programu do souboru se odsazuje pomoc\u00ed mezer (doporu\u010deno 3 nebo 4) nebo TABul\u00e1torem. A mus\u00ed to b\u00fdt st\u00e1le stejn\u011b! Kombinace mezer a TAB je tak\u00e9 syntaktick\u00e1 chyba . P\u00ed\u0161eme-li postupn\u011b \u0159\u00e1dek po \u0159\u00e1dku - p\u0159\u00edkaz po p\u0159\u00edkaze, odsazov\u00e1n\u00ed nen\u00ed pot\u0159eba. A\u017e v definov\u00e1n\u00ed procedur, v cyklech nebo podm\u00ednk\u00e1ch - tedy \"po dvojte\u010dce\" : \u010cekac\u00ed prodlevy program bude pokra\u010dovat a\u017e po uplynut\u00ed dan\u00e9 doby: from time import sleep, sleep_ms # importujeme jen pot\u0159ebn\u00e9 knihovny sleep(1) # 1 sekunda pauza sleep_ms(100) # 100 milisekund pauza sleep_us(50) # 50 mikrosekund pauza Gener\u00e1tor n\u00e1hodn\u00fdch \u010d\u00edsel Ob\u010das se n\u00e1m v programu hod\u00ed vygenerovat pseudon\u00e1hodn\u00e9 \u010d\u00edslo (pro testov\u00e1n\u00ed, jednoduch\u00e9 hry nebo speci\u00e1ln\u00ed efekty). >>> from os import urandom >>> urandom(1)[0] 42 Smy\u010dky | Cykly i = 0 while (i < 3): print(i) i += 1 Vyp\u00ed\u0161e: 1 2 3 S \"dosp\u011bl\u00fdm\" Pythonem si m\u016f\u017eete vyzkou\u0161et v\u00edce \ud83e\udc52 naucse.python/cykly Podm\u00ednky P\u0159\u00edkazy pro \u0159\u00edzen\u00ed toku programu ( if , for , break , continue ...) if - vyhodnot\u00ed podm\u00ednku a podle toho n\u011bco vykon\u00e1 nebo pokra\u010duje (doch\u00e1z\u00ed k v\u011btven\u00ed \"toku\" programu). from os import urandom num = urandom(1)[0] if (num < 100): print(\"number {0} < 100\".format(num)) Pov\u0161imn\u011bte si konstrukce format , kdy m\u016f\u017eeme do \u0159et\u011bzce vlo\u017eit prom\u011bnnou, ani\u017e bychom ho postupn\u011b \"slepovali\". Tern\u00e1rn\u00ed oper\u00e1tor (if na jenom \u0159\u00e1dku): fruit = 'Apple' isApple = True if fruit == 'Apple' else False a, b = 10, 20 # Copy value of a in min if a < b else copy b min = a if a < b else b print(min) # 10 S \"dosp\u011bl\u00fdm\" Pythonem si m\u016f\u017eete vyzkou\u0161et v\u00edce \ud83e\udc52 naucse.python/podminky Nekone\u010dn\u00fd cyklus Je\u0161t\u011b drobn\u00e1 vsuvka - cykly a podm\u00ednky jsme zm\u00ednili v p\u0159edchoz\u00ed \u010d\u00e1sti, nyn\u00ed pou\u017eijeme jednu z\u00e1kladn\u00ed formu: \"nekone\u010dn\u00fd cyklus\": >>> while podm\u00ednka: ... prov\u00e1d\u011bj_pokud_je_spln\u011bn\u00e1_podm\u00ednka() >>> a = 0 >>> while True: ... a += 1 ... print(a) v nekone\u010dn\u00e9 smy\u010dce se maxim\u00e1ln\u00ed rychlost\u00ed vypisuje obsah zv\u011bt\u0161uj\u00edc\u00ed se prom\u011bnn\u00e9 \"a\". Vychyt\u00e1vka [TAB] Kdy\u017e chcete v Pythonu nebo MicroPythonu n\u011bco napsat, nau\u010dte se vyu\u017e\u00edvat TABul\u00e1tor (kl\u00e1vesa TAB ). Kdy\u017e nap\u0159\u00edklad po promptu >>> chcete napsat octopus_initial.setup() , zkuste napsat pouze prvn\u00edch p\u00e1r p\u00edsmen a pak zm\u00e1\u010dknout TAB : >>> oc [TAB] a syst\u00e9m v\u00e1m dopln\u00ed nebo d\u00e1 vybrat. Stejn\u011b tak po te\u010dce: octopus_initial. sta\u010d\u00ed napsat se a pak TAB - a \"na\u0161ept\u00e1va\u010d\" automaticky dopln\u00ed setup (nezapome\u0148te na z\u00e1vorky () , je to metoda). Stoj\u00ed za zm\u00ednku Python umo\u017e\u0148uje i slo\u017eit\u011bj\u0161\u00ed \"konstrukce\" typu: # vyfiltruj sud\u00e1 \u010d\u00edsla do des\u00edtky: >>> list(filter(lambda x: x%2 == 0, range(10))) [0, 2, 4, 6, 8] # do listu (pole) specifick\u00e9 trojice: >>> list(5 * x + y for x in range(5) for y in [3, 2, 1]) [3, 2, 1, 8, 7, 6, 13, 12, 11, 18, 17, 16, 23, 22, 21] Zkuste se obezn\u00e1mit s n\u011bkter\u00fdmi \"datov\u00fdmi strukturami\" typu: \u0159et\u011bzec, pole, seznam, slovn\u00edk nebo pokro\u010dilej\u0161\u00ed datab\u00e1ze. Tomuto t\u00e9matu se podrobn\u011bji v\u011bnujeme v samostatn\u00e9m workshopu: ws-python-data","title":"Tutorial 1 Python "},{"location":"tutorial1-python/#tutorial-1","text":"","title":"Tutorial 1"},{"location":"tutorial1-python/#par-prvnich-pokusu-s-pythonem","text":"V\u011bt\u0161ina uk\u00e1zek z tohoto prvn\u00edho tutori\u00e1lu bude fungovat i na b\u011b\u017en\u00e9m po\u010d\u00edta\u010di p\u0159i pou\u017eit\u00ed Pythonu (verze 3.5+) . C\u00edlem je z\u00e1kladn\u00ed p\u0159edstaven\u00ed, \u010d\u00e1ste\u010dn\u00e9 pochopen\u00ed a procvi\u010den\u00ed element\u00e1rn\u00edch z\u00e1klad\u016f. Pokra\u010dov\u00e1n\u00ed, kde u\u017e vyu\u017eijeme ESP32 s MicroPythonem, je v samostatn\u00e9m tutori\u00e1lu: Tutorial2 . Pro ten u\u017e si ale mus\u00edte nainstalovat MicroPython na ESP.","title":"P\u00e1r prvn\u00edch pokus\u016f s Pythonem"},{"location":"tutorial1-python/#ctrl-c","text":"Po restartu n\u00e1m ESP32 pos\u00edl\u00e1 do na\u0161eho po\u010d\u00edta\u010de na termin\u00e1l prvn\u00ed zpr\u00e1vy s vyu\u017eit\u00edm REPL (Read\u2013eval\u2013print loop). Zelen\u011b jsou syst\u00e9mov\u00e9 informace, kter\u00e9 n\u00e1s v tuto chv\u00edli nezaj\u00edmaj\u00ed. Po stisknut\u00ed CTRL-C se p\u0159eru\u0161\u00ed b\u011bh programu a uvid\u00edme verzi MicroPythonu: MicroPython v1.13-7-g5060270c6-build-octopusLAB on 2020-09-05; ESP32 module (spiram) with ESP32 Type \"help()\" for more information. >>> Samoz\u0159ejm\u011b plat\u00ed i pro Python , \u017ee CTRL-C p\u0159eru\u0161\u00ed b\u011bh programu.","title":"CTRL-C"},{"location":"tutorial1-python/#_1","text":">>> toto je takzvan\u00fd \"prompt\", termin\u00e1lov\u00e1 v\u00fdzva, abychom tam n\u011bco napsali - p\u0159\u00edkaz nebo \"posloupnost p\u0159\u00edkaz\u016f\". >>> a = 123 # do prom\u011bnn\u00e9 s n\u00e1zvem \"a\" se ulo\u017eila hodnota (\u010d\u00edslo 123) >>> a # vytiskne / zobraz\u00ed hodnotu prom\u011bnn\u00e9 123 # nebo print(a) >>> a + 10 133 # zobraz\u00ed vypo\u010dtenou hodnotu (jako kalkula\u010dka) Python zde b\u011b\u017e\u00ed v takzvan\u00e9m interaktivn\u00edm m\u00f3du. Po ka\u017ed\u00e9m vlo\u017een\u00ed \u0159\u00e1dku (nebo bloku \u0159\u00e1dk\u016f) se okam\u017eit\u011b napsan\u00fd p\u0159\u00edkaz (nebo skupina p\u0159\u00edkaz\u016f) provede a \u010dek\u00e1 na dal\u0161\u00ed v\u00fdzvu zobrazen\u00edm >>> . Je to v\u00fdhodn\u00e9 pro testov\u00e1n\u00ed jednotliv\u00fdch p\u0159\u00edkaz\u016f, pro v\u00fduku nebo pr\u016fb\u011b\u017en\u00e9 modifikace. >>> x = y = z = 123 # p\u0159i\u0159azen\u00ed pro v\u00edce prom\u011bnn\u00fdch najednou >>> z 123 >>> x, y = 123, 567 # p\u0159i\u0159azen\u00ed v\u00edce hodnot >>> y 567","title":"&gt;&gt;&gt;"},{"location":"tutorial1-python/#math","text":"N\u011bkdy chceme pou\u017e\u00edt i slo\u017eit\u011bj\u0161\u00ed matematick\u00e9 v\u00fdrazy, ne\u017e je + s\u010d\u00edt\u00e1n\u00ed | - od\u010d\u00edt\u00e1n\u00ed | * n\u00e1soben\u00ed | / d\u011blen\u00ed Pro dal\u0161\u00ed matematick\u00e9 funkce a konstanty pou\u017eijeme knihovnu math . >>> import math # knihovnu importujeme, a\u017e kdy\u017e ji pot\u0159ebujeme, # jinak n\u00e1m zbyte\u010dn\u011b blokuje opera\u010dn\u00ed pam\u011b\u0165 >>> math.log10(1000) # funkce logaritmus o z\u00e1kladu deset je jednou z metod knihovny math 3.0 >>> math.pi # konstanta P\u00ed (nen\u00ed to metoda!) 3.141593 # a po\u010det desetinn\u00fdch m\u00edst je omezen\u00fd Note Toto nen\u00ed v\u00fduka programov\u00e1n\u00ed \u2013 ale jen uk\u00e1zky a experimenty s p\u0159ihl\u00e9dnut\u00edm na sadu knihoven a modul\u016f octopusLab pro pr\u00e1ci s vybran\u00fdm hardware. Pro podrobn\u011bj\u0161\u00ed proniknut\u00ed do taj\u016f programov\u00e1n\u00ed v Pythonu doporu\u010dujeme: naucse.python.cz naucse.python.cz/course/mi-pyt/intro/micropython howto.py.cz >>> hodnota = 123 >>> print(hodnota) # > 123 | vyp\u00ed\u0161e obsah prom\u011bnn\u00e9 s n\u00e1zvem hodnota (korektn\u011b) >>> print(math.pi) # > 3.141593","title":"Math"},{"location":"tutorial1-python/#help","text":"Zkuste si napsat help() . V Pythonu uvid\u00edte asi n\u011bco jin\u00e9ho ne\u017e v obecn\u00e9m MicroPythonu. v\u00edce... (klikn\u011bte pro obsah) V MicroPythonu pro ESP se po help() vyp\u00ed\u0161e: >>> help() Welcome to MicroPython on the ESP32! For generic online docs please visit http://docs.micropython.org/ For access to the hardware use the 'machine' module: import machine pin12 = machine.Pin(12, machine.Pin.OUT) pin12.value(1) pin13 = machine.Pin(13, machine.Pin.IN, machine.Pin.PULL_UP) print(pin13.value()) i2c = machine.I2C(scl=machine.Pin(21), sda=machine.Pin(22)) i2c.scan() i2c.writeto(addr, b'1234') i2c.readfrom(addr, 4) Basic WiFi configuration: import network sta_if = network.WLAN(network.STA_IF); sta_if.active(True) sta_if.scan() # Scan for available access points sta_if.connect(\" \", \" \") # Connect to an AP sta_if.isconnected() # Check for successful connection Control commands: CTRL-A -- on a blank line, enter raw REPL mode CTRL-B -- on a blank line, enter normal REPL mode CTRL-C -- interrupt a running program CTRL-D -- on a blank line, do a soft reset of the board CTRL-E -- on a blank line, enter paste mode For further help on a specific object, type help(obj) For a list of available modules, type help('modules')","title":"Help"},{"location":"tutorial1-python/#operatory","text":"Sem pat\u0159\u00ed nap\u0159\u00edklad + pro s\u010d\u00edt\u00e1n\u00ed, - pro od\u010d\u00edt\u00e1n\u00ed, * n\u00e1soben\u00ed a / d\u011blen\u00ed. A je jich mnohem v\u00edce. v\u00edce... (klikn\u011bte pro obsah) Informativn\u00ed v\u00fd\u010det oper\u00e1tor\u016f v MicroPythonu: Operator Description ======================== ================== lambda Lambda expression or Boolean OR and Boolean AND not x Boolean NOT in, not in Membership tests is, is not Identity tests < , < =, >, >=, < >, !=, == Comparisons | Bitwise OR ^ Bitwise XOR & Bitwise AND < < , >> Shifts +, -\u00ad Addition and subtraction *, /, % Multiplication, division, remainder +x, \u00ad-x Positive, negative ~x Bitwise not ** Exponentiation x.attribute Attribute reference x[index] Subscription x[index:index] Slicing f(arguments...) Function call (expressions...) Binding or tuple display [expressions...] List display {key:datum...} Dictionary display `expressions...` String conversion ...","title":"Oper\u00e1tory"},{"location":"tutorial1-python/#vypis-dostupnych-modulu","text":">>> help(\"modules\") v\u00edce... (klikn\u011bte pro obsah), Kter\u00e9 \"moduly\" jsou aktu\u00e1ln\u011b v Micropythonu dostupn\u00e9 help(\"modules\") >>> help() *(Verze 1.13)*: __main__ inisetup ubluetooth ure _boot machine ucollections urequests _onewire math ucryptolib uselect _thread micropython uctypes usocket _uasyncio neopixel uerrno ussl _webrepl network uhashlib ustruct apa106 ntptime uhashlib usys btree onewire uheapq utils/octopus_initial builtins ssd1306 uio utils/wifi_connect cmath uarray ujson utime dht uasyncio/__init__ umqtt/robust utimeq ds18x20 uasyncio/core umqtt/simple uwebsocket esp uasyncio/event uos uzlib esp32 uasyncio/funcs upip webrepl flashbdev uasyncio/lock upip_utarfile webrepl_setup framebuf uasyncio/stream upysh websocket_helper gc ubinascii urandom Plus any modules on the filesystem A po importu se m\u016f\u017eete dot\u00e1zat na ka\u017ed\u00fd modul samostatn\u011b (podobn\u011b i math. + TAB): >>> import math >>> help(math) object <module 'math'> is of type module __name__ -- math e -- 2.718282 pi -- 3.141593 sqrt -- <function> pow -- <function> exp -- <function> expm1 -- <function> log -- <function> log2 -- <function> log10 -- <function> cosh -- <function> sinh -- <function> tanh -- <function> acosh -- <function> asinh -- <function> atanh -- <function> cos -- <function> sin -- <function> ... Python je jednoduch\u00fd logick\u00e9 \u010dlen\u011bn\u00ed se prov\u00e1d\u00ed pomoc\u00ed striktn\u00edho odsazov\u00e1n\u00ed blok\u016f pozor na z\u00e1vorky u metod a funkc\u00ed print(\"\u0159et\u011bzec\") a uvozovky pro takzvan\u00e9 \u0159et\u011bzce (shluky p\u00edsmen, co nejsou \u010d\u00edslo) pozor na dvojte\u010dku za deklarac\u00ed funkce, cyklu nebo podm\u00ednky: def funkce(parametr) :","title":"V\u00fdpis dostupn\u00fdch modul\u016f"},{"location":"tutorial1-python/#blok-programu-na-vice-radku-a-odsazovani","text":"V\u00edce\u0159\u00e1dkov\u00e9 \"do\u010dasn\u00e9 definice vlastn\u00edch funkc\u00ed\" se prov\u00e1d\u00ed pomoc\u00ed def n\u00e1zev(parametry): - odsazen\u00ed za n\u00e1s ud\u011bl\u00e1 REPL ... nezapomenout na dvojte\u010dku! >>> def suma(x, y): ... return x + y >>> suma (1, 2) 3 Odsazov\u00e1n\u00ed zm\u00ednili jsme u\u017e, \u017ee logick\u00e9 \u010dlen\u011bn\u00ed se prov\u00e1d\u00ed pomoc\u00ed striktn\u00edho odsazov\u00e1n\u00ed blok\u016f p\u0159i psan\u00ed jedno\u0159\u00e1dkov\u00fdch pokus\u016f v termin\u00e1lu (po >>> ) V\u00e1m po \u0159\u00e1dku kon\u010d\u00edc\u00edm dvojte\u010dkou Python s\u00e1m p\u0159edvypln\u00ed symbolick\u00e9 t\u0159i te\u010dky ... jako odsazen\u00ed viz p\u0159edchoz\u00ed uk\u00e1zka , ale pozor! P\u0159i psan\u00ed programu do souboru se odsazuje pomoc\u00ed mezer (doporu\u010deno 3 nebo 4) nebo TABul\u00e1torem. A mus\u00ed to b\u00fdt st\u00e1le stejn\u011b! Kombinace mezer a TAB je tak\u00e9 syntaktick\u00e1 chyba . P\u00ed\u0161eme-li postupn\u011b \u0159\u00e1dek po \u0159\u00e1dku - p\u0159\u00edkaz po p\u0159\u00edkaze, odsazov\u00e1n\u00ed nen\u00ed pot\u0159eba. A\u017e v definov\u00e1n\u00ed procedur, v cyklech nebo podm\u00ednk\u00e1ch - tedy \"po dvojte\u010dce\" :","title":"Blok programu na v\u00edce \u0159\u00e1dk\u016f a odsazov\u00e1n\u00ed"},{"location":"tutorial1-python/#cekaci-prodlevy","text":"program bude pokra\u010dovat a\u017e po uplynut\u00ed dan\u00e9 doby: from time import sleep, sleep_ms # importujeme jen pot\u0159ebn\u00e9 knihovny sleep(1) # 1 sekunda pauza sleep_ms(100) # 100 milisekund pauza sleep_us(50) # 50 mikrosekund pauza","title":"\u010cekac\u00ed prodlevy"},{"location":"tutorial1-python/#generator-nahodnych-cisel","text":"Ob\u010das se n\u00e1m v programu hod\u00ed vygenerovat pseudon\u00e1hodn\u00e9 \u010d\u00edslo (pro testov\u00e1n\u00ed, jednoduch\u00e9 hry nebo speci\u00e1ln\u00ed efekty). >>> from os import urandom >>> urandom(1)[0] 42","title":"Gener\u00e1tor n\u00e1hodn\u00fdch \u010d\u00edsel"},{"location":"tutorial1-python/#smycky-cykly","text":"i = 0 while (i < 3): print(i) i += 1 Vyp\u00ed\u0161e: 1 2 3 S \"dosp\u011bl\u00fdm\" Pythonem si m\u016f\u017eete vyzkou\u0161et v\u00edce \ud83e\udc52 naucse.python/cykly","title":"Smy\u010dky | Cykly"},{"location":"tutorial1-python/#podminky","text":"P\u0159\u00edkazy pro \u0159\u00edzen\u00ed toku programu ( if , for , break , continue ...) if - vyhodnot\u00ed podm\u00ednku a podle toho n\u011bco vykon\u00e1 nebo pokra\u010duje (doch\u00e1z\u00ed k v\u011btven\u00ed \"toku\" programu). from os import urandom num = urandom(1)[0] if (num < 100): print(\"number {0} < 100\".format(num)) Pov\u0161imn\u011bte si konstrukce format , kdy m\u016f\u017eeme do \u0159et\u011bzce vlo\u017eit prom\u011bnnou, ani\u017e bychom ho postupn\u011b \"slepovali\". Tern\u00e1rn\u00ed oper\u00e1tor (if na jenom \u0159\u00e1dku): fruit = 'Apple' isApple = True if fruit == 'Apple' else False a, b = 10, 20 # Copy value of a in min if a < b else copy b min = a if a < b else b print(min) # 10 S \"dosp\u011bl\u00fdm\" Pythonem si m\u016f\u017eete vyzkou\u0161et v\u00edce \ud83e\udc52 naucse.python/podminky","title":"Podm\u00ednky"},{"location":"tutorial1-python/#nekonecny-cyklus","text":"Je\u0161t\u011b drobn\u00e1 vsuvka - cykly a podm\u00ednky jsme zm\u00ednili v p\u0159edchoz\u00ed \u010d\u00e1sti, nyn\u00ed pou\u017eijeme jednu z\u00e1kladn\u00ed formu: \"nekone\u010dn\u00fd cyklus\": >>> while podm\u00ednka: ... prov\u00e1d\u011bj_pokud_je_spln\u011bn\u00e1_podm\u00ednka() >>> a = 0 >>> while True: ... a += 1 ... print(a) v nekone\u010dn\u00e9 smy\u010dce se maxim\u00e1ln\u00ed rychlost\u00ed vypisuje obsah zv\u011bt\u0161uj\u00edc\u00ed se prom\u011bnn\u00e9 \"a\". Vychyt\u00e1vka [TAB] Kdy\u017e chcete v Pythonu nebo MicroPythonu n\u011bco napsat, nau\u010dte se vyu\u017e\u00edvat TABul\u00e1tor (kl\u00e1vesa TAB ). Kdy\u017e nap\u0159\u00edklad po promptu >>> chcete napsat octopus_initial.setup() , zkuste napsat pouze prvn\u00edch p\u00e1r p\u00edsmen a pak zm\u00e1\u010dknout TAB : >>> oc [TAB] a syst\u00e9m v\u00e1m dopln\u00ed nebo d\u00e1 vybrat. Stejn\u011b tak po te\u010dce: octopus_initial. sta\u010d\u00ed napsat se a pak TAB - a \"na\u0161ept\u00e1va\u010d\" automaticky dopln\u00ed setup (nezapome\u0148te na z\u00e1vorky () , je to metoda).","title":"Nekone\u010dn\u00fd cyklus"},{"location":"tutorial1-python/#stoji-za-zminku","text":"Python umo\u017e\u0148uje i slo\u017eit\u011bj\u0161\u00ed \"konstrukce\" typu: # vyfiltruj sud\u00e1 \u010d\u00edsla do des\u00edtky: >>> list(filter(lambda x: x%2 == 0, range(10))) [0, 2, 4, 6, 8] # do listu (pole) specifick\u00e9 trojice: >>> list(5 * x + y for x in range(5) for y in [3, 2, 1]) [3, 2, 1, 8, 7, 6, 13, 12, 11, 18, 17, 16, 23, 22, 21] Zkuste se obezn\u00e1mit s n\u011bkter\u00fdmi \"datov\u00fdmi strukturami\" typu: \u0159et\u011bzec, pole, seznam, slovn\u00edk nebo pokro\u010dilej\u0161\u00ed datab\u00e1ze. Tomuto t\u00e9matu se podrobn\u011bji v\u011bnujeme v samostatn\u00e9m workshopu: ws-python-data","title":"Stoj\u00ed za zm\u00ednku"},{"location":"tutorial2-micropython-esp/","text":"Tutorial 2 V p\u0159edchoz\u00edm tutorial 1 jsme se sezn\u00e1mili s \u00fapln\u00fdmi z\u00e1klady Pythonu. V tomto druh\u00e9m pokra\u010dov\u00e1n\u00ed u\u017e budeme pot\u0159ebovat ESP32. P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e m\u00e1te na sv\u00e9m ESP nainstalovan\u00fd Micropython . ESP32 - DoIt nebo ESP32board REPL U\u017e jsme si uk\u00e1zali CTRL-C , pro zastaven\u00ed b\u011bhu programu v ESP. Pro komunikaci p\u0159es Termin\u00e1l se pou\u017e\u00edv\u00e1 takzvan\u00fd REPL . V\u00fd\u010det nejpou\u017e\u00edvan\u011bj\u0161\u00edch zkratek pro pr\u00e1ci s REPLem CTRL-C (p\u0159eru\u0161en\u00ed b\u011b\u017e\u00edc\u00edho programu) CTRL-D (soft reset ESP) CTRL-E (p\u0159ep\u00edn\u00e1n\u00ed \"paste mode\") Rozsv\u00edt\u00edme LED diodu? Na velk\u00e9 \u010d\u00e1sti ESP modul\u016f m\u00e1me k dispozici vestav\u011bnou sv\u00edtivou diodu na PINU 2. (Co\u017e vych\u00e1z\u00ed nejsp\u00ed\u0161 z nepsan\u00e9 dohody p\u016fvodem z Arduina) Nejjednodu\u0161\u0161\u00ed, jak nastavit hodnotu value() na pinu Pin je n\u00e1sleduj\u00edc\u00ed zp\u016fsob: >>> from machine import Pin >>> led = Pin(2, Pin.OUT) >>> led.value(1) (Zm\u011bnou stavu / hodnoty (value) z 0 na 1 se rozsv\u00edt\u00ed LED dioda) T\u0159\u00eddu Pin jsme roz\u0161\u00ed\u0159ili o dal\u0161\u00ed metody, kter\u00e9 by mohla m\u00edt LED dioda a vznikla tak t\u0159\u00edda Led v adreas\u00e1\u0159i components . Nen\u00ed to nic sv\u011btoborn\u00e9ho, ale u slo\u017eit\u011bj\u0161\u00edch roz\u0161\u00ed\u0159en\u00ed se hod\u00ed v\u011bd\u011bt, jak na to. Ka\u017edop\u00e1dn\u011b se n\u00e1m pou\u017eit\u00ed trochu zjednodu\u0161\u00ed: >>> from components.led import Led >>> led = Led(2) >>> led.value(1) # nen\u00ed pot\u0159eba Pin.OUT - je obsa\u017eeno ve t\u0159\u00edd\u011b Led >>> led.blink() # nov\u00e1 metoda >>> led.toggle() Popis t\u0159\u00eddy Led \ud83e\udc52 components/led A zdrojov\u00fd k\u00f3d knihovny \ud83e\udc52 github//components/led Teplota u procesoru >>> import esp32 >>> esp32.raw_temperature() 127 Hallova sonda - magnetick\u00e9ho pole >>> import esp32 >>> esp32.hall_sensor() 129 # cca standard hodnota >>> esp32.hall_sensor() 976 # po p\u0159ilo\u017een\u00ed magnetu Ostatn\u00ed metody knihovny ESP32 v origin\u00e1ln\u00ed anglick\u00e9 dokumentaci \ud83e\udc52 library/esp32 Piezzo Pro dal\u0161\u00ed pokus je vhodn\u00e9 m\u00edt u\u017e krom\u011b modulu i n\u011bjakou mo\u017enost p\u0159ipojid dal\u0161\u00ed LED diodu nebo nap\u0159\u00edklad mal\u00fd piezzo \"p\u00edp\u00e1k\": from components.buzzer import Buzzer piezzo = Buzzer(18) piezzo.beep() # nap\u0159\u00edmo p\u0159es octopus(): beep() # z\u00e1kladn\u00ed p\u00edpnut\u00ed (1000,50) > 1kHz na 50ms beep(440,500) # komorn\u00ed a 440Hz na 0.5s >>> from components.buzzer import notes >>> Notes.A4 440 #k dispozici jsou t\u00f3ny C3-C7 >>> buzzer.play_tone(Notes.A4) # = tone(440) V\u00edce\u0159\u00e1dkov\u00e9 programy - funkce, podm\u00ednky a cykly Opakov\u00e1n\u00ed a shrnut\u00ed. Oby\u010dejn\u00e1 sekvence p\u0159\u00edkaz\u016f Zat\u00edm jsme pou\u017e\u00edvali termin\u00e1l a v\u011bt\u0161inou n\u00e1m sta\u010dil jeden p\u0159\u00edkaz nebo postupn\u00e1 sekvence p\u0159\u00edkaz\u016f na n\u011bkolika m\u00e1lo \u0159\u00e1dc\u00edch: >>> from machine import Pin >>> led = Pin(2, Pin.OUT) >>> led.value(1) U\u017e jsem se o tom zm\u00ednili n\u011bkolikr\u00e1t a u\u017e byste to mohli m\u00edt i za\u017eit\u00e9. Po odesl\u00e1n\u00ed (ENTRem) mikrokontrol\u00e9r p\u0159\u00edkazy na \u0159\u00e1dku vykon\u00e1 a op\u011bt n\u00e1m ozn\u00e1m\u00ed sv\u00e9 dal\u0161\u00ed o\u010dek\u00e1v\u00e1n\u00ed pro nov\u00e9 pokyny promptem >>> . Kon\u010d\u00ed-li v\u0161ak \u0159\u00e1dek dvojte\u010dkou : , Python to vyhodnot\u00ed jako \"blok\" a vyzve n\u00e1s pro pokra\u010dov\u00e1n\u00ed t\u0159emi te\u010dkami ... : Funkce Funkce v Pythonu je sp\u00ed\u0161e podprogram, p\u0159esn\u011bji \"metoda\", jakou se daj\u00ed zpracovat r\u016fzn\u00e9 vstupn\u00ed veli\u010diny. Podrobn\u011bji na \ud83e\udc52 naucse.python.cz/../functions A st\u00e1hn\u011bte si tak\u00e9 \ud83e\udc52 tah\u00e1k s u\u017eite\u010dn\u00fdmi funkcemi Definov\u00e1n\u00ed vlastn\u00ed funkce - def Vlastn\u00ed funkce je \"podprogram\", kter\u00fd si vytvo\u0159\u00edme sami pro opakuj\u00edc\u00ed se bloky k\u00f3du nebo pro zp\u0159ehledn\u011bn\u00ed rozs\u00e1hlej\u0161\u00edch program\u016f. Podle p\u0159\u00edkazu def a dvojte\u010dky : na konci \u0159\u00e1dku pozn\u00e1 Python, \u017ee u\u017eivatel definuje svou vlastn\u00ed funkci, t\u0159eba pro sou\u010det dvou vstupn\u00edch \u010d\u00edsel: >>> def suma(x, y): ... return x + y >>> suma(1, 2) 3 Ani v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku/promptu >>> nezapom\u00ednejte na odsazen\u00ed. Po ... je nutno ud\u011blat TAB nebo \"p\u00e1r mezer\" (doporu\u010deno 4). Podm\u00ednka Program - to ale nen\u00ed jen oby\u010dejn\u00e1 posloupnost p\u0159\u00edkaz\u016f. \u010casto se pou\u017e\u00edv\u00e1 podm\u00edn\u011bn\u00e9 v\u011btven\u00ed - co\u017e znamen\u00e1, \u017ee na z\u00e1klad\u011b vyhodnocen\u00ed n\u011bjak\u00e9ho v\u00fdrazu se program m\u016f\u017ee chovat r\u016fzn\u00fdm zp\u016fsobem a m\u016f\u017ee i pokra\u010dovat r\u016fzn\u00fdm \"sm\u011brem\". Op\u011bt se pou\u017e\u00edv\u00e1 stejn\u00e1 konstrukce s dvojte\u010dkou za v\u00fdrazem podm\u00ednky if : >>> cislo = 10 >>> if cislo < 0: ... print(\"cislo je zaporne\") ... >>> V\u00edce podrobnost\u00ed na \ud83e\udc52 naucse.python.cz/../comparisons (porovn\u00e1v\u00e1n\u00ed) \ud83e\udc52 naucse.python.cz/../expressions (vyhodnocov\u00e1n\u00ed v\u00fdraz\u016f) Cyklus while nebo for Dvojte\u010dka je i ve while cyklu: >>> cislo = 0 >>> while cislo < 2: ... print(cislo) ... cislo = cislo + 1 ... 0 1 2 >>> Podobn\u011b pak i for cyklus: >>> for cislo in range(6): ... print(cislo, end=\"\") ... 012345>>> V\u00edce na \ud83e\udc52 naucse.python.cz/../while (cyklus while) Inspirace u jin\u00fdch \ud83e\udc52 mithru/MicroPython-Examples .","title":"Tutorial 2 Micropython ESP"},{"location":"tutorial2-micropython-esp/#tutorial-2","text":"V p\u0159edchoz\u00edm tutorial 1 jsme se sezn\u00e1mili s \u00fapln\u00fdmi z\u00e1klady Pythonu. V tomto druh\u00e9m pokra\u010dov\u00e1n\u00ed u\u017e budeme pot\u0159ebovat ESP32. P\u0159edpokl\u00e1d\u00e1me, \u017ee ji\u017e m\u00e1te na sv\u00e9m ESP nainstalovan\u00fd Micropython .","title":"Tutorial 2"},{"location":"tutorial2-micropython-esp/#esp32-doit-nebo-esp32board","text":"","title":"ESP32 - DoIt nebo ESP32board"},{"location":"tutorial2-micropython-esp/#repl","text":"U\u017e jsme si uk\u00e1zali CTRL-C , pro zastaven\u00ed b\u011bhu programu v ESP. Pro komunikaci p\u0159es Termin\u00e1l se pou\u017e\u00edv\u00e1 takzvan\u00fd REPL . V\u00fd\u010det nejpou\u017e\u00edvan\u011bj\u0161\u00edch zkratek pro pr\u00e1ci s REPLem CTRL-C (p\u0159eru\u0161en\u00ed b\u011b\u017e\u00edc\u00edho programu) CTRL-D (soft reset ESP) CTRL-E (p\u0159ep\u00edn\u00e1n\u00ed \"paste mode\")","title":"REPL"},{"location":"tutorial2-micropython-esp/#rozsvitime-led-diodu","text":"Na velk\u00e9 \u010d\u00e1sti ESP modul\u016f m\u00e1me k dispozici vestav\u011bnou sv\u00edtivou diodu na PINU 2. (Co\u017e vych\u00e1z\u00ed nejsp\u00ed\u0161 z nepsan\u00e9 dohody p\u016fvodem z Arduina) Nejjednodu\u0161\u0161\u00ed, jak nastavit hodnotu value() na pinu Pin je n\u00e1sleduj\u00edc\u00ed zp\u016fsob: >>> from machine import Pin >>> led = Pin(2, Pin.OUT) >>> led.value(1) (Zm\u011bnou stavu / hodnoty (value) z 0 na 1 se rozsv\u00edt\u00ed LED dioda) T\u0159\u00eddu Pin jsme roz\u0161\u00ed\u0159ili o dal\u0161\u00ed metody, kter\u00e9 by mohla m\u00edt LED dioda a vznikla tak t\u0159\u00edda Led v adreas\u00e1\u0159i components . Nen\u00ed to nic sv\u011btoborn\u00e9ho, ale u slo\u017eit\u011bj\u0161\u00edch roz\u0161\u00ed\u0159en\u00ed se hod\u00ed v\u011bd\u011bt, jak na to. Ka\u017edop\u00e1dn\u011b se n\u00e1m pou\u017eit\u00ed trochu zjednodu\u0161\u00ed: >>> from components.led import Led >>> led = Led(2) >>> led.value(1) # nen\u00ed pot\u0159eba Pin.OUT - je obsa\u017eeno ve t\u0159\u00edd\u011b Led >>> led.blink() # nov\u00e1 metoda >>> led.toggle() Popis t\u0159\u00eddy Led \ud83e\udc52 components/led A zdrojov\u00fd k\u00f3d knihovny \ud83e\udc52 github//components/led","title":"Rozsv\u00edt\u00edme LED diodu?"},{"location":"tutorial2-micropython-esp/#teplota-u-procesoru","text":">>> import esp32 >>> esp32.raw_temperature() 127","title":"Teplota u procesoru"},{"location":"tutorial2-micropython-esp/#hallova-sonda-magnetickeho-pole","text":">>> import esp32 >>> esp32.hall_sensor() 129 # cca standard hodnota >>> esp32.hall_sensor() 976 # po p\u0159ilo\u017een\u00ed magnetu Ostatn\u00ed metody knihovny ESP32 v origin\u00e1ln\u00ed anglick\u00e9 dokumentaci \ud83e\udc52 library/esp32","title":"Hallova sonda - magnetick\u00e9ho pole"},{"location":"tutorial2-micropython-esp/#piezzo","text":"Pro dal\u0161\u00ed pokus je vhodn\u00e9 m\u00edt u\u017e krom\u011b modulu i n\u011bjakou mo\u017enost p\u0159ipojid dal\u0161\u00ed LED diodu nebo nap\u0159\u00edklad mal\u00fd piezzo \"p\u00edp\u00e1k\": from components.buzzer import Buzzer piezzo = Buzzer(18) piezzo.beep() # nap\u0159\u00edmo p\u0159es octopus(): beep() # z\u00e1kladn\u00ed p\u00edpnut\u00ed (1000,50) > 1kHz na 50ms beep(440,500) # komorn\u00ed a 440Hz na 0.5s >>> from components.buzzer import notes >>> Notes.A4 440 #k dispozici jsou t\u00f3ny C3-C7 >>> buzzer.play_tone(Notes.A4) # = tone(440)","title":"Piezzo"},{"location":"tutorial2-micropython-esp/#viceradkove-programy-funkce-podminky-a-cykly","text":"Opakov\u00e1n\u00ed a shrnut\u00ed.","title":"V\u00edce\u0159\u00e1dkov\u00e9 programy - funkce, podm\u00ednky a cykly"},{"location":"tutorial2-micropython-esp/#obycejna-sekvence-prikazu","text":"Zat\u00edm jsme pou\u017e\u00edvali termin\u00e1l a v\u011bt\u0161inou n\u00e1m sta\u010dil jeden p\u0159\u00edkaz nebo postupn\u00e1 sekvence p\u0159\u00edkaz\u016f na n\u011bkolika m\u00e1lo \u0159\u00e1dc\u00edch: >>> from machine import Pin >>> led = Pin(2, Pin.OUT) >>> led.value(1) U\u017e jsem se o tom zm\u00ednili n\u011bkolikr\u00e1t a u\u017e byste to mohli m\u00edt i za\u017eit\u00e9. Po odesl\u00e1n\u00ed (ENTRem) mikrokontrol\u00e9r p\u0159\u00edkazy na \u0159\u00e1dku vykon\u00e1 a op\u011bt n\u00e1m ozn\u00e1m\u00ed sv\u00e9 dal\u0161\u00ed o\u010dek\u00e1v\u00e1n\u00ed pro nov\u00e9 pokyny promptem >>> . Kon\u010d\u00ed-li v\u0161ak \u0159\u00e1dek dvojte\u010dkou : , Python to vyhodnot\u00ed jako \"blok\" a vyzve n\u00e1s pro pokra\u010dov\u00e1n\u00ed t\u0159emi te\u010dkami ... :","title":"Oby\u010dejn\u00e1 sekvence p\u0159\u00edkaz\u016f"},{"location":"tutorial2-micropython-esp/#funkce","text":"Funkce v Pythonu je sp\u00ed\u0161e podprogram, p\u0159esn\u011bji \"metoda\", jakou se daj\u00ed zpracovat r\u016fzn\u00e9 vstupn\u00ed veli\u010diny. Podrobn\u011bji na \ud83e\udc52 naucse.python.cz/../functions A st\u00e1hn\u011bte si tak\u00e9 \ud83e\udc52 tah\u00e1k s u\u017eite\u010dn\u00fdmi funkcemi","title":"Funkce"},{"location":"tutorial2-micropython-esp/#definovani-vlastni-funkce-def","text":"Vlastn\u00ed funkce je \"podprogram\", kter\u00fd si vytvo\u0159\u00edme sami pro opakuj\u00edc\u00ed se bloky k\u00f3du nebo pro zp\u0159ehledn\u011bn\u00ed rozs\u00e1hlej\u0161\u00edch program\u016f. Podle p\u0159\u00edkazu def a dvojte\u010dky : na konci \u0159\u00e1dku pozn\u00e1 Python, \u017ee u\u017eivatel definuje svou vlastn\u00ed funkci, t\u0159eba pro sou\u010det dvou vstupn\u00edch \u010d\u00edsel: >>> def suma(x, y): ... return x + y >>> suma(1, 2) 3 Ani v p\u0159\u00edkazov\u00e9m \u0159\u00e1dku/promptu >>> nezapom\u00ednejte na odsazen\u00ed. Po ... je nutno ud\u011blat TAB nebo \"p\u00e1r mezer\" (doporu\u010deno 4).","title":"Definov\u00e1n\u00ed vlastn\u00ed funkce - def"},{"location":"tutorial2-micropython-esp/#podminka","text":"Program - to ale nen\u00ed jen oby\u010dejn\u00e1 posloupnost p\u0159\u00edkaz\u016f. \u010casto se pou\u017e\u00edv\u00e1 podm\u00edn\u011bn\u00e9 v\u011btven\u00ed - co\u017e znamen\u00e1, \u017ee na z\u00e1klad\u011b vyhodnocen\u00ed n\u011bjak\u00e9ho v\u00fdrazu se program m\u016f\u017ee chovat r\u016fzn\u00fdm zp\u016fsobem a m\u016f\u017ee i pokra\u010dovat r\u016fzn\u00fdm \"sm\u011brem\". Op\u011bt se pou\u017e\u00edv\u00e1 stejn\u00e1 konstrukce s dvojte\u010dkou za v\u00fdrazem podm\u00ednky if : >>> cislo = 10 >>> if cislo < 0: ... print(\"cislo je zaporne\") ... >>> V\u00edce podrobnost\u00ed na \ud83e\udc52 naucse.python.cz/../comparisons (porovn\u00e1v\u00e1n\u00ed) \ud83e\udc52 naucse.python.cz/../expressions (vyhodnocov\u00e1n\u00ed v\u00fdraz\u016f)","title":"Podm\u00ednka"},{"location":"tutorial2-micropython-esp/#cyklus-while-nebo-for","text":"Dvojte\u010dka je i ve while cyklu: >>> cislo = 0 >>> while cislo < 2: ... print(cislo) ... cislo = cislo + 1 ... 0 1 2 >>> Podobn\u011b pak i for cyklus: >>> for cislo in range(6): ... print(cislo, end=\"\") ... 012345>>> V\u00edce na \ud83e\udc52 naucse.python.cz/../while (cyklus while) Inspirace u jin\u00fdch \ud83e\udc52 mithru/MicroPython-Examples .","title":"Cyklus while nebo for"},{"location":"tutorials-intro/","text":"P\u0159edmluva k tutori\u00e1l\u016fn Pou\u017e\u00edvan\u00e9 ozna\u010den\u00ed Jednotliv\u00e9 uk\u00e1zky (v tutori\u00e1lech a workshopech) se v mez\u00edch mo\u017enost\u00ed budeme sna\u017eit d\u011blit na: note tady je n\u011bco note - jenom takov\u00e1 pozn\u00e1mka important tady je n\u011bco important - d\u016fle\u017eit\u00e9ho attention tady je n\u011bco attention - d\u016fle\u017eit\u00e9 upozorn\u011bn\u00ed warning tady je n\u011bco warning - varov\u00e1n\u00ed hint tady je n\u011bco hint - co by n\u011bm\u011blo uniknout va\u0161\u00ed pozornosti tip tady je n\u011bco tip - doporu\u010den\u00ed danger tady je n\u011bco danger - hroz\u00ed nebezpe\u010d\u00ed error tady je n\u011bco error - upozorn\u011bn\u00ed na chybu Rozd\u011blen\u00ed n\u00e1ro\u010dnosti Jednoduch\u00e9 z\u00e1klady Jedn\u00edm nebo ob\u010das i n\u011bkolika po sob\u011b jdouc\u00edmi p\u0159\u00edkazy pouze \"komandujeme\" ESP mikrokontroler s p\u0159ipojen\u00fdmi periferiemi. Jedn\u00e1 se o z\u00e1kladn\u00ed \"po\u010detn\u00ed \u00fakony\" a jednoduch\u00e9 metody pr\u00e1ce s HW, ovl\u00e1d\u00e1n\u00ed LED (sv\u00edtiv\u00e9 diody), RGB (barevn\u00e9 diody), piezo, jednoduch\u00fd podprogram... Lehce pokro\u010dilej\u0161\u00ed HW: Displeje a z\u00e1kladn\u00ed \u010didla... a mechatronika: servo motor SW: Podrobn\u011bj\u0161\u00ed vysv\u011btlen\u00ed (v\u011btven\u00ed programu - podm\u00ednka, cyklus, ...) > jednoduch\u00e9 projekty, hry a aplikace. Trochu n\u00e1ro\u010dn\u011bj\u0161\u00ed Pokud se toho boj\u00edte, ani na to nekoukejte. Dal\u0161\u00ed program\u00e1torsk\u00e1 teorie: pole, seznamy, slovn\u00edky a slo\u017eit\u00e9 datov\u00e9 struktury... a speci\u00e1ln\u00ed n\u00e1vody. Zaj\u00edmavost Tady by to mohlo b\u00fdt modr\u00e9 cel\u00e9 Pozor! Nechceme nikoho stresovat, proto to moc nevyu\u017eijeme :-P","title":"Popis markdown"},{"location":"tutorials-intro/#predmluva-k-tutorialun","text":"","title":"P\u0159edmluva k tutori\u00e1l\u016fn"},{"location":"tutorials-intro/#pouzivane-oznaceni","text":"Jednotliv\u00e9 uk\u00e1zky (v tutori\u00e1lech a workshopech) se v mez\u00edch mo\u017enost\u00ed budeme sna\u017eit d\u011blit na: note tady je n\u011bco note - jenom takov\u00e1 pozn\u00e1mka important tady je n\u011bco important - d\u016fle\u017eit\u00e9ho attention tady je n\u011bco attention - d\u016fle\u017eit\u00e9 upozorn\u011bn\u00ed warning tady je n\u011bco warning - varov\u00e1n\u00ed hint tady je n\u011bco hint - co by n\u011bm\u011blo uniknout va\u0161\u00ed pozornosti tip tady je n\u011bco tip - doporu\u010den\u00ed danger tady je n\u011bco danger - hroz\u00ed nebezpe\u010d\u00ed error tady je n\u011bco error - upozorn\u011bn\u00ed na chybu","title":"Pou\u017e\u00edvan\u00e9 ozna\u010den\u00ed"},{"location":"tutorials-intro/#rozdeleni-narocnosti","text":"Jednoduch\u00e9 z\u00e1klady Jedn\u00edm nebo ob\u010das i n\u011bkolika po sob\u011b jdouc\u00edmi p\u0159\u00edkazy pouze \"komandujeme\" ESP mikrokontroler s p\u0159ipojen\u00fdmi periferiemi. Jedn\u00e1 se o z\u00e1kladn\u00ed \"po\u010detn\u00ed \u00fakony\" a jednoduch\u00e9 metody pr\u00e1ce s HW, ovl\u00e1d\u00e1n\u00ed LED (sv\u00edtiv\u00e9 diody), RGB (barevn\u00e9 diody), piezo, jednoduch\u00fd podprogram... Lehce pokro\u010dilej\u0161\u00ed HW: Displeje a z\u00e1kladn\u00ed \u010didla... a mechatronika: servo motor SW: Podrobn\u011bj\u0161\u00ed vysv\u011btlen\u00ed (v\u011btven\u00ed programu - podm\u00ednka, cyklus, ...) > jednoduch\u00e9 projekty, hry a aplikace. Trochu n\u00e1ro\u010dn\u011bj\u0161\u00ed Pokud se toho boj\u00edte, ani na to nekoukejte. Dal\u0161\u00ed program\u00e1torsk\u00e1 teorie: pole, seznamy, slovn\u00edky a slo\u017eit\u00e9 datov\u00e9 struktury... a speci\u00e1ln\u00ed n\u00e1vody. Zaj\u00edmavost Tady by to mohlo b\u00fdt modr\u00e9 cel\u00e9 Pozor! Nechceme nikoho stresovat, proto to moc nevyu\u017eijeme :-P","title":"Rozd\u011blen\u00ed n\u00e1ro\u010dnosti"},{"location":"upyshell/","text":"UpyShell V Octopus LAB se zam\u011b\u0159ujeme na ESP32 ve spojen\u00ed s Micropythonem. Hled\u00e1me limity a mo\u017enosti maxim\u00e1ln\u00edho zjednodu\u0161en\u00ed pr\u00e1ce s mikrokontrolerem. Vyu\u017e\u00edv\u00e1me v\u00fdborn\u00fdch vlastnost\u00ed Micropythonu (objektov\u00e9, modul\u00e1rn\u00ed, file-sytem\u2026) v tuto chv\u00edli u\u017e trochu na doraz, z\u00e1pol\u00edme s rychlost\u00ed i s velikost\u00ed pam\u011bti RAM i s omezen\u00edmi dostupn\u00fdch standardn\u00edch knihoven. Emul\u00e1tor Linuxov\u00e9ho shellu P\u0159\u00edmo v Micropythonu jsme si napsali u\u017eite\u010dn\u00fd n\u00e1stroj pro pr\u00e1ci v Micropythonu, kter\u00fd se na prvn\u00ed pohled chov\u00e1 jako klasick\u00fd Linuxov\u00fd shell (p\u0159\u00edkazov\u00e1 \u0159\u00e1dka v termin\u00e1lu pro pr\u00e1ci se soubory a pod.) Jak to cel\u00e9 funguje m\u016f\u017eete vid\u011bt v kr\u00e1tk\u00e9m (zhruba dvouminutov\u00e9m) videu: \ud83e\udc52 youtube-upyshell Zdrojov\u00fd k\u00f3d je na Githubu \ud83e\udc52 /micropython-shell Po \u00fasp\u011b\u0161n\u00e9m dokon\u010den\u00ed instalace octopusLAB frameworku , m\u00e1me \"uPyShell\" k dispozici po zad\u00e1n\u00ed p\u0159\u00edkazu shell() v Micropythonov\u00e9m REPLu - pozn\u00e1te ho podle promptu >>> . >>> shell() uPyShell:~/$ Jak vid\u00edte, zm\u011bnil se \"prompt\" na \"linuxovou\" verzi: uPyShell:~/$ . Od t\u00e9to chv\u00edle nep\u00ed\u0161ete metody Micropythonu , kter\u00e9 mus\u00ed m\u00edt z\u00e1vorky () , ale p\u00ed\u0161ete \"klasick\u00e9\" p\u0159\u00edkazy, nap\u0159. ls (list - v\u00fdpis soubor\u016f aktu\u00e1ln\u00edho adres\u00e1\u0159e) uPyShell:~/$ ls uPyShell:~/$ run examples/... uPyShell:~/$ top ... Pr\u00e1ce se soubory uPyShell:~/$ help ... cd | Change Directory | cd examples / cd .. pwd | Print Working Dir. | ls | LiSt files and dir. | ls examples mkdir | make directory | mkdir newdir cp | CoPy F (default M) | cp test.py back.py rm | ReMove F | rm test.py Jednoduch\u00fd \u0159\u00e1dkov\u00fd editor Tent editor se d\u00e1 pou\u017e\u00edt pro rychl\u00e9 \u00fapravy men\u0161\u00edch soubor\u016f (\u010d\u00edtaj\u00edc\u00edch n\u011bkolik m\u00e1lo \u0159\u00e1dk\u016f). V\u017edy editujeme v jednu chv\u00edli pouze jeden vybran\u00fd \u0159\u00e1dek, co\u017e je n\u011bkdy \"lep\u0161\u00ed ne\u017e nic\". Pr\u00e1ce s WiFi Spou\u0161t\u011bn\u00ed proces\u016f V\u00edce \u201esoub\u011b\u017en\u011b b\u011b\u017e\u00edc\u00edch proces\u016f\u201c Na test se d\u00e1 pou\u017e\u00edt p\u0159\u00edkaz sleep 10 (pauza 10 vte\u0159in). Kdy\u017e se spust\u00ed s & na konci: sleep 10 & , tak se rozb\u011bhne v samostatn\u00e9m vl\u00e1kn\u011b / procesu. Stejn\u011b tak spou\u0161t\u00edme uk\u00e1zku \u2013 blik\u00e1n\u00ed ledky: run examples/blink.py & B\u011b\u017e\u00edc\u00ed procesy pak vid\u00edme v top \u2013 zat\u00edm nen\u00ed jednoduch\u00e9 je ukon\u010dit, m\u00e1me zna\u010dn\u00e1 omezen\u00ed \u2013 tak\u017ee \u0159e\u0161\u00edme do\u010dasn\u011b resetem \u2013 ale pracujeme na tom. Pro z\u00e1kladn\u00ed sezn\u00e1men\u00ed doporu\u010dujeme samosatnou str\u00e1nku workshopu \ud83e\udc52 workshop UpyShell","title":"UpyShell"},{"location":"upyshell/#upyshell","text":"V Octopus LAB se zam\u011b\u0159ujeme na ESP32 ve spojen\u00ed s Micropythonem. Hled\u00e1me limity a mo\u017enosti maxim\u00e1ln\u00edho zjednodu\u0161en\u00ed pr\u00e1ce s mikrokontrolerem. Vyu\u017e\u00edv\u00e1me v\u00fdborn\u00fdch vlastnost\u00ed Micropythonu (objektov\u00e9, modul\u00e1rn\u00ed, file-sytem\u2026) v tuto chv\u00edli u\u017e trochu na doraz, z\u00e1pol\u00edme s rychlost\u00ed i s velikost\u00ed pam\u011bti RAM i s omezen\u00edmi dostupn\u00fdch standardn\u00edch knihoven.","title":"UpyShell"},{"location":"upyshell/#emulator-linuxoveho-shellu","text":"P\u0159\u00edmo v Micropythonu jsme si napsali u\u017eite\u010dn\u00fd n\u00e1stroj pro pr\u00e1ci v Micropythonu, kter\u00fd se na prvn\u00ed pohled chov\u00e1 jako klasick\u00fd Linuxov\u00fd shell (p\u0159\u00edkazov\u00e1 \u0159\u00e1dka v termin\u00e1lu pro pr\u00e1ci se soubory a pod.) Jak to cel\u00e9 funguje m\u016f\u017eete vid\u011bt v kr\u00e1tk\u00e9m (zhruba dvouminutov\u00e9m) videu: \ud83e\udc52 youtube-upyshell Zdrojov\u00fd k\u00f3d je na Githubu \ud83e\udc52 /micropython-shell Po \u00fasp\u011b\u0161n\u00e9m dokon\u010den\u00ed instalace octopusLAB frameworku , m\u00e1me \"uPyShell\" k dispozici po zad\u00e1n\u00ed p\u0159\u00edkazu shell() v Micropythonov\u00e9m REPLu - pozn\u00e1te ho podle promptu >>> . >>> shell() uPyShell:~/$ Jak vid\u00edte, zm\u011bnil se \"prompt\" na \"linuxovou\" verzi: uPyShell:~/$ . Od t\u00e9to chv\u00edle nep\u00ed\u0161ete metody Micropythonu , kter\u00e9 mus\u00ed m\u00edt z\u00e1vorky () , ale p\u00ed\u0161ete \"klasick\u00e9\" p\u0159\u00edkazy, nap\u0159. ls (list - v\u00fdpis soubor\u016f aktu\u00e1ln\u00edho adres\u00e1\u0159e) uPyShell:~/$ ls uPyShell:~/$ run examples/... uPyShell:~/$ top ...","title":"Emul\u00e1tor Linuxov\u00e9ho shellu"},{"location":"upyshell/#prace-se-soubory","text":"uPyShell:~/$ help ... cd | Change Directory | cd examples / cd .. pwd | Print Working Dir. | ls | LiSt files and dir. | ls examples mkdir | make directory | mkdir newdir cp | CoPy F (default M) | cp test.py back.py rm | ReMove F | rm test.py","title":"Pr\u00e1ce se soubory"},{"location":"upyshell/#jednoduchy-radkovy-editor","text":"Tent editor se d\u00e1 pou\u017e\u00edt pro rychl\u00e9 \u00fapravy men\u0161\u00edch soubor\u016f (\u010d\u00edtaj\u00edc\u00edch n\u011bkolik m\u00e1lo \u0159\u00e1dk\u016f). V\u017edy editujeme v jednu chv\u00edli pouze jeden vybran\u00fd \u0159\u00e1dek, co\u017e je n\u011bkdy \"lep\u0161\u00ed ne\u017e nic\".","title":"Jednoduch\u00fd \u0159\u00e1dkov\u00fd editor"},{"location":"upyshell/#prace-s-wifi","text":"","title":"Pr\u00e1ce s WiFi"},{"location":"upyshell/#spousteni-procesu","text":"","title":"Spou\u0161t\u011bn\u00ed proces\u016f"},{"location":"upyshell/#vice-soubezne-bezicich-procesu","text":"Na test se d\u00e1 pou\u017e\u00edt p\u0159\u00edkaz sleep 10 (pauza 10 vte\u0159in). Kdy\u017e se spust\u00ed s & na konci: sleep 10 & , tak se rozb\u011bhne v samostatn\u00e9m vl\u00e1kn\u011b / procesu. Stejn\u011b tak spou\u0161t\u00edme uk\u00e1zku \u2013 blik\u00e1n\u00ed ledky: run examples/blink.py & B\u011b\u017e\u00edc\u00ed procesy pak vid\u00edme v top \u2013 zat\u00edm nen\u00ed jednoduch\u00e9 je ukon\u010dit, m\u00e1me zna\u010dn\u00e1 omezen\u00ed \u2013 tak\u017ee \u0159e\u0161\u00edme do\u010dasn\u011b resetem \u2013 ale pracujeme na tom. Pro z\u00e1kladn\u00ed sezn\u00e1men\u00ed doporu\u010dujeme samosatnou str\u00e1nku workshopu \ud83e\udc52 workshop UpyShell","title":"V\u00edce \u201esoub\u011b\u017en\u011b b\u011b\u017e\u00edc\u00edch proces\u016f\u201c"},{"location":"webserver/","text":"WebServer Na\u0161e verze robustn\u011bj\u0161\u00edho syst\u00e9mu je sou\u010d\u00e1st\u00ed Octopus FrameWork - micropython-web-ide MicroWebSrv Jedna z prvn\u00edch variant (verze 1) \ud83e\udc52 https://github.com/jczic/MicroWebSrv A jej\u00ed nejjednodu\u0161\u0161\u00ed implementace : >>> from utils.octopus_lib import w >>> w() # wifi connect >>> from microWebSrv import MicroWebSrv >>> mws = MicroWebSrv(webPath=\"www/test\") >>> mws.Start(threaded=True) Na ESP ulo\u017een\u00e1 str\u00e1nka /www/test.htm : <html> <head> <title>octopusLAB-ESP32</title> <meta charset=\"utf-8\" /> <link href=\"main.css\" rel=\"stylesheet\" type=\"text/css\" /> </head> <body> <div class=\"main\"> <h1>test</h1> <div class=\"radius_100\"> pokus </div> </body> </html> Uk\u00e1zkov\u00fd projekt: WebServer control Led (on/off) PWM nebo RGB \ud83e\udc52 github.com/...//esp32-micropython-webserver-control HTML + CSS s vyu\u017eit\u00edm Java Scriptu, data se p\u0159ed\u00e1vaj\u00ed v JSON. {Info} ESP32 UID & RAM Free {Led} On/Off control & PWM {RGB Led} {Command} {Java script} simple test {SVG} dynamic chart Dal\u0161\u00ed uk\u00e1zky (nap\u0159\u00edklad op\u011bt \"jen\" ovl\u00e1d\u00e1n\u00ed RGB Ledky) \ud83e\udc52 github.com/.../webserver1 MicroWebSrv2 Nov\u011bj\u0161\u00ed verze vyu\u017e\u00edv\u00e1 knihovnu \ud83e\udc52 MicroWebSrv2 p \u0159 i p r a v u j e m e","title":"WebServer"},{"location":"webserver/#webserver","text":"Na\u0161e verze robustn\u011bj\u0161\u00edho syst\u00e9mu je sou\u010d\u00e1st\u00ed Octopus FrameWork - micropython-web-ide","title":"WebServer"},{"location":"webserver/#microwebsrv","text":"Jedna z prvn\u00edch variant (verze 1) \ud83e\udc52 https://github.com/jczic/MicroWebSrv A jej\u00ed nejjednodu\u0161\u0161\u00ed implementace : >>> from utils.octopus_lib import w >>> w() # wifi connect >>> from microWebSrv import MicroWebSrv >>> mws = MicroWebSrv(webPath=\"www/test\") >>> mws.Start(threaded=True) Na ESP ulo\u017een\u00e1 str\u00e1nka /www/test.htm : <html> <head> <title>octopusLAB-ESP32</title> <meta charset=\"utf-8\" /> <link href=\"main.css\" rel=\"stylesheet\" type=\"text/css\" /> </head> <body> <div class=\"main\"> <h1>test</h1> <div class=\"radius_100\"> pokus </div> </body> </html> Uk\u00e1zkov\u00fd projekt: WebServer control Led (on/off) PWM nebo RGB \ud83e\udc52 github.com/...//esp32-micropython-webserver-control HTML + CSS s vyu\u017eit\u00edm Java Scriptu, data se p\u0159ed\u00e1vaj\u00ed v JSON. {Info} ESP32 UID & RAM Free {Led} On/Off control & PWM {RGB Led} {Command} {Java script} simple test {SVG} dynamic chart Dal\u0161\u00ed uk\u00e1zky (nap\u0159\u00edklad op\u011bt \"jen\" ovl\u00e1d\u00e1n\u00ed RGB Ledky) \ud83e\udc52 github.com/.../webserver1","title":"MicroWebSrv"},{"location":"webserver/#microwebsrv2","text":"Nov\u011bj\u0161\u00ed verze vyu\u017e\u00edv\u00e1 knihovnu \ud83e\udc52 MicroWebSrv2 p \u0159 i p r a v u j e m e","title":"MicroWebSrv2"},{"location":"ws-edushield1/","text":"Workshop EDUshield1 Poj\u010fme vytv\u00e1\u0159et programovat jednoduch\u00e9 hry! Realizovateln\u00e9 jsou varianty klasick\u00fdch retro her: Bour\u00e1n\u00ed zdi Ping-Pong Space invaders Formule Plo\u0161inovka Bludi\u0161t\u011b ... Co k tomu budeme po\u0159ebovat? ESP32board ide\u00e1ln\u011b s roz\u0161\u00ed\u0159enou RAM pam\u011bt\u00ed EDUshield1: Piezzo IO15 , Led2 PWM3-25 , Led3 DEV3-27 , + BTN-L I34 + BTN_R I35 OLED displej I2C","title":"logo Workshop EDUshield1"},{"location":"ws-edushield1/#workshop-edushield1","text":"","title":"Workshop EDUshield1"},{"location":"ws-edushield1/#pojdme-vytvaret-programovat-jednoduche-hry","text":"Realizovateln\u00e9 jsou varianty klasick\u00fdch retro her: Bour\u00e1n\u00ed zdi Ping-Pong Space invaders Formule Plo\u0161inovka Bludi\u0161t\u011b ...","title":"Poj\u010fme vytv\u00e1\u0159et programovat jednoduch\u00e9 hry!"},{"location":"ws-edushield1/#co-k-tomu-budeme-porebovat","text":"ESP32board ide\u00e1ln\u011b s roz\u0161\u00ed\u0159enou RAM pam\u011bt\u00ed EDUshield1: Piezzo IO15 , Led2 PWM3-25 , Led3 DEV3-27 , + BTN-L I34 + BTN_R I35 OLED displej I2C","title":"Co k tomu budeme po\u0159ebovat?"},{"location":"ws-games/","text":"EDU-KIT1 WS p\u00e1sek - \"tenis\" ... Jednoduch\u00e9 hry s EDU-KIT2 (ESP32board + OLED displej) p \u0159 i p r a v u j e m e Barevn\u00fd displej Arkanoid s barevn\u00fdm displejem https://github.com/rdagger/micropython-ssd1351","title":"workshop GAME"},{"location":"ws-games/#edu-kit1","text":"WS p\u00e1sek - \"tenis\" ...","title":"EDU-KIT1"},{"location":"ws-games/#jednoduche-hry-s-edu-kit2-esp32board-oled-displej","text":"p \u0159 i p r a v u j e m e","title":"Jednoduch\u00e9 hry s EDU-KIT2 (ESP32board + OLED displej)"},{"location":"ws-games/#barevny-displej","text":"Arkanoid s barevn\u00fdm displejem https://github.com/rdagger/micropython-ssd1351","title":"Barevn\u00fd displej"},{"location":"ws-iot/","text":"Workshop IoT WiFi referen\u010dn\u00ed p\u0159\u00edru\u010dka / wifi_connect Influx referen\u010dn\u00ed p\u0159\u00edru\u010dka / influxDB MQTT docs/MQTT Webserver docs/webserver Simple API Bez dal\u0161\u00edho koment\u00e1\u0159e uv\u00e1d\u00edme n\u011bkter\u00e9 na\u0161e uk\u00e1zky, na kter\u00fdch vysv\u011btlujeme mo\u017enosti vzd\u00e1len\u00e9ho p\u0159ipojen\u00ed ale p\u0159edev\u0161\u00edm rizika p\u0159ipojen\u00ed nezabezpe\u010den\u00e9ho - n\u011bkter\u00e9 metody dostupn\u00e9 v octopus() - a n\u00e1sledn\u011b uk\u00e1zkov\u00e1 str\u00e1nka na na\u0161em serveru: Uk\u00e1zky knihoven jsou dostupn\u00e9 v utils.octopus/ nebo utils.octopus_lib >>> getApiJson() \ud83e\udc52 http://www.octopusengine.org/api/onoff.php V\u011bt\u0161ina prvn\u00edch p\u0159\u00edklad\u016f je koncipov\u00e1na takto, ale je to sp\u00ed\u0161 uk\u00e1zka, jak se to d\u011blat nem\u00e1 - p\u0159edev\u0161\u00edm pro hned n\u011bkolik bezpe\u010dnostn\u00edch chyb. http nahradit zabezpe\u010den\u00fdm https GET nahradit POSTem c\u00edlit na ID a rad\u011bji je\u0161t\u011b zabezpe\u010dit heslem message - POSTem, MD5(UID), \"device\" jen pro kontrolu >>> getApiText() \ud83e\udc52 https://octopusengine.org/api/text19.php trochu lep\u0161\u00ed - https, zabezpe\u010deno alespo\u0148 s heslem ) ale \"ve\u0159ejn\u00fdm\" a tak\u00e9 u\u017e db\u00e1me na ID za\u0159\u00edzen\u00ed, kter\u00e9 m\u016f\u017ee slou\u017eit i jako heslo pro p\u0159\u00edstup do \"IoT s\u00edt\u011b\" (proto UID pokud nemus\u00edme - ve\u0159ejn\u011b neuv\u00e1d\u00edme) >>> SetApiValue() p\u0159ipravujeme, ale m\u016f\u017eete si zkusit sami - aktu\u00e1ln\u00ed hodnoty (nebo i log \u010di instalovan\u00e9 verze syst\u00e9mu) pak uvid\u00edte v aplikaci - zat\u00edm je to ve f\u00e1zi hrub\u00e9 rozpracovanosti: \ud83e\udc52 https://www.octopusengine.org/api/last.php","title":"Micropython workshop IoT"},{"location":"ws-iot/#workshop-iot","text":"","title":"Workshop IoT"},{"location":"ws-iot/#wifi","text":"referen\u010dn\u00ed p\u0159\u00edru\u010dka / wifi_connect","title":"WiFi"},{"location":"ws-iot/#influx","text":"referen\u010dn\u00ed p\u0159\u00edru\u010dka / influxDB","title":"Influx"},{"location":"ws-iot/#mqtt","text":"docs/MQTT","title":"MQTT"},{"location":"ws-iot/#webserver","text":"docs/webserver","title":"Webserver"},{"location":"ws-iot/#simple-api","text":"Bez dal\u0161\u00edho koment\u00e1\u0159e uv\u00e1d\u00edme n\u011bkter\u00e9 na\u0161e uk\u00e1zky, na kter\u00fdch vysv\u011btlujeme mo\u017enosti vzd\u00e1len\u00e9ho p\u0159ipojen\u00ed ale p\u0159edev\u0161\u00edm rizika p\u0159ipojen\u00ed nezabezpe\u010den\u00e9ho - n\u011bkter\u00e9 metody dostupn\u00e9 v octopus() - a n\u00e1sledn\u011b uk\u00e1zkov\u00e1 str\u00e1nka na na\u0161em serveru: Uk\u00e1zky knihoven jsou dostupn\u00e9 v utils.octopus/ nebo utils.octopus_lib >>> getApiJson() \ud83e\udc52 http://www.octopusengine.org/api/onoff.php V\u011bt\u0161ina prvn\u00edch p\u0159\u00edklad\u016f je koncipov\u00e1na takto, ale je to sp\u00ed\u0161 uk\u00e1zka, jak se to d\u011blat nem\u00e1 - p\u0159edev\u0161\u00edm pro hned n\u011bkolik bezpe\u010dnostn\u00edch chyb. http nahradit zabezpe\u010den\u00fdm https GET nahradit POSTem c\u00edlit na ID a rad\u011bji je\u0161t\u011b zabezpe\u010dit heslem message - POSTem, MD5(UID), \"device\" jen pro kontrolu >>> getApiText() \ud83e\udc52 https://octopusengine.org/api/text19.php trochu lep\u0161\u00ed - https, zabezpe\u010deno alespo\u0148 s heslem ) ale \"ve\u0159ejn\u00fdm\" a tak\u00e9 u\u017e db\u00e1me na ID za\u0159\u00edzen\u00ed, kter\u00e9 m\u016f\u017ee slou\u017eit i jako heslo pro p\u0159\u00edstup do \"IoT s\u00edt\u011b\" (proto UID pokud nemus\u00edme - ve\u0159ejn\u011b neuv\u00e1d\u00edme) >>> SetApiValue() p\u0159ipravujeme, ale m\u016f\u017eete si zkusit sami - aktu\u00e1ln\u00ed hodnoty (nebo i log \u010di instalovan\u00e9 verze syst\u00e9mu) pak uvid\u00edte v aplikaci - zat\u00edm je to ve f\u00e1zi hrub\u00e9 rozpracovanosti: \ud83e\udc52 https://www.octopusengine.org/api/last.php","title":"Simple API"},{"location":"ws-python-data/","text":"Workshop Python DATA \u0158et\u011bzce #Accessing string characters in Python str = 'octopus' print('str = ', str) #-> str = octopus print('str[0] = ', str[0]) #-> o (prvn\u00ed znak - s indexem [0]) print('str[-1] = ', str[-1]) #-> s (posledn\u00ed znak) print('str[1:5] = ', str[1:5]) #-> ctop (\"substring\" od-do) print('str[3:-2] = ', str[3:-2]) #-> op (od-do odzadu) ... Vybran\u00e9 metody: >>> 'octopus'.upper() # p\u0159evede na velk\u00e1 p\u00edsmena 'OCTOPUS' >>> 'hledej slovo jablko'.find(\"jablko\") # pozice v\u00fdskytu hledan\u00e9ho \u0159et\u011bzce 13 >>> 'hledej slovo jablko'.find(\"meloun\") # nenalezeno: -1 -1 >>> 'zamena slova jablko'.replace('jablko', 'meloun') 'zamena slova meloun' >>> ... \u0158et\u011bzcov\u00fd tah\u00e1k \ud83e\udc52 /strings-cs.pdf Pole / seznamy # definice seznamu >>> s = [3, 1, 2] >>> list(s) Seznamy podporuj\u00ed, podobn\u011b jako \u0159et\u011bzce, mnoho operac\u00ed. Nam\u00e1tkou jmenujme spojov\u00e1n\u00ed, n\u00e1soben\u00ed cel\u00fdm \u010d\u00edslem, indexov\u00e1n\u00ed, operace s podsekvencemi (slice) a dal\u0161\u00ed. Zjednodu\u0161n\u011b tedy m\u016f\u017eeme nav\u00e1zat na \u0159et\u011bzec, kter\u00fd je vlastn\u011b seznamem znak\u016f a proto n\u011bkter\u00e9 operace budou obdobn\u00e9. Nap\u0159\u00edklad spojen\u00ed + , opakov\u00e1n\u00ed * , p\u0159\u00edstup k prvku [index] ... a v\u00edce dal\u0161\u00edch. Seznamy a \u0159et\u011bzce maj\u00ed sv\u00e9 speci\u00e1ln\u00ed p\u0159\u00edkazy split a join . >>> slova = \"prvn\u00ed druh\u00e9 t\u0159et\u00ed\" >>> slova.split() #Rozd\u011bl\u00ed \u0159et\u011bzec na slova >>> data = \"123,42,66\" >>> data.split(\",\") #Rozd\u011bl\u00ed \"vstup\" dan\u00fdm odd\u011blova\u010dem (zde \u010d\u00e1rka) >>> ''.join(['o', 'c', 't','o', 'p', 'u', 's']) #Spoj\u00ed s do jednoho \u0159et\u011bzce ... Rovne\u017e lze p\u0159i\u0159adit hodnotu urcit\u00e9 subsekvenci. Takto dokonce m\u016f\u017eeme zm\u011bnit i po\u010det prvk\u016f seznamu: >>> a = [\"x\", \"y\", 123, 567] >>> # Zm\u011bna prvk\u016f: ... a[0:2] = [11, 22] >>> a [11, 22, 123, 567] >>> # Jejich odstran\u011bn\u00ed: ... a[0:2] = [] >>> a [123, 567] >>> # Vlo\u017een\u00ed nov\u00fdch: ... a[1:1] = [\"abc\", \"octopus\"] >>> a [123, \u2019abc\u2019, \u2019octopus\u2019, 567] >>> a[:0] = a # Vlo\u017een\u00ed kopie seznamu do sebe sama (stejn\u011b tak: a * 2) >>> a [123, \u2019abc\u2019, \u2019octopus\u2019, 567, 123, \u2019abc\u2019, \u2019octopus\u2019, 567] ... Je-li t\u0159eba iterovat p\u0159es prvky aritmetick\u00e9 posloupnosti, vyu\u017eijeme intern\u00ed funkci range() , kter\u00e1 vrac\u00ed tuto posloupnost jako klasick\u00fd seznam. Funkci range() p\u0159ed\u00e1me kone\u010dnou hodnotu posloupnosti. Pro v\u0161echny prvky pak bude platit, \u017ee jsou men\u0161\u00ed ne\u017e tato hodnota: >>> list(range(7)) # [0, 1, 2, 3, 4, 5, 6] >>> list(range(5, 10)) # [5, 6, 7, 8, 9] >>> list(range(0, 15, 3)) # [0, 3, 6, 9, 12] >>> list(range(-10, -100, -30)) # [-10, -40, -70] for i in range(7): print(1,end=\"\") 123456 Tah\u00e1k na seznamy \ud83e\udc52 /lists-cs.pdf Slovn\u00edky Uspo\u0159\u00e1dan\u00e9 dvojice kl\u00ed\u010d key a hodnota value maj\u00ed skv\u011bl\u00e9 vyu\u017eit\u00ed v mnoha algoritmiza\u010dn\u00edch \"probl\u00e9mech\" a \u010dasto slou\u017e\u00ed jako z\u00e1klad jednoduch\u00fdch datab\u00e1zov\u00fdch struktur. dict = {\"key\",\"value\"} # vytvo\u0159en\u00ed slovn\u00edku >>> barvy = {'jablko': 'cervena', 'hruska': 'zelena'} # Micropython bez diakritiky >>> barvy['boruvka'] = 'modra' # nov\u00fd z\u00e1znam >>> barva = barvy['jablko'] >>> hodnoty = dict(a=1, b=2) # z pojmenovan\u00fdch argument\u016f >>> hodnota = hodnoty['b'] # d.get(k) # d.pop(k) ... # iterace: d.keys() d.values() d.items() for ovoce, barva in barvy.items(): print('{}: {}'.format( ovoce, barva)) # json import json json.loads(s) json.dumps(d) json.dumps(d, indent=2, ensure_ascii=False) # : odsazen\u00ed o 2 mezery, nek\u00f3dovat diakritiku Slovn\u00edkov\u00fd tah\u00e1k \ud83e\udc52 /dicts-cs.pdf Roz\u0161\u00ed\u0159en\u00ed Micropython neobsahuje v\u0161e, co plnohodnotn\u00fd Python, ale praktick\u00e9 v\u011bci m\u016f\u017eeme \u0159e\u0161it dodate\u010dnou instalac\u00ed roz\u0161\u00ed\u0159uj\u00edc\u00edho modulu. Nap\u0159\u00edklad pro pr\u00e1ci s iter\u00e1tory itertools . Struktury Pro slo\u017eit\u011bj\u0161\u00ed struktury vyu\u017e\u00edv\u00e1me objektov\u00e9 vlastnosti p\u0159i definici t\u0159\u00edd. M\u016f\u017eeme vytv\u00e1\u0159et libovolnou slo\u017eitost, propojov\u00e1n\u00ed a vno\u0159ov\u00e1n\u00ed. Klidn\u011b se m\u016f\u017ee jednat i o \"pole objekt\u016f tvo\u0159en\u00fdch slovn\u00edky a dal\u0161\u00edmi objekty\". Datab\u00e1ze Micropython m\u00e1 implementov\u00e1nu jednoduchou \"datab\u00e1zi\" btree . Tuto jsme trochu roz\u0161\u00ed\u0159ili a zp\u0159\u00edstupnili pro pr\u00e1ci s na\u0161imi projekty. Stru\u010dn\u011b v Octopus FrameWork \ud83e\udc52 /docs/database Config Framework Octopus m\u00e1 t\u0159\u00eddu Config , kter\u00e1 usnadn\u00ed pr\u00e1ci s extern\u00edm nastavov\u00e1n\u00edm. V adres\u00e1\u0159i config je ulo\u017een json soubor, do (ze) kter\u00e9ho se ukl\u00e1daj\u00ed (na\u010d\u00edtaj\u00ed) data (hodnoty nastaven\u00ed). Podrobn\u011bji na \ud83e\udc52 /basicdoc/config . Modifikovan\u00e1 uk\u00e1zka pr\u00e1ce s Configem s vyu\u017eit\u00edm pr\u00e1ce se seznamy a slovn\u00edky: >>> from config import Config >>> promenne = \"tempMax tempMin\" # slova odd\u011blen\u00e1 mezerami >>> keys = promenne.split() # keys = [\"tempMax\",\"tempMin\"] >>> conf = Config(\"termostat\", keys) # > config/termostat.json >>> conf.setup() ================================================== S E T U P - config/termostat.json ================================================== [ 1] - tempMax - 23 [ 2] - tempMin - 18 [q] - Quit from json setup ================================================== ...","title":"Python data"},{"location":"ws-python-data/#workshop-python-data","text":"","title":"Workshop Python DATA"},{"location":"ws-python-data/#retezce","text":"#Accessing string characters in Python str = 'octopus' print('str = ', str) #-> str = octopus print('str[0] = ', str[0]) #-> o (prvn\u00ed znak - s indexem [0]) print('str[-1] = ', str[-1]) #-> s (posledn\u00ed znak) print('str[1:5] = ', str[1:5]) #-> ctop (\"substring\" od-do) print('str[3:-2] = ', str[3:-2]) #-> op (od-do odzadu) ... Vybran\u00e9 metody: >>> 'octopus'.upper() # p\u0159evede na velk\u00e1 p\u00edsmena 'OCTOPUS' >>> 'hledej slovo jablko'.find(\"jablko\") # pozice v\u00fdskytu hledan\u00e9ho \u0159et\u011bzce 13 >>> 'hledej slovo jablko'.find(\"meloun\") # nenalezeno: -1 -1 >>> 'zamena slova jablko'.replace('jablko', 'meloun') 'zamena slova meloun' >>> ... \u0158et\u011bzcov\u00fd tah\u00e1k \ud83e\udc52 /strings-cs.pdf","title":"\u0158et\u011bzce"},{"location":"ws-python-data/#pole-seznamy","text":"# definice seznamu >>> s = [3, 1, 2] >>> list(s) Seznamy podporuj\u00ed, podobn\u011b jako \u0159et\u011bzce, mnoho operac\u00ed. Nam\u00e1tkou jmenujme spojov\u00e1n\u00ed, n\u00e1soben\u00ed cel\u00fdm \u010d\u00edslem, indexov\u00e1n\u00ed, operace s podsekvencemi (slice) a dal\u0161\u00ed. Zjednodu\u0161n\u011b tedy m\u016f\u017eeme nav\u00e1zat na \u0159et\u011bzec, kter\u00fd je vlastn\u011b seznamem znak\u016f a proto n\u011bkter\u00e9 operace budou obdobn\u00e9. Nap\u0159\u00edklad spojen\u00ed + , opakov\u00e1n\u00ed * , p\u0159\u00edstup k prvku [index] ... a v\u00edce dal\u0161\u00edch. Seznamy a \u0159et\u011bzce maj\u00ed sv\u00e9 speci\u00e1ln\u00ed p\u0159\u00edkazy split a join . >>> slova = \"prvn\u00ed druh\u00e9 t\u0159et\u00ed\" >>> slova.split() #Rozd\u011bl\u00ed \u0159et\u011bzec na slova >>> data = \"123,42,66\" >>> data.split(\",\") #Rozd\u011bl\u00ed \"vstup\" dan\u00fdm odd\u011blova\u010dem (zde \u010d\u00e1rka) >>> ''.join(['o', 'c', 't','o', 'p', 'u', 's']) #Spoj\u00ed s do jednoho \u0159et\u011bzce ... Rovne\u017e lze p\u0159i\u0159adit hodnotu urcit\u00e9 subsekvenci. Takto dokonce m\u016f\u017eeme zm\u011bnit i po\u010det prvk\u016f seznamu: >>> a = [\"x\", \"y\", 123, 567] >>> # Zm\u011bna prvk\u016f: ... a[0:2] = [11, 22] >>> a [11, 22, 123, 567] >>> # Jejich odstran\u011bn\u00ed: ... a[0:2] = [] >>> a [123, 567] >>> # Vlo\u017een\u00ed nov\u00fdch: ... a[1:1] = [\"abc\", \"octopus\"] >>> a [123, \u2019abc\u2019, \u2019octopus\u2019, 567] >>> a[:0] = a # Vlo\u017een\u00ed kopie seznamu do sebe sama (stejn\u011b tak: a * 2) >>> a [123, \u2019abc\u2019, \u2019octopus\u2019, 567, 123, \u2019abc\u2019, \u2019octopus\u2019, 567] ... Je-li t\u0159eba iterovat p\u0159es prvky aritmetick\u00e9 posloupnosti, vyu\u017eijeme intern\u00ed funkci range() , kter\u00e1 vrac\u00ed tuto posloupnost jako klasick\u00fd seznam. Funkci range() p\u0159ed\u00e1me kone\u010dnou hodnotu posloupnosti. Pro v\u0161echny prvky pak bude platit, \u017ee jsou men\u0161\u00ed ne\u017e tato hodnota: >>> list(range(7)) # [0, 1, 2, 3, 4, 5, 6] >>> list(range(5, 10)) # [5, 6, 7, 8, 9] >>> list(range(0, 15, 3)) # [0, 3, 6, 9, 12] >>> list(range(-10, -100, -30)) # [-10, -40, -70] for i in range(7): print(1,end=\"\") 123456 Tah\u00e1k na seznamy \ud83e\udc52 /lists-cs.pdf","title":"Pole / seznamy"},{"location":"ws-python-data/#slovniky","text":"Uspo\u0159\u00e1dan\u00e9 dvojice kl\u00ed\u010d key a hodnota value maj\u00ed skv\u011bl\u00e9 vyu\u017eit\u00ed v mnoha algoritmiza\u010dn\u00edch \"probl\u00e9mech\" a \u010dasto slou\u017e\u00ed jako z\u00e1klad jednoduch\u00fdch datab\u00e1zov\u00fdch struktur. dict = {\"key\",\"value\"} # vytvo\u0159en\u00ed slovn\u00edku >>> barvy = {'jablko': 'cervena', 'hruska': 'zelena'} # Micropython bez diakritiky >>> barvy['boruvka'] = 'modra' # nov\u00fd z\u00e1znam >>> barva = barvy['jablko'] >>> hodnoty = dict(a=1, b=2) # z pojmenovan\u00fdch argument\u016f >>> hodnota = hodnoty['b'] # d.get(k) # d.pop(k) ... # iterace: d.keys() d.values() d.items() for ovoce, barva in barvy.items(): print('{}: {}'.format( ovoce, barva)) # json import json json.loads(s) json.dumps(d) json.dumps(d, indent=2, ensure_ascii=False) # : odsazen\u00ed o 2 mezery, nek\u00f3dovat diakritiku Slovn\u00edkov\u00fd tah\u00e1k \ud83e\udc52 /dicts-cs.pdf","title":"Slovn\u00edky"},{"location":"ws-python-data/#rozsireni","text":"Micropython neobsahuje v\u0161e, co plnohodnotn\u00fd Python, ale praktick\u00e9 v\u011bci m\u016f\u017eeme \u0159e\u0161it dodate\u010dnou instalac\u00ed roz\u0161\u00ed\u0159uj\u00edc\u00edho modulu. Nap\u0159\u00edklad pro pr\u00e1ci s iter\u00e1tory itertools .","title":"Roz\u0161\u00ed\u0159en\u00ed"},{"location":"ws-python-data/#struktury","text":"Pro slo\u017eit\u011bj\u0161\u00ed struktury vyu\u017e\u00edv\u00e1me objektov\u00e9 vlastnosti p\u0159i definici t\u0159\u00edd. M\u016f\u017eeme vytv\u00e1\u0159et libovolnou slo\u017eitost, propojov\u00e1n\u00ed a vno\u0159ov\u00e1n\u00ed. Klidn\u011b se m\u016f\u017ee jednat i o \"pole objekt\u016f tvo\u0159en\u00fdch slovn\u00edky a dal\u0161\u00edmi objekty\".","title":"Struktury"},{"location":"ws-python-data/#databaze","text":"Micropython m\u00e1 implementov\u00e1nu jednoduchou \"datab\u00e1zi\" btree . Tuto jsme trochu roz\u0161\u00ed\u0159ili a zp\u0159\u00edstupnili pro pr\u00e1ci s na\u0161imi projekty. Stru\u010dn\u011b v Octopus FrameWork \ud83e\udc52 /docs/database","title":"Datab\u00e1ze"},{"location":"ws-python-data/#config","text":"Framework Octopus m\u00e1 t\u0159\u00eddu Config , kter\u00e1 usnadn\u00ed pr\u00e1ci s extern\u00edm nastavov\u00e1n\u00edm. V adres\u00e1\u0159i config je ulo\u017een json soubor, do (ze) kter\u00e9ho se ukl\u00e1daj\u00ed (na\u010d\u00edtaj\u00ed) data (hodnoty nastaven\u00ed). Podrobn\u011bji na \ud83e\udc52 /basicdoc/config . Modifikovan\u00e1 uk\u00e1zka pr\u00e1ce s Configem s vyu\u017eit\u00edm pr\u00e1ce se seznamy a slovn\u00edky: >>> from config import Config >>> promenne = \"tempMax tempMin\" # slova odd\u011blen\u00e1 mezerami >>> keys = promenne.split() # keys = [\"tempMax\",\"tempMin\"] >>> conf = Config(\"termostat\", keys) # > config/termostat.json >>> conf.setup() ================================================== S E T U P - config/termostat.json ================================================== [ 1] - tempMax - 23 [ 2] - tempMin - 18 [q] - Quit from json setup ================================================== ...","title":"Config"},{"location":"ws-robot/","text":"Micropython ROBOT workshop","title":"Micropython workshop Robot"},{"location":"ws-robot/#micropython-robot-workshop","text":"","title":"Micropython ROBOT workshop"},{"location":"ws-upyshell/","text":"Workshop upyshell Emul\u00e1tor Linuxov\u00e9ho shellu: Samostatn\u00e9 str\u00e1nky: octopuslab.cz/upyshell octopuslab.cz/upyshell2 Zdrojov\u00e9 k\u00f3dy: octopusengine/micropython-shell Popis: \u2022 help --------+--------------------------+-------------------- | F: file name | | M: \"main.py\" | octopusLAB 2019-20 ---------+--------------------------+-------------------- clear | clear display | free | free RAM (memory) | df | Disk Free (flash) | cd | Change Directory | cd examples / cd .. pwd | Print Working Dir. | ls | LiSt files and dir. | ls examples mkdir | make directory | mkdir newdir cp | CoPy F (default M) | cp test.py back.py rm | ReMove F | rm test.py top | main proces info | wifi | wireless \"fidelity\" | wifi on / wifi scan ping | Packet InterNet Groper | ping google.com ifconfig | wifi InterFace conf. | wget | wget URL subdir download | wget https://my.web/f.py find | find \"text\" | find oled cat | concatenate F (defaul M) | cat back.py edit| edit (defaul M) | simple \"line editor\" ./ | run F | ./examples/blink.py | run F & > process/thread | run examples/blink.py & exit | back to uPy | > Micropython ---------+--------------------------+--------------------- \u2022 pr\u00e1ce se soubory uPyShell:~/$ ls # list = v\u00fdpis adres\u00e1\u0159\u016f uPyShell:~/$ mkdir test # vytvo\u0159en\u00ed podadres\u00e1\u0159e \"test\" uPyShell:~/$ cd test uPyShell:~/$ cp main.py test/main_copy.py # kop\u00edrov\u00e1n\u00ed souboru uPyShell:~/$ cat test/main_copy.py # prohl\u00ed\u017een\u00ed obsahu souboru uPyShell:~/$ rm test/main_copy.py # smaz\u00e1n\u00ed souboru \u2022 wifi uPyShell:~/$ wifi scan uPyShell:~/$ wifi off uPyShell:~/$ wifi on uPyShell:~/$ ifconfig uPyShell:~/$ ping uPyShell:~/$ wget https://your_url.path/file.py \u2022 editor Ob\u010das je pot\u0159eba ud\u011blat jen malou \u00fapravu v kr\u00e1tk\u00e9m programu. Nej\u010dast\u011bji je to postupn\u00e9 m\u011bn\u011bn\u00ed n\u011bjak\u00fdch parametr\u016f, kter\u00fdm si chceme ov\u011b\u0159it funk\u010dnost programu nebo otestovat r\u016fzn\u00e9 varianty. To byl d\u016fvod, pro\u010d jsme se dosp\u011bli k na prvn\u00ed pohled \u0161\u00edlen\u00e9mu n\u00e1padu vytvo\u0159it alespo\u0148 \"\u0159\u00e1dkov\u00fd\" editor v Micropythonu . uPyShell:~/$ edit main.py ... h h jako help vyvol\u00e1 tuto stru\u010dnou n\u00e1pov\u011bdu: h print this help p print file (current state in buffer) l toggle line numbers (copy mode) q quit q! x quit without saving changes w write file (save) wq write into file and quit i<int> [<str>] insert new line at given position [int], containing [str] or empty a<int> [<str>] insert new line after given [int], containing [str] or empty e<int> [<str>] edit line number [int], replace line with [str] or will be prompted d<int> delete line number [int] c<int>[-<int>] comment/uncomment line [int] with a #, or multiple lines if a range is provided (does each line separately) NOTE: New line at the end of every non empty file is enforced. WARNING: Do not use for editing lines exceeding your terminal width - you may BREAK TOUR FILE! \u2022 spou\u0161t\u011bn\u00ed proces\u016f V shellu nap\u00ed\u0161eme pro spu\u0161t\u011bn\u00ed programu: $ run examples/blink.led a by m\u011bla blikat Ledka. B\u011bh programu se p\u0159eru\u0161\u00ed CTRL+C, program blink se zastav\u00ed, ledka p\u0159estane blikat, ale z\u016fst\u00e1v\u00e1me po\u0159\u00e1d v shellu. V tomto popisu dominantn\u011b pou\u017eijeme tradi\u010dn\u00ed \u201eprojekt\u201c blik\u00e1n\u00ed ledkou. Je to takov\u00fd \u201ehello-word\u201c \u2013 z\u00e1kladn\u00ed a nejjednodu\u0161\u0161\u00ed p\u0159\u00edpad, kter\u00fd se d\u00e1 obvykle aplikovat na v\u011bt\u0161inu dal\u0161\u00ed slo\u017eit\u011bj\u0161\u00edch \u00faloh. Tak\u017ee kdy\u017e n\u011bkde uvid\u00edte slovn\u00ed spojen\u00ed \u201eblik\u00e1n\u00ed ledky\u201c, nemus\u00edte hned nasazovat posm\u011b\u0161n\u00fd \u00fa\u0161klebek. P\u0159edstavit si pod t\u00edm lze \u201em\u016fj program\u201c nebo t\u0159eba konkr\u00e9tn\u00ed \u201eovl\u00e1d\u00e1n\u00ed robotick\u00e9ho voz\u00edtka\u201c. Odbo\u010dka: Jak doc\u00edl\u00edme toho, aby se blik\u00e1n\u00ed Ledky samo spou\u0161t\u011blo hned po startu? Program main.py v ko\u0159enov\u00e9m adres\u00e1\u0159i, je po boot.py p\u0159esn\u011b ten, kter\u00fd se po startu spust\u00ed. Tak\u017ee si m\u016f\u017eeme v shellu jednodu\u0161e blik\u00e1n\u00ed zkop\u00edrovat: $ cp examples/blink.py main.py \u2022 RAMdisk N\u011bkdy je vhodn\u00e9 pou\u017e\u00edt (nejen v shellu) pro opakovan\u00fd z\u00e1pis do souboru na m\u00edsto disku (Flash) prostor v opere\u010dn\u00ed pam\u011bti a jen \"ob\u010das\" soubor p\u0159ehr\u00e1t na disk. P\u0159episovatelnost pam\u011b\u0165ov\u00fdch bun\u011bk FLASH disku m\u00e1 toti\u017e jist\u00e1 omezen\u00ed. Jedna z mo\u017enost\u00ed je pou\u017e\u00edt knihovnu ramdisk z utils : import os from utils.ramdisk import RAMBlockDev bdev = RAMBlockDev(512, 50) os.VfsLfs2.mkfs(bdev) # os.VfsFat.mkfs(bdev) os.mount(bdev, '/ramdisk')","title":"Upyshell workshop "},{"location":"ws-upyshell/#workshop-upyshell","text":"Emul\u00e1tor Linuxov\u00e9ho shellu: Samostatn\u00e9 str\u00e1nky: octopuslab.cz/upyshell octopuslab.cz/upyshell2 Zdrojov\u00e9 k\u00f3dy: octopusengine/micropython-shell","title":"Workshop upyshell"},{"location":"ws-upyshell/#popis","text":"","title":"Popis:"},{"location":"ws-upyshell/#help","text":"--------+--------------------------+-------------------- | F: file name | | M: \"main.py\" | octopusLAB 2019-20 ---------+--------------------------+-------------------- clear | clear display | free | free RAM (memory) | df | Disk Free (flash) | cd | Change Directory | cd examples / cd .. pwd | Print Working Dir. | ls | LiSt files and dir. | ls examples mkdir | make directory | mkdir newdir cp | CoPy F (default M) | cp test.py back.py rm | ReMove F | rm test.py top | main proces info | wifi | wireless \"fidelity\" | wifi on / wifi scan ping | Packet InterNet Groper | ping google.com ifconfig | wifi InterFace conf. | wget | wget URL subdir download | wget https://my.web/f.py find | find \"text\" | find oled cat | concatenate F (defaul M) | cat back.py edit| edit (defaul M) | simple \"line editor\" ./ | run F | ./examples/blink.py | run F & > process/thread | run examples/blink.py & exit | back to uPy | > Micropython ---------+--------------------------+---------------------","title":"\u2022 help"},{"location":"ws-upyshell/#prace-se-soubory","text":"uPyShell:~/$ ls # list = v\u00fdpis adres\u00e1\u0159\u016f uPyShell:~/$ mkdir test # vytvo\u0159en\u00ed podadres\u00e1\u0159e \"test\" uPyShell:~/$ cd test uPyShell:~/$ cp main.py test/main_copy.py # kop\u00edrov\u00e1n\u00ed souboru uPyShell:~/$ cat test/main_copy.py # prohl\u00ed\u017een\u00ed obsahu souboru uPyShell:~/$ rm test/main_copy.py # smaz\u00e1n\u00ed souboru","title":"\u2022 pr\u00e1ce se soubory"},{"location":"ws-upyshell/#wifi","text":"uPyShell:~/$ wifi scan uPyShell:~/$ wifi off uPyShell:~/$ wifi on uPyShell:~/$ ifconfig uPyShell:~/$ ping uPyShell:~/$ wget https://your_url.path/file.py","title":"\u2022 wifi"},{"location":"ws-upyshell/#editor","text":"Ob\u010das je pot\u0159eba ud\u011blat jen malou \u00fapravu v kr\u00e1tk\u00e9m programu. Nej\u010dast\u011bji je to postupn\u00e9 m\u011bn\u011bn\u00ed n\u011bjak\u00fdch parametr\u016f, kter\u00fdm si chceme ov\u011b\u0159it funk\u010dnost programu nebo otestovat r\u016fzn\u00e9 varianty. To byl d\u016fvod, pro\u010d jsme se dosp\u011bli k na prvn\u00ed pohled \u0161\u00edlen\u00e9mu n\u00e1padu vytvo\u0159it alespo\u0148 \"\u0159\u00e1dkov\u00fd\" editor v Micropythonu . uPyShell:~/$ edit main.py ... h h jako help vyvol\u00e1 tuto stru\u010dnou n\u00e1pov\u011bdu: h print this help p print file (current state in buffer) l toggle line numbers (copy mode) q quit q! x quit without saving changes w write file (save) wq write into file and quit i<int> [<str>] insert new line at given position [int], containing [str] or empty a<int> [<str>] insert new line after given [int], containing [str] or empty e<int> [<str>] edit line number [int], replace line with [str] or will be prompted d<int> delete line number [int] c<int>[-<int>] comment/uncomment line [int] with a #, or multiple lines if a range is provided (does each line separately) NOTE: New line at the end of every non empty file is enforced. WARNING: Do not use for editing lines exceeding your terminal width - you may BREAK TOUR FILE!","title":"\u2022 editor"},{"location":"ws-upyshell/#spousteni-procesu","text":"V shellu nap\u00ed\u0161eme pro spu\u0161t\u011bn\u00ed programu: $ run examples/blink.led a by m\u011bla blikat Ledka. B\u011bh programu se p\u0159eru\u0161\u00ed CTRL+C, program blink se zastav\u00ed, ledka p\u0159estane blikat, ale z\u016fst\u00e1v\u00e1me po\u0159\u00e1d v shellu. V tomto popisu dominantn\u011b pou\u017eijeme tradi\u010dn\u00ed \u201eprojekt\u201c blik\u00e1n\u00ed ledkou. Je to takov\u00fd \u201ehello-word\u201c \u2013 z\u00e1kladn\u00ed a nejjednodu\u0161\u0161\u00ed p\u0159\u00edpad, kter\u00fd se d\u00e1 obvykle aplikovat na v\u011bt\u0161inu dal\u0161\u00ed slo\u017eit\u011bj\u0161\u00edch \u00faloh. Tak\u017ee kdy\u017e n\u011bkde uvid\u00edte slovn\u00ed spojen\u00ed \u201eblik\u00e1n\u00ed ledky\u201c, nemus\u00edte hned nasazovat posm\u011b\u0161n\u00fd \u00fa\u0161klebek. P\u0159edstavit si pod t\u00edm lze \u201em\u016fj program\u201c nebo t\u0159eba konkr\u00e9tn\u00ed \u201eovl\u00e1d\u00e1n\u00ed robotick\u00e9ho voz\u00edtka\u201c. Odbo\u010dka: Jak doc\u00edl\u00edme toho, aby se blik\u00e1n\u00ed Ledky samo spou\u0161t\u011blo hned po startu? Program main.py v ko\u0159enov\u00e9m adres\u00e1\u0159i, je po boot.py p\u0159esn\u011b ten, kter\u00fd se po startu spust\u00ed. Tak\u017ee si m\u016f\u017eeme v shellu jednodu\u0161e blik\u00e1n\u00ed zkop\u00edrovat: $ cp examples/blink.py main.py","title":"\u2022 spou\u0161t\u011bn\u00ed proces\u016f"},{"location":"ws-upyshell/#ramdisk","text":"N\u011bkdy je vhodn\u00e9 pou\u017e\u00edt (nejen v shellu) pro opakovan\u00fd z\u00e1pis do souboru na m\u00edsto disku (Flash) prostor v opere\u010dn\u00ed pam\u011bti a jen \"ob\u010das\" soubor p\u0159ehr\u00e1t na disk. P\u0159episovatelnost pam\u011b\u0165ov\u00fdch bun\u011bk FLASH disku m\u00e1 toti\u017e jist\u00e1 omezen\u00ed. Jedna z mo\u017enost\u00ed je pou\u017e\u00edt knihovnu ramdisk z utils : import os from utils.ramdisk import RAMBlockDev bdev = RAMBlockDev(512, 50) os.VfsLfs2.mkfs(bdev) # os.VfsFat.mkfs(bdev) os.mount(bdev, '/ramdisk')","title":"\u2022 RAMdisk"}]}